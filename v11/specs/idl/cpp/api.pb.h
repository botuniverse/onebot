// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_api_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_api_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "base.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_api_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_api_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[82]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_api_2eproto;
namespace onebot {
class CanSendImageReq;
class CanSendImageReqDefaultTypeInternal;
extern CanSendImageReqDefaultTypeInternal _CanSendImageReq_default_instance_;
class CanSendImageResp;
class CanSendImageRespDefaultTypeInternal;
extern CanSendImageRespDefaultTypeInternal _CanSendImageResp_default_instance_;
class CanSendRecordReq;
class CanSendRecordReqDefaultTypeInternal;
extern CanSendRecordReqDefaultTypeInternal _CanSendRecordReq_default_instance_;
class CanSendRecordResp;
class CanSendRecordRespDefaultTypeInternal;
extern CanSendRecordRespDefaultTypeInternal _CanSendRecordResp_default_instance_;
class CleanCacheReq;
class CleanCacheReqDefaultTypeInternal;
extern CleanCacheReqDefaultTypeInternal _CleanCacheReq_default_instance_;
class CleanCacheResp;
class CleanCacheRespDefaultTypeInternal;
extern CleanCacheRespDefaultTypeInternal _CleanCacheResp_default_instance_;
class DeleteMsgReq;
class DeleteMsgReqDefaultTypeInternal;
extern DeleteMsgReqDefaultTypeInternal _DeleteMsgReq_default_instance_;
class DeleteMsgResp;
class DeleteMsgRespDefaultTypeInternal;
extern DeleteMsgRespDefaultTypeInternal _DeleteMsgResp_default_instance_;
class GetCookiesReq;
class GetCookiesReqDefaultTypeInternal;
extern GetCookiesReqDefaultTypeInternal _GetCookiesReq_default_instance_;
class GetCookiesResp;
class GetCookiesRespDefaultTypeInternal;
extern GetCookiesRespDefaultTypeInternal _GetCookiesResp_default_instance_;
class GetCredentialsReq;
class GetCredentialsReqDefaultTypeInternal;
extern GetCredentialsReqDefaultTypeInternal _GetCredentialsReq_default_instance_;
class GetCredentialsResp;
class GetCredentialsRespDefaultTypeInternal;
extern GetCredentialsRespDefaultTypeInternal _GetCredentialsResp_default_instance_;
class GetCsrfTokenReq;
class GetCsrfTokenReqDefaultTypeInternal;
extern GetCsrfTokenReqDefaultTypeInternal _GetCsrfTokenReq_default_instance_;
class GetCsrfTokenResp;
class GetCsrfTokenRespDefaultTypeInternal;
extern GetCsrfTokenRespDefaultTypeInternal _GetCsrfTokenResp_default_instance_;
class GetForwardMsgReq;
class GetForwardMsgReqDefaultTypeInternal;
extern GetForwardMsgReqDefaultTypeInternal _GetForwardMsgReq_default_instance_;
class GetForwardMsgResp;
class GetForwardMsgRespDefaultTypeInternal;
extern GetForwardMsgRespDefaultTypeInternal _GetForwardMsgResp_default_instance_;
class GetFriendListReq;
class GetFriendListReqDefaultTypeInternal;
extern GetFriendListReqDefaultTypeInternal _GetFriendListReq_default_instance_;
class GetFriendListResp;
class GetFriendListRespDefaultTypeInternal;
extern GetFriendListRespDefaultTypeInternal _GetFriendListResp_default_instance_;
class GetFriendListResp_Friend;
class GetFriendListResp_FriendDefaultTypeInternal;
extern GetFriendListResp_FriendDefaultTypeInternal _GetFriendListResp_Friend_default_instance_;
class GetGroupHonorInfoReq;
class GetGroupHonorInfoReqDefaultTypeInternal;
extern GetGroupHonorInfoReqDefaultTypeInternal _GetGroupHonorInfoReq_default_instance_;
class GetGroupHonorInfoResp;
class GetGroupHonorInfoRespDefaultTypeInternal;
extern GetGroupHonorInfoRespDefaultTypeInternal _GetGroupHonorInfoResp_default_instance_;
class GetGroupHonorInfoResp_CurrentTalkative;
class GetGroupHonorInfoResp_CurrentTalkativeDefaultTypeInternal;
extern GetGroupHonorInfoResp_CurrentTalkativeDefaultTypeInternal _GetGroupHonorInfoResp_CurrentTalkative_default_instance_;
class GetGroupHonorInfoResp_Honor;
class GetGroupHonorInfoResp_HonorDefaultTypeInternal;
extern GetGroupHonorInfoResp_HonorDefaultTypeInternal _GetGroupHonorInfoResp_Honor_default_instance_;
class GetGroupInfoReq;
class GetGroupInfoReqDefaultTypeInternal;
extern GetGroupInfoReqDefaultTypeInternal _GetGroupInfoReq_default_instance_;
class GetGroupInfoResp;
class GetGroupInfoRespDefaultTypeInternal;
extern GetGroupInfoRespDefaultTypeInternal _GetGroupInfoResp_default_instance_;
class GetGroupListReq;
class GetGroupListReqDefaultTypeInternal;
extern GetGroupListReqDefaultTypeInternal _GetGroupListReq_default_instance_;
class GetGroupListResp;
class GetGroupListRespDefaultTypeInternal;
extern GetGroupListRespDefaultTypeInternal _GetGroupListResp_default_instance_;
class GetGroupListResp_Group;
class GetGroupListResp_GroupDefaultTypeInternal;
extern GetGroupListResp_GroupDefaultTypeInternal _GetGroupListResp_Group_default_instance_;
class GetGroupMemberInfoReq;
class GetGroupMemberInfoReqDefaultTypeInternal;
extern GetGroupMemberInfoReqDefaultTypeInternal _GetGroupMemberInfoReq_default_instance_;
class GetGroupMemberInfoResp;
class GetGroupMemberInfoRespDefaultTypeInternal;
extern GetGroupMemberInfoRespDefaultTypeInternal _GetGroupMemberInfoResp_default_instance_;
class GetGroupMemberListReq;
class GetGroupMemberListReqDefaultTypeInternal;
extern GetGroupMemberListReqDefaultTypeInternal _GetGroupMemberListReq_default_instance_;
class GetGroupMemberListResp;
class GetGroupMemberListRespDefaultTypeInternal;
extern GetGroupMemberListRespDefaultTypeInternal _GetGroupMemberListResp_default_instance_;
class GetGroupMemberListResp_GroupMember;
class GetGroupMemberListResp_GroupMemberDefaultTypeInternal;
extern GetGroupMemberListResp_GroupMemberDefaultTypeInternal _GetGroupMemberListResp_GroupMember_default_instance_;
class GetImageReq;
class GetImageReqDefaultTypeInternal;
extern GetImageReqDefaultTypeInternal _GetImageReq_default_instance_;
class GetImageResp;
class GetImageRespDefaultTypeInternal;
extern GetImageRespDefaultTypeInternal _GetImageResp_default_instance_;
class GetLoginInfoReq;
class GetLoginInfoReqDefaultTypeInternal;
extern GetLoginInfoReqDefaultTypeInternal _GetLoginInfoReq_default_instance_;
class GetLoginInfoResp;
class GetLoginInfoRespDefaultTypeInternal;
extern GetLoginInfoRespDefaultTypeInternal _GetLoginInfoResp_default_instance_;
class GetMsgReq;
class GetMsgReqDefaultTypeInternal;
extern GetMsgReqDefaultTypeInternal _GetMsgReq_default_instance_;
class GetMsgResp;
class GetMsgRespDefaultTypeInternal;
extern GetMsgRespDefaultTypeInternal _GetMsgResp_default_instance_;
class GetMsgResp_Sender;
class GetMsgResp_SenderDefaultTypeInternal;
extern GetMsgResp_SenderDefaultTypeInternal _GetMsgResp_Sender_default_instance_;
class GetRecordReq;
class GetRecordReqDefaultTypeInternal;
extern GetRecordReqDefaultTypeInternal _GetRecordReq_default_instance_;
class GetRecordResp;
class GetRecordRespDefaultTypeInternal;
extern GetRecordRespDefaultTypeInternal _GetRecordResp_default_instance_;
class GetStatusReq;
class GetStatusReqDefaultTypeInternal;
extern GetStatusReqDefaultTypeInternal _GetStatusReq_default_instance_;
class GetStatusResp;
class GetStatusRespDefaultTypeInternal;
extern GetStatusRespDefaultTypeInternal _GetStatusResp_default_instance_;
class GetStrangerInfoReq;
class GetStrangerInfoReqDefaultTypeInternal;
extern GetStrangerInfoReqDefaultTypeInternal _GetStrangerInfoReq_default_instance_;
class GetStrangerInfoResp;
class GetStrangerInfoRespDefaultTypeInternal;
extern GetStrangerInfoRespDefaultTypeInternal _GetStrangerInfoResp_default_instance_;
class GetVersionInfoReq;
class GetVersionInfoReqDefaultTypeInternal;
extern GetVersionInfoReqDefaultTypeInternal _GetVersionInfoReq_default_instance_;
class GetVersionInfoResp;
class GetVersionInfoRespDefaultTypeInternal;
extern GetVersionInfoRespDefaultTypeInternal _GetVersionInfoResp_default_instance_;
class GetVersionInfoResp_ExtraEntry_DoNotUse;
class GetVersionInfoResp_ExtraEntry_DoNotUseDefaultTypeInternal;
extern GetVersionInfoResp_ExtraEntry_DoNotUseDefaultTypeInternal _GetVersionInfoResp_ExtraEntry_DoNotUse_default_instance_;
class SendGroupMsgReq;
class SendGroupMsgReqDefaultTypeInternal;
extern SendGroupMsgReqDefaultTypeInternal _SendGroupMsgReq_default_instance_;
class SendGroupMsgResp;
class SendGroupMsgRespDefaultTypeInternal;
extern SendGroupMsgRespDefaultTypeInternal _SendGroupMsgResp_default_instance_;
class SendLikeReq;
class SendLikeReqDefaultTypeInternal;
extern SendLikeReqDefaultTypeInternal _SendLikeReq_default_instance_;
class SendListResp;
class SendListRespDefaultTypeInternal;
extern SendListRespDefaultTypeInternal _SendListResp_default_instance_;
class SendMsgReq;
class SendMsgReqDefaultTypeInternal;
extern SendMsgReqDefaultTypeInternal _SendMsgReq_default_instance_;
class SendMsgResp;
class SendMsgRespDefaultTypeInternal;
extern SendMsgRespDefaultTypeInternal _SendMsgResp_default_instance_;
class SendPrivateMsgReq;
class SendPrivateMsgReqDefaultTypeInternal;
extern SendPrivateMsgReqDefaultTypeInternal _SendPrivateMsgReq_default_instance_;
class SendPrivateMsgResp;
class SendPrivateMsgRespDefaultTypeInternal;
extern SendPrivateMsgRespDefaultTypeInternal _SendPrivateMsgResp_default_instance_;
class SetFriendAddRequestReq;
class SetFriendAddRequestReqDefaultTypeInternal;
extern SetFriendAddRequestReqDefaultTypeInternal _SetFriendAddRequestReq_default_instance_;
class SetFriendAddRequestResp;
class SetFriendAddRequestRespDefaultTypeInternal;
extern SetFriendAddRequestRespDefaultTypeInternal _SetFriendAddRequestResp_default_instance_;
class SetGroupAddRequestReq;
class SetGroupAddRequestReqDefaultTypeInternal;
extern SetGroupAddRequestReqDefaultTypeInternal _SetGroupAddRequestReq_default_instance_;
class SetGroupAddRequestResp;
class SetGroupAddRequestRespDefaultTypeInternal;
extern SetGroupAddRequestRespDefaultTypeInternal _SetGroupAddRequestResp_default_instance_;
class SetGroupAdminReq;
class SetGroupAdminReqDefaultTypeInternal;
extern SetGroupAdminReqDefaultTypeInternal _SetGroupAdminReq_default_instance_;
class SetGroupAdminResp;
class SetGroupAdminRespDefaultTypeInternal;
extern SetGroupAdminRespDefaultTypeInternal _SetGroupAdminResp_default_instance_;
class SetGroupAnonymousBanReq;
class SetGroupAnonymousBanReqDefaultTypeInternal;
extern SetGroupAnonymousBanReqDefaultTypeInternal _SetGroupAnonymousBanReq_default_instance_;
class SetGroupAnonymousBanReq_Anonymous;
class SetGroupAnonymousBanReq_AnonymousDefaultTypeInternal;
extern SetGroupAnonymousBanReq_AnonymousDefaultTypeInternal _SetGroupAnonymousBanReq_Anonymous_default_instance_;
class SetGroupAnonymousBanResp;
class SetGroupAnonymousBanRespDefaultTypeInternal;
extern SetGroupAnonymousBanRespDefaultTypeInternal _SetGroupAnonymousBanResp_default_instance_;
class SetGroupAnonymousReq;
class SetGroupAnonymousReqDefaultTypeInternal;
extern SetGroupAnonymousReqDefaultTypeInternal _SetGroupAnonymousReq_default_instance_;
class SetGroupAnonymousResp;
class SetGroupAnonymousRespDefaultTypeInternal;
extern SetGroupAnonymousRespDefaultTypeInternal _SetGroupAnonymousResp_default_instance_;
class SetGroupBanReq;
class SetGroupBanReqDefaultTypeInternal;
extern SetGroupBanReqDefaultTypeInternal _SetGroupBanReq_default_instance_;
class SetGroupBanResp;
class SetGroupBanRespDefaultTypeInternal;
extern SetGroupBanRespDefaultTypeInternal _SetGroupBanResp_default_instance_;
class SetGroupKickReq;
class SetGroupKickReqDefaultTypeInternal;
extern SetGroupKickReqDefaultTypeInternal _SetGroupKickReq_default_instance_;
class SetGroupKickResp;
class SetGroupKickRespDefaultTypeInternal;
extern SetGroupKickRespDefaultTypeInternal _SetGroupKickResp_default_instance_;
class SetGroupLeaveReq;
class SetGroupLeaveReqDefaultTypeInternal;
extern SetGroupLeaveReqDefaultTypeInternal _SetGroupLeaveReq_default_instance_;
class SetGroupLeaveResp;
class SetGroupLeaveRespDefaultTypeInternal;
extern SetGroupLeaveRespDefaultTypeInternal _SetGroupLeaveResp_default_instance_;
class SetGroupNameReq;
class SetGroupNameReqDefaultTypeInternal;
extern SetGroupNameReqDefaultTypeInternal _SetGroupNameReq_default_instance_;
class SetGroupNameResp;
class SetGroupNameRespDefaultTypeInternal;
extern SetGroupNameRespDefaultTypeInternal _SetGroupNameResp_default_instance_;
class SetGroupSpecialTitleReq;
class SetGroupSpecialTitleReqDefaultTypeInternal;
extern SetGroupSpecialTitleReqDefaultTypeInternal _SetGroupSpecialTitleReq_default_instance_;
class SetGroupSpecialTitleResp;
class SetGroupSpecialTitleRespDefaultTypeInternal;
extern SetGroupSpecialTitleRespDefaultTypeInternal _SetGroupSpecialTitleResp_default_instance_;
class SetGroupWholeBanReq;
class SetGroupWholeBanReqDefaultTypeInternal;
extern SetGroupWholeBanReqDefaultTypeInternal _SetGroupWholeBanReq_default_instance_;
class SetGroupWholeBanResp;
class SetGroupWholeBanRespDefaultTypeInternal;
extern SetGroupWholeBanRespDefaultTypeInternal _SetGroupWholeBanResp_default_instance_;
class SetRestartReq;
class SetRestartReqDefaultTypeInternal;
extern SetRestartReqDefaultTypeInternal _SetRestartReq_default_instance_;
class SetRestartResp;
class SetRestartRespDefaultTypeInternal;
extern SetRestartRespDefaultTypeInternal _SetRestartResp_default_instance_;
}  // namespace onebot
PROTOBUF_NAMESPACE_OPEN
template<> ::onebot::CanSendImageReq* Arena::CreateMaybeMessage<::onebot::CanSendImageReq>(Arena*);
template<> ::onebot::CanSendImageResp* Arena::CreateMaybeMessage<::onebot::CanSendImageResp>(Arena*);
template<> ::onebot::CanSendRecordReq* Arena::CreateMaybeMessage<::onebot::CanSendRecordReq>(Arena*);
template<> ::onebot::CanSendRecordResp* Arena::CreateMaybeMessage<::onebot::CanSendRecordResp>(Arena*);
template<> ::onebot::CleanCacheReq* Arena::CreateMaybeMessage<::onebot::CleanCacheReq>(Arena*);
template<> ::onebot::CleanCacheResp* Arena::CreateMaybeMessage<::onebot::CleanCacheResp>(Arena*);
template<> ::onebot::DeleteMsgReq* Arena::CreateMaybeMessage<::onebot::DeleteMsgReq>(Arena*);
template<> ::onebot::DeleteMsgResp* Arena::CreateMaybeMessage<::onebot::DeleteMsgResp>(Arena*);
template<> ::onebot::GetCookiesReq* Arena::CreateMaybeMessage<::onebot::GetCookiesReq>(Arena*);
template<> ::onebot::GetCookiesResp* Arena::CreateMaybeMessage<::onebot::GetCookiesResp>(Arena*);
template<> ::onebot::GetCredentialsReq* Arena::CreateMaybeMessage<::onebot::GetCredentialsReq>(Arena*);
template<> ::onebot::GetCredentialsResp* Arena::CreateMaybeMessage<::onebot::GetCredentialsResp>(Arena*);
template<> ::onebot::GetCsrfTokenReq* Arena::CreateMaybeMessage<::onebot::GetCsrfTokenReq>(Arena*);
template<> ::onebot::GetCsrfTokenResp* Arena::CreateMaybeMessage<::onebot::GetCsrfTokenResp>(Arena*);
template<> ::onebot::GetForwardMsgReq* Arena::CreateMaybeMessage<::onebot::GetForwardMsgReq>(Arena*);
template<> ::onebot::GetForwardMsgResp* Arena::CreateMaybeMessage<::onebot::GetForwardMsgResp>(Arena*);
template<> ::onebot::GetFriendListReq* Arena::CreateMaybeMessage<::onebot::GetFriendListReq>(Arena*);
template<> ::onebot::GetFriendListResp* Arena::CreateMaybeMessage<::onebot::GetFriendListResp>(Arena*);
template<> ::onebot::GetFriendListResp_Friend* Arena::CreateMaybeMessage<::onebot::GetFriendListResp_Friend>(Arena*);
template<> ::onebot::GetGroupHonorInfoReq* Arena::CreateMaybeMessage<::onebot::GetGroupHonorInfoReq>(Arena*);
template<> ::onebot::GetGroupHonorInfoResp* Arena::CreateMaybeMessage<::onebot::GetGroupHonorInfoResp>(Arena*);
template<> ::onebot::GetGroupHonorInfoResp_CurrentTalkative* Arena::CreateMaybeMessage<::onebot::GetGroupHonorInfoResp_CurrentTalkative>(Arena*);
template<> ::onebot::GetGroupHonorInfoResp_Honor* Arena::CreateMaybeMessage<::onebot::GetGroupHonorInfoResp_Honor>(Arena*);
template<> ::onebot::GetGroupInfoReq* Arena::CreateMaybeMessage<::onebot::GetGroupInfoReq>(Arena*);
template<> ::onebot::GetGroupInfoResp* Arena::CreateMaybeMessage<::onebot::GetGroupInfoResp>(Arena*);
template<> ::onebot::GetGroupListReq* Arena::CreateMaybeMessage<::onebot::GetGroupListReq>(Arena*);
template<> ::onebot::GetGroupListResp* Arena::CreateMaybeMessage<::onebot::GetGroupListResp>(Arena*);
template<> ::onebot::GetGroupListResp_Group* Arena::CreateMaybeMessage<::onebot::GetGroupListResp_Group>(Arena*);
template<> ::onebot::GetGroupMemberInfoReq* Arena::CreateMaybeMessage<::onebot::GetGroupMemberInfoReq>(Arena*);
template<> ::onebot::GetGroupMemberInfoResp* Arena::CreateMaybeMessage<::onebot::GetGroupMemberInfoResp>(Arena*);
template<> ::onebot::GetGroupMemberListReq* Arena::CreateMaybeMessage<::onebot::GetGroupMemberListReq>(Arena*);
template<> ::onebot::GetGroupMemberListResp* Arena::CreateMaybeMessage<::onebot::GetGroupMemberListResp>(Arena*);
template<> ::onebot::GetGroupMemberListResp_GroupMember* Arena::CreateMaybeMessage<::onebot::GetGroupMemberListResp_GroupMember>(Arena*);
template<> ::onebot::GetImageReq* Arena::CreateMaybeMessage<::onebot::GetImageReq>(Arena*);
template<> ::onebot::GetImageResp* Arena::CreateMaybeMessage<::onebot::GetImageResp>(Arena*);
template<> ::onebot::GetLoginInfoReq* Arena::CreateMaybeMessage<::onebot::GetLoginInfoReq>(Arena*);
template<> ::onebot::GetLoginInfoResp* Arena::CreateMaybeMessage<::onebot::GetLoginInfoResp>(Arena*);
template<> ::onebot::GetMsgReq* Arena::CreateMaybeMessage<::onebot::GetMsgReq>(Arena*);
template<> ::onebot::GetMsgResp* Arena::CreateMaybeMessage<::onebot::GetMsgResp>(Arena*);
template<> ::onebot::GetMsgResp_Sender* Arena::CreateMaybeMessage<::onebot::GetMsgResp_Sender>(Arena*);
template<> ::onebot::GetRecordReq* Arena::CreateMaybeMessage<::onebot::GetRecordReq>(Arena*);
template<> ::onebot::GetRecordResp* Arena::CreateMaybeMessage<::onebot::GetRecordResp>(Arena*);
template<> ::onebot::GetStatusReq* Arena::CreateMaybeMessage<::onebot::GetStatusReq>(Arena*);
template<> ::onebot::GetStatusResp* Arena::CreateMaybeMessage<::onebot::GetStatusResp>(Arena*);
template<> ::onebot::GetStrangerInfoReq* Arena::CreateMaybeMessage<::onebot::GetStrangerInfoReq>(Arena*);
template<> ::onebot::GetStrangerInfoResp* Arena::CreateMaybeMessage<::onebot::GetStrangerInfoResp>(Arena*);
template<> ::onebot::GetVersionInfoReq* Arena::CreateMaybeMessage<::onebot::GetVersionInfoReq>(Arena*);
template<> ::onebot::GetVersionInfoResp* Arena::CreateMaybeMessage<::onebot::GetVersionInfoResp>(Arena*);
template<> ::onebot::GetVersionInfoResp_ExtraEntry_DoNotUse* Arena::CreateMaybeMessage<::onebot::GetVersionInfoResp_ExtraEntry_DoNotUse>(Arena*);
template<> ::onebot::SendGroupMsgReq* Arena::CreateMaybeMessage<::onebot::SendGroupMsgReq>(Arena*);
template<> ::onebot::SendGroupMsgResp* Arena::CreateMaybeMessage<::onebot::SendGroupMsgResp>(Arena*);
template<> ::onebot::SendLikeReq* Arena::CreateMaybeMessage<::onebot::SendLikeReq>(Arena*);
template<> ::onebot::SendListResp* Arena::CreateMaybeMessage<::onebot::SendListResp>(Arena*);
template<> ::onebot::SendMsgReq* Arena::CreateMaybeMessage<::onebot::SendMsgReq>(Arena*);
template<> ::onebot::SendMsgResp* Arena::CreateMaybeMessage<::onebot::SendMsgResp>(Arena*);
template<> ::onebot::SendPrivateMsgReq* Arena::CreateMaybeMessage<::onebot::SendPrivateMsgReq>(Arena*);
template<> ::onebot::SendPrivateMsgResp* Arena::CreateMaybeMessage<::onebot::SendPrivateMsgResp>(Arena*);
template<> ::onebot::SetFriendAddRequestReq* Arena::CreateMaybeMessage<::onebot::SetFriendAddRequestReq>(Arena*);
template<> ::onebot::SetFriendAddRequestResp* Arena::CreateMaybeMessage<::onebot::SetFriendAddRequestResp>(Arena*);
template<> ::onebot::SetGroupAddRequestReq* Arena::CreateMaybeMessage<::onebot::SetGroupAddRequestReq>(Arena*);
template<> ::onebot::SetGroupAddRequestResp* Arena::CreateMaybeMessage<::onebot::SetGroupAddRequestResp>(Arena*);
template<> ::onebot::SetGroupAdminReq* Arena::CreateMaybeMessage<::onebot::SetGroupAdminReq>(Arena*);
template<> ::onebot::SetGroupAdminResp* Arena::CreateMaybeMessage<::onebot::SetGroupAdminResp>(Arena*);
template<> ::onebot::SetGroupAnonymousBanReq* Arena::CreateMaybeMessage<::onebot::SetGroupAnonymousBanReq>(Arena*);
template<> ::onebot::SetGroupAnonymousBanReq_Anonymous* Arena::CreateMaybeMessage<::onebot::SetGroupAnonymousBanReq_Anonymous>(Arena*);
template<> ::onebot::SetGroupAnonymousBanResp* Arena::CreateMaybeMessage<::onebot::SetGroupAnonymousBanResp>(Arena*);
template<> ::onebot::SetGroupAnonymousReq* Arena::CreateMaybeMessage<::onebot::SetGroupAnonymousReq>(Arena*);
template<> ::onebot::SetGroupAnonymousResp* Arena::CreateMaybeMessage<::onebot::SetGroupAnonymousResp>(Arena*);
template<> ::onebot::SetGroupBanReq* Arena::CreateMaybeMessage<::onebot::SetGroupBanReq>(Arena*);
template<> ::onebot::SetGroupBanResp* Arena::CreateMaybeMessage<::onebot::SetGroupBanResp>(Arena*);
template<> ::onebot::SetGroupKickReq* Arena::CreateMaybeMessage<::onebot::SetGroupKickReq>(Arena*);
template<> ::onebot::SetGroupKickResp* Arena::CreateMaybeMessage<::onebot::SetGroupKickResp>(Arena*);
template<> ::onebot::SetGroupLeaveReq* Arena::CreateMaybeMessage<::onebot::SetGroupLeaveReq>(Arena*);
template<> ::onebot::SetGroupLeaveResp* Arena::CreateMaybeMessage<::onebot::SetGroupLeaveResp>(Arena*);
template<> ::onebot::SetGroupNameReq* Arena::CreateMaybeMessage<::onebot::SetGroupNameReq>(Arena*);
template<> ::onebot::SetGroupNameResp* Arena::CreateMaybeMessage<::onebot::SetGroupNameResp>(Arena*);
template<> ::onebot::SetGroupSpecialTitleReq* Arena::CreateMaybeMessage<::onebot::SetGroupSpecialTitleReq>(Arena*);
template<> ::onebot::SetGroupSpecialTitleResp* Arena::CreateMaybeMessage<::onebot::SetGroupSpecialTitleResp>(Arena*);
template<> ::onebot::SetGroupWholeBanReq* Arena::CreateMaybeMessage<::onebot::SetGroupWholeBanReq>(Arena*);
template<> ::onebot::SetGroupWholeBanResp* Arena::CreateMaybeMessage<::onebot::SetGroupWholeBanResp>(Arena*);
template<> ::onebot::SetRestartReq* Arena::CreateMaybeMessage<::onebot::SetRestartReq>(Arena*);
template<> ::onebot::SetRestartResp* Arena::CreateMaybeMessage<::onebot::SetRestartResp>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace onebot {

// ===================================================================

class SendPrivateMsgReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onebot.SendPrivateMsgReq) */ {
 public:
  inline SendPrivateMsgReq() : SendPrivateMsgReq(nullptr) {};
  virtual ~SendPrivateMsgReq();

  SendPrivateMsgReq(const SendPrivateMsgReq& from);
  SendPrivateMsgReq(SendPrivateMsgReq&& from) noexcept
    : SendPrivateMsgReq() {
    *this = ::std::move(from);
  }

  inline SendPrivateMsgReq& operator=(const SendPrivateMsgReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendPrivateMsgReq& operator=(SendPrivateMsgReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SendPrivateMsgReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SendPrivateMsgReq* internal_default_instance() {
    return reinterpret_cast<const SendPrivateMsgReq*>(
               &_SendPrivateMsgReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SendPrivateMsgReq& a, SendPrivateMsgReq& b) {
    a.Swap(&b);
  }
  inline void Swap(SendPrivateMsgReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendPrivateMsgReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SendPrivateMsgReq* New() const final {
    return CreateMaybeMessage<SendPrivateMsgReq>(nullptr);
  }

  SendPrivateMsgReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SendPrivateMsgReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SendPrivateMsgReq& from);
  void MergeFrom(const SendPrivateMsgReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendPrivateMsgReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onebot.SendPrivateMsgReq";
  }
  protected:
  explicit SendPrivateMsgReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kUserIdFieldNumber = 1,
    kAutoEscapeFieldNumber = 3,
  };
  // .onebot.Message message = 2;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const ::onebot::Message& message() const;
  ::onebot::Message* release_message();
  ::onebot::Message* mutable_message();
  void set_allocated_message(::onebot::Message* message);
  private:
  const ::onebot::Message& _internal_message() const;
  ::onebot::Message* _internal_mutable_message();
  public:
  void unsafe_arena_set_allocated_message(
      ::onebot::Message* message);
  ::onebot::Message* unsafe_arena_release_message();

  // int64 user_id = 1;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::int64 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool auto_escape = 3;
  void clear_auto_escape();
  bool auto_escape() const;
  void set_auto_escape(bool value);
  private:
  bool _internal_auto_escape() const;
  void _internal_set_auto_escape(bool value);
  public:

  // @@protoc_insertion_point(class_scope:onebot.SendPrivateMsgReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::onebot::Message* message_;
  ::PROTOBUF_NAMESPACE_ID::int64 user_id_;
  bool auto_escape_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class SendPrivateMsgResp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onebot.SendPrivateMsgResp) */ {
 public:
  inline SendPrivateMsgResp() : SendPrivateMsgResp(nullptr) {};
  virtual ~SendPrivateMsgResp();

  SendPrivateMsgResp(const SendPrivateMsgResp& from);
  SendPrivateMsgResp(SendPrivateMsgResp&& from) noexcept
    : SendPrivateMsgResp() {
    *this = ::std::move(from);
  }

  inline SendPrivateMsgResp& operator=(const SendPrivateMsgResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendPrivateMsgResp& operator=(SendPrivateMsgResp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SendPrivateMsgResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SendPrivateMsgResp* internal_default_instance() {
    return reinterpret_cast<const SendPrivateMsgResp*>(
               &_SendPrivateMsgResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SendPrivateMsgResp& a, SendPrivateMsgResp& b) {
    a.Swap(&b);
  }
  inline void Swap(SendPrivateMsgResp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendPrivateMsgResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SendPrivateMsgResp* New() const final {
    return CreateMaybeMessage<SendPrivateMsgResp>(nullptr);
  }

  SendPrivateMsgResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SendPrivateMsgResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SendPrivateMsgResp& from);
  void MergeFrom(const SendPrivateMsgResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendPrivateMsgResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onebot.SendPrivateMsgResp";
  }
  protected:
  explicit SendPrivateMsgResp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageIdFieldNumber = 1,
  };
  // int32 message_id = 1;
  void clear_message_id();
  ::PROTOBUF_NAMESPACE_ID::int32 message_id() const;
  void set_message_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_message_id() const;
  void _internal_set_message_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:onebot.SendPrivateMsgResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 message_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class SendGroupMsgReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onebot.SendGroupMsgReq) */ {
 public:
  inline SendGroupMsgReq() : SendGroupMsgReq(nullptr) {};
  virtual ~SendGroupMsgReq();

  SendGroupMsgReq(const SendGroupMsgReq& from);
  SendGroupMsgReq(SendGroupMsgReq&& from) noexcept
    : SendGroupMsgReq() {
    *this = ::std::move(from);
  }

  inline SendGroupMsgReq& operator=(const SendGroupMsgReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendGroupMsgReq& operator=(SendGroupMsgReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SendGroupMsgReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SendGroupMsgReq* internal_default_instance() {
    return reinterpret_cast<const SendGroupMsgReq*>(
               &_SendGroupMsgReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SendGroupMsgReq& a, SendGroupMsgReq& b) {
    a.Swap(&b);
  }
  inline void Swap(SendGroupMsgReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendGroupMsgReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SendGroupMsgReq* New() const final {
    return CreateMaybeMessage<SendGroupMsgReq>(nullptr);
  }

  SendGroupMsgReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SendGroupMsgReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SendGroupMsgReq& from);
  void MergeFrom(const SendGroupMsgReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendGroupMsgReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onebot.SendGroupMsgReq";
  }
  protected:
  explicit SendGroupMsgReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kGroupIdFieldNumber = 1,
    kAutoEscapeFieldNumber = 3,
  };
  // .onebot.Message message = 2;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const ::onebot::Message& message() const;
  ::onebot::Message* release_message();
  ::onebot::Message* mutable_message();
  void set_allocated_message(::onebot::Message* message);
  private:
  const ::onebot::Message& _internal_message() const;
  ::onebot::Message* _internal_mutable_message();
  public:
  void unsafe_arena_set_allocated_message(
      ::onebot::Message* message);
  ::onebot::Message* unsafe_arena_release_message();

  // int64 group_id = 1;
  void clear_group_id();
  ::PROTOBUF_NAMESPACE_ID::int64 group_id() const;
  void set_group_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_group_id() const;
  void _internal_set_group_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool auto_escape = 3;
  void clear_auto_escape();
  bool auto_escape() const;
  void set_auto_escape(bool value);
  private:
  bool _internal_auto_escape() const;
  void _internal_set_auto_escape(bool value);
  public:

  // @@protoc_insertion_point(class_scope:onebot.SendGroupMsgReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::onebot::Message* message_;
  ::PROTOBUF_NAMESPACE_ID::int64 group_id_;
  bool auto_escape_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class SendGroupMsgResp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onebot.SendGroupMsgResp) */ {
 public:
  inline SendGroupMsgResp() : SendGroupMsgResp(nullptr) {};
  virtual ~SendGroupMsgResp();

  SendGroupMsgResp(const SendGroupMsgResp& from);
  SendGroupMsgResp(SendGroupMsgResp&& from) noexcept
    : SendGroupMsgResp() {
    *this = ::std::move(from);
  }

  inline SendGroupMsgResp& operator=(const SendGroupMsgResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendGroupMsgResp& operator=(SendGroupMsgResp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SendGroupMsgResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SendGroupMsgResp* internal_default_instance() {
    return reinterpret_cast<const SendGroupMsgResp*>(
               &_SendGroupMsgResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SendGroupMsgResp& a, SendGroupMsgResp& b) {
    a.Swap(&b);
  }
  inline void Swap(SendGroupMsgResp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendGroupMsgResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SendGroupMsgResp* New() const final {
    return CreateMaybeMessage<SendGroupMsgResp>(nullptr);
  }

  SendGroupMsgResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SendGroupMsgResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SendGroupMsgResp& from);
  void MergeFrom(const SendGroupMsgResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendGroupMsgResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onebot.SendGroupMsgResp";
  }
  protected:
  explicit SendGroupMsgResp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageIdFieldNumber = 1,
  };
  // int32 message_id = 1;
  void clear_message_id();
  ::PROTOBUF_NAMESPACE_ID::int32 message_id() const;
  void set_message_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_message_id() const;
  void _internal_set_message_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:onebot.SendGroupMsgResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 message_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class SendMsgReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onebot.SendMsgReq) */ {
 public:
  inline SendMsgReq() : SendMsgReq(nullptr) {};
  virtual ~SendMsgReq();

  SendMsgReq(const SendMsgReq& from);
  SendMsgReq(SendMsgReq&& from) noexcept
    : SendMsgReq() {
    *this = ::std::move(from);
  }

  inline SendMsgReq& operator=(const SendMsgReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendMsgReq& operator=(SendMsgReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SendMsgReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SendMsgReq* internal_default_instance() {
    return reinterpret_cast<const SendMsgReq*>(
               &_SendMsgReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SendMsgReq& a, SendMsgReq& b) {
    a.Swap(&b);
  }
  inline void Swap(SendMsgReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendMsgReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SendMsgReq* New() const final {
    return CreateMaybeMessage<SendMsgReq>(nullptr);
  }

  SendMsgReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SendMsgReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SendMsgReq& from);
  void MergeFrom(const SendMsgReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendMsgReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onebot.SendMsgReq";
  }
  protected:
  explicit SendMsgReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageTypeFieldNumber = 1,
    kMessageFieldNumber = 4,
    kUserIdFieldNumber = 2,
    kGroupIdFieldNumber = 3,
    kAutoEscapeFieldNumber = 5,
  };
  // string message_type = 1;
  void clear_message_type();
  const std::string& message_type() const;
  void set_message_type(const std::string& value);
  void set_message_type(std::string&& value);
  void set_message_type(const char* value);
  void set_message_type(const char* value, size_t size);
  std::string* mutable_message_type();
  std::string* release_message_type();
  void set_allocated_message_type(std::string* message_type);
  private:
  const std::string& _internal_message_type() const;
  void _internal_set_message_type(const std::string& value);
  std::string* _internal_mutable_message_type();
  public:

  // .onebot.Message message = 4;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const ::onebot::Message& message() const;
  ::onebot::Message* release_message();
  ::onebot::Message* mutable_message();
  void set_allocated_message(::onebot::Message* message);
  private:
  const ::onebot::Message& _internal_message() const;
  ::onebot::Message* _internal_mutable_message();
  public:
  void unsafe_arena_set_allocated_message(
      ::onebot::Message* message);
  ::onebot::Message* unsafe_arena_release_message();

  // int64 user_id = 2;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::int64 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 group_id = 3;
  void clear_group_id();
  ::PROTOBUF_NAMESPACE_ID::int64 group_id() const;
  void set_group_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_group_id() const;
  void _internal_set_group_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool auto_escape = 5;
  void clear_auto_escape();
  bool auto_escape() const;
  void set_auto_escape(bool value);
  private:
  bool _internal_auto_escape() const;
  void _internal_set_auto_escape(bool value);
  public:

  // @@protoc_insertion_point(class_scope:onebot.SendMsgReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_type_;
  ::onebot::Message* message_;
  ::PROTOBUF_NAMESPACE_ID::int64 user_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 group_id_;
  bool auto_escape_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class SendMsgResp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onebot.SendMsgResp) */ {
 public:
  inline SendMsgResp() : SendMsgResp(nullptr) {};
  virtual ~SendMsgResp();

  SendMsgResp(const SendMsgResp& from);
  SendMsgResp(SendMsgResp&& from) noexcept
    : SendMsgResp() {
    *this = ::std::move(from);
  }

  inline SendMsgResp& operator=(const SendMsgResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendMsgResp& operator=(SendMsgResp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SendMsgResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SendMsgResp* internal_default_instance() {
    return reinterpret_cast<const SendMsgResp*>(
               &_SendMsgResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SendMsgResp& a, SendMsgResp& b) {
    a.Swap(&b);
  }
  inline void Swap(SendMsgResp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendMsgResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SendMsgResp* New() const final {
    return CreateMaybeMessage<SendMsgResp>(nullptr);
  }

  SendMsgResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SendMsgResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SendMsgResp& from);
  void MergeFrom(const SendMsgResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendMsgResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onebot.SendMsgResp";
  }
  protected:
  explicit SendMsgResp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageIdFieldNumber = 1,
  };
  // int32 message_id = 1;
  void clear_message_id();
  ::PROTOBUF_NAMESPACE_ID::int32 message_id() const;
  void set_message_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_message_id() const;
  void _internal_set_message_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:onebot.SendMsgResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 message_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class DeleteMsgReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onebot.DeleteMsgReq) */ {
 public:
  inline DeleteMsgReq() : DeleteMsgReq(nullptr) {};
  virtual ~DeleteMsgReq();

  DeleteMsgReq(const DeleteMsgReq& from);
  DeleteMsgReq(DeleteMsgReq&& from) noexcept
    : DeleteMsgReq() {
    *this = ::std::move(from);
  }

  inline DeleteMsgReq& operator=(const DeleteMsgReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteMsgReq& operator=(DeleteMsgReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteMsgReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteMsgReq* internal_default_instance() {
    return reinterpret_cast<const DeleteMsgReq*>(
               &_DeleteMsgReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(DeleteMsgReq& a, DeleteMsgReq& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteMsgReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteMsgReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteMsgReq* New() const final {
    return CreateMaybeMessage<DeleteMsgReq>(nullptr);
  }

  DeleteMsgReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteMsgReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteMsgReq& from);
  void MergeFrom(const DeleteMsgReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteMsgReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onebot.DeleteMsgReq";
  }
  protected:
  explicit DeleteMsgReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageIdFieldNumber = 1,
  };
  // int32 message_id = 1;
  void clear_message_id();
  ::PROTOBUF_NAMESPACE_ID::int32 message_id() const;
  void set_message_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_message_id() const;
  void _internal_set_message_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:onebot.DeleteMsgReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 message_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class DeleteMsgResp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onebot.DeleteMsgResp) */ {
 public:
  inline DeleteMsgResp() : DeleteMsgResp(nullptr) {};
  virtual ~DeleteMsgResp();

  DeleteMsgResp(const DeleteMsgResp& from);
  DeleteMsgResp(DeleteMsgResp&& from) noexcept
    : DeleteMsgResp() {
    *this = ::std::move(from);
  }

  inline DeleteMsgResp& operator=(const DeleteMsgResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteMsgResp& operator=(DeleteMsgResp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteMsgResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteMsgResp* internal_default_instance() {
    return reinterpret_cast<const DeleteMsgResp*>(
               &_DeleteMsgResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(DeleteMsgResp& a, DeleteMsgResp& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteMsgResp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteMsgResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteMsgResp* New() const final {
    return CreateMaybeMessage<DeleteMsgResp>(nullptr);
  }

  DeleteMsgResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteMsgResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteMsgResp& from);
  void MergeFrom(const DeleteMsgResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteMsgResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onebot.DeleteMsgResp";
  }
  protected:
  explicit DeleteMsgResp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:onebot.DeleteMsgResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class GetMsgReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onebot.GetMsgReq) */ {
 public:
  inline GetMsgReq() : GetMsgReq(nullptr) {};
  virtual ~GetMsgReq();

  GetMsgReq(const GetMsgReq& from);
  GetMsgReq(GetMsgReq&& from) noexcept
    : GetMsgReq() {
    *this = ::std::move(from);
  }

  inline GetMsgReq& operator=(const GetMsgReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetMsgReq& operator=(GetMsgReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetMsgReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetMsgReq* internal_default_instance() {
    return reinterpret_cast<const GetMsgReq*>(
               &_GetMsgReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(GetMsgReq& a, GetMsgReq& b) {
    a.Swap(&b);
  }
  inline void Swap(GetMsgReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetMsgReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetMsgReq* New() const final {
    return CreateMaybeMessage<GetMsgReq>(nullptr);
  }

  GetMsgReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetMsgReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetMsgReq& from);
  void MergeFrom(const GetMsgReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetMsgReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onebot.GetMsgReq";
  }
  protected:
  explicit GetMsgReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageIdFieldNumber = 1,
  };
  // int32 message_id = 1;
  void clear_message_id();
  ::PROTOBUF_NAMESPACE_ID::int32 message_id() const;
  void set_message_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_message_id() const;
  void _internal_set_message_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:onebot.GetMsgReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 message_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class GetMsgResp_Sender PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onebot.GetMsgResp.Sender) */ {
 public:
  inline GetMsgResp_Sender() : GetMsgResp_Sender(nullptr) {};
  virtual ~GetMsgResp_Sender();

  GetMsgResp_Sender(const GetMsgResp_Sender& from);
  GetMsgResp_Sender(GetMsgResp_Sender&& from) noexcept
    : GetMsgResp_Sender() {
    *this = ::std::move(from);
  }

  inline GetMsgResp_Sender& operator=(const GetMsgResp_Sender& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetMsgResp_Sender& operator=(GetMsgResp_Sender&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetMsgResp_Sender& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetMsgResp_Sender* internal_default_instance() {
    return reinterpret_cast<const GetMsgResp_Sender*>(
               &_GetMsgResp_Sender_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(GetMsgResp_Sender& a, GetMsgResp_Sender& b) {
    a.Swap(&b);
  }
  inline void Swap(GetMsgResp_Sender* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetMsgResp_Sender* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetMsgResp_Sender* New() const final {
    return CreateMaybeMessage<GetMsgResp_Sender>(nullptr);
  }

  GetMsgResp_Sender* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetMsgResp_Sender>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetMsgResp_Sender& from);
  void MergeFrom(const GetMsgResp_Sender& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetMsgResp_Sender* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onebot.GetMsgResp.Sender";
  }
  protected:
  explicit GetMsgResp_Sender(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNicknameFieldNumber = 2,
    kCardFieldNumber = 3,
    kSexFieldNumber = 4,
    kAreaFieldNumber = 6,
    kLevelFieldNumber = 7,
    kRoleFieldNumber = 8,
    kTitleFieldNumber = 9,
    kUserIdFieldNumber = 1,
    kAgeFieldNumber = 5,
  };
  // string nickname = 2;
  void clear_nickname();
  const std::string& nickname() const;
  void set_nickname(const std::string& value);
  void set_nickname(std::string&& value);
  void set_nickname(const char* value);
  void set_nickname(const char* value, size_t size);
  std::string* mutable_nickname();
  std::string* release_nickname();
  void set_allocated_nickname(std::string* nickname);
  private:
  const std::string& _internal_nickname() const;
  void _internal_set_nickname(const std::string& value);
  std::string* _internal_mutable_nickname();
  public:

  // string card = 3;
  void clear_card();
  const std::string& card() const;
  void set_card(const std::string& value);
  void set_card(std::string&& value);
  void set_card(const char* value);
  void set_card(const char* value, size_t size);
  std::string* mutable_card();
  std::string* release_card();
  void set_allocated_card(std::string* card);
  private:
  const std::string& _internal_card() const;
  void _internal_set_card(const std::string& value);
  std::string* _internal_mutable_card();
  public:

  // string sex = 4;
  void clear_sex();
  const std::string& sex() const;
  void set_sex(const std::string& value);
  void set_sex(std::string&& value);
  void set_sex(const char* value);
  void set_sex(const char* value, size_t size);
  std::string* mutable_sex();
  std::string* release_sex();
  void set_allocated_sex(std::string* sex);
  private:
  const std::string& _internal_sex() const;
  void _internal_set_sex(const std::string& value);
  std::string* _internal_mutable_sex();
  public:

  // string area = 6;
  void clear_area();
  const std::string& area() const;
  void set_area(const std::string& value);
  void set_area(std::string&& value);
  void set_area(const char* value);
  void set_area(const char* value, size_t size);
  std::string* mutable_area();
  std::string* release_area();
  void set_allocated_area(std::string* area);
  private:
  const std::string& _internal_area() const;
  void _internal_set_area(const std::string& value);
  std::string* _internal_mutable_area();
  public:

  // string level = 7;
  void clear_level();
  const std::string& level() const;
  void set_level(const std::string& value);
  void set_level(std::string&& value);
  void set_level(const char* value);
  void set_level(const char* value, size_t size);
  std::string* mutable_level();
  std::string* release_level();
  void set_allocated_level(std::string* level);
  private:
  const std::string& _internal_level() const;
  void _internal_set_level(const std::string& value);
  std::string* _internal_mutable_level();
  public:

  // string role = 8;
  void clear_role();
  const std::string& role() const;
  void set_role(const std::string& value);
  void set_role(std::string&& value);
  void set_role(const char* value);
  void set_role(const char* value, size_t size);
  std::string* mutable_role();
  std::string* release_role();
  void set_allocated_role(std::string* role);
  private:
  const std::string& _internal_role() const;
  void _internal_set_role(const std::string& value);
  std::string* _internal_mutable_role();
  public:

  // string title = 9;
  void clear_title();
  const std::string& title() const;
  void set_title(const std::string& value);
  void set_title(std::string&& value);
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  std::string* mutable_title();
  std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // int64 user_id = 1;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::int64 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 age = 5;
  void clear_age();
  ::PROTOBUF_NAMESPACE_ID::int32 age() const;
  void set_age(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_age() const;
  void _internal_set_age(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:onebot.GetMsgResp.Sender)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nickname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr card_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sex_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr area_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr level_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr role_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::PROTOBUF_NAMESPACE_ID::int64 user_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 age_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class GetMsgResp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onebot.GetMsgResp) */ {
 public:
  inline GetMsgResp() : GetMsgResp(nullptr) {};
  virtual ~GetMsgResp();

  GetMsgResp(const GetMsgResp& from);
  GetMsgResp(GetMsgResp&& from) noexcept
    : GetMsgResp() {
    *this = ::std::move(from);
  }

  inline GetMsgResp& operator=(const GetMsgResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetMsgResp& operator=(GetMsgResp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetMsgResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetMsgResp* internal_default_instance() {
    return reinterpret_cast<const GetMsgResp*>(
               &_GetMsgResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(GetMsgResp& a, GetMsgResp& b) {
    a.Swap(&b);
  }
  inline void Swap(GetMsgResp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetMsgResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetMsgResp* New() const final {
    return CreateMaybeMessage<GetMsgResp>(nullptr);
  }

  GetMsgResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetMsgResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetMsgResp& from);
  void MergeFrom(const GetMsgResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetMsgResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onebot.GetMsgResp";
  }
  protected:
  explicit GetMsgResp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef GetMsgResp_Sender Sender;

  // accessors -------------------------------------------------------

  enum : int {
    kMessageTypeFieldNumber = 2,
    kSenderFieldNumber = 5,
    kMessageFieldNumber = 6,
    kTimeFieldNumber = 1,
    kMessageIdFieldNumber = 3,
    kRealIdFieldNumber = 4,
  };
  // string message_type = 2;
  void clear_message_type();
  const std::string& message_type() const;
  void set_message_type(const std::string& value);
  void set_message_type(std::string&& value);
  void set_message_type(const char* value);
  void set_message_type(const char* value, size_t size);
  std::string* mutable_message_type();
  std::string* release_message_type();
  void set_allocated_message_type(std::string* message_type);
  private:
  const std::string& _internal_message_type() const;
  void _internal_set_message_type(const std::string& value);
  std::string* _internal_mutable_message_type();
  public:

  // .onebot.GetMsgResp.Sender sender = 5;
  bool has_sender() const;
  private:
  bool _internal_has_sender() const;
  public:
  void clear_sender();
  const ::onebot::GetMsgResp_Sender& sender() const;
  ::onebot::GetMsgResp_Sender* release_sender();
  ::onebot::GetMsgResp_Sender* mutable_sender();
  void set_allocated_sender(::onebot::GetMsgResp_Sender* sender);
  private:
  const ::onebot::GetMsgResp_Sender& _internal_sender() const;
  ::onebot::GetMsgResp_Sender* _internal_mutable_sender();
  public:
  void unsafe_arena_set_allocated_sender(
      ::onebot::GetMsgResp_Sender* sender);
  ::onebot::GetMsgResp_Sender* unsafe_arena_release_sender();

  // .onebot.Message message = 6;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const ::onebot::Message& message() const;
  ::onebot::Message* release_message();
  ::onebot::Message* mutable_message();
  void set_allocated_message(::onebot::Message* message);
  private:
  const ::onebot::Message& _internal_message() const;
  ::onebot::Message* _internal_mutable_message();
  public:
  void unsafe_arena_set_allocated_message(
      ::onebot::Message* message);
  ::onebot::Message* unsafe_arena_release_message();

  // int32 time = 1;
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::int32 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 message_id = 3;
  void clear_message_id();
  ::PROTOBUF_NAMESPACE_ID::int32 message_id() const;
  void set_message_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_message_id() const;
  void _internal_set_message_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 real_id = 4;
  void clear_real_id();
  ::PROTOBUF_NAMESPACE_ID::int32 real_id() const;
  void set_real_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_real_id() const;
  void _internal_set_real_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:onebot.GetMsgResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_type_;
  ::onebot::GetMsgResp_Sender* sender_;
  ::onebot::Message* message_;
  ::PROTOBUF_NAMESPACE_ID::int32 time_;
  ::PROTOBUF_NAMESPACE_ID::int32 message_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 real_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class GetForwardMsgReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onebot.GetForwardMsgReq) */ {
 public:
  inline GetForwardMsgReq() : GetForwardMsgReq(nullptr) {};
  virtual ~GetForwardMsgReq();

  GetForwardMsgReq(const GetForwardMsgReq& from);
  GetForwardMsgReq(GetForwardMsgReq&& from) noexcept
    : GetForwardMsgReq() {
    *this = ::std::move(from);
  }

  inline GetForwardMsgReq& operator=(const GetForwardMsgReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetForwardMsgReq& operator=(GetForwardMsgReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetForwardMsgReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetForwardMsgReq* internal_default_instance() {
    return reinterpret_cast<const GetForwardMsgReq*>(
               &_GetForwardMsgReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(GetForwardMsgReq& a, GetForwardMsgReq& b) {
    a.Swap(&b);
  }
  inline void Swap(GetForwardMsgReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetForwardMsgReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetForwardMsgReq* New() const final {
    return CreateMaybeMessage<GetForwardMsgReq>(nullptr);
  }

  GetForwardMsgReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetForwardMsgReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetForwardMsgReq& from);
  void MergeFrom(const GetForwardMsgReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetForwardMsgReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onebot.GetForwardMsgReq";
  }
  protected:
  explicit GetForwardMsgReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:onebot.GetForwardMsgReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class GetForwardMsgResp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onebot.GetForwardMsgResp) */ {
 public:
  inline GetForwardMsgResp() : GetForwardMsgResp(nullptr) {};
  virtual ~GetForwardMsgResp();

  GetForwardMsgResp(const GetForwardMsgResp& from);
  GetForwardMsgResp(GetForwardMsgResp&& from) noexcept
    : GetForwardMsgResp() {
    *this = ::std::move(from);
  }

  inline GetForwardMsgResp& operator=(const GetForwardMsgResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetForwardMsgResp& operator=(GetForwardMsgResp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetForwardMsgResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetForwardMsgResp* internal_default_instance() {
    return reinterpret_cast<const GetForwardMsgResp*>(
               &_GetForwardMsgResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(GetForwardMsgResp& a, GetForwardMsgResp& b) {
    a.Swap(&b);
  }
  inline void Swap(GetForwardMsgResp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetForwardMsgResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetForwardMsgResp* New() const final {
    return CreateMaybeMessage<GetForwardMsgResp>(nullptr);
  }

  GetForwardMsgResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetForwardMsgResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetForwardMsgResp& from);
  void MergeFrom(const GetForwardMsgResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetForwardMsgResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onebot.GetForwardMsgResp";
  }
  protected:
  explicit GetForwardMsgResp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:onebot.GetForwardMsgResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class SendLikeReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onebot.SendLikeReq) */ {
 public:
  inline SendLikeReq() : SendLikeReq(nullptr) {};
  virtual ~SendLikeReq();

  SendLikeReq(const SendLikeReq& from);
  SendLikeReq(SendLikeReq&& from) noexcept
    : SendLikeReq() {
    *this = ::std::move(from);
  }

  inline SendLikeReq& operator=(const SendLikeReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendLikeReq& operator=(SendLikeReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SendLikeReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SendLikeReq* internal_default_instance() {
    return reinterpret_cast<const SendLikeReq*>(
               &_SendLikeReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(SendLikeReq& a, SendLikeReq& b) {
    a.Swap(&b);
  }
  inline void Swap(SendLikeReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendLikeReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SendLikeReq* New() const final {
    return CreateMaybeMessage<SendLikeReq>(nullptr);
  }

  SendLikeReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SendLikeReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SendLikeReq& from);
  void MergeFrom(const SendLikeReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendLikeReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onebot.SendLikeReq";
  }
  protected:
  explicit SendLikeReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kTimesFieldNumber = 2,
  };
  // int64 user_id = 1;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::int64 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 times = 2;
  void clear_times();
  ::PROTOBUF_NAMESPACE_ID::int32 times() const;
  void set_times(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_times() const;
  void _internal_set_times(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:onebot.SendLikeReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 user_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 times_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class SendListResp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onebot.SendListResp) */ {
 public:
  inline SendListResp() : SendListResp(nullptr) {};
  virtual ~SendListResp();

  SendListResp(const SendListResp& from);
  SendListResp(SendListResp&& from) noexcept
    : SendListResp() {
    *this = ::std::move(from);
  }

  inline SendListResp& operator=(const SendListResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendListResp& operator=(SendListResp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SendListResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SendListResp* internal_default_instance() {
    return reinterpret_cast<const SendListResp*>(
               &_SendListResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(SendListResp& a, SendListResp& b) {
    a.Swap(&b);
  }
  inline void Swap(SendListResp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendListResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SendListResp* New() const final {
    return CreateMaybeMessage<SendListResp>(nullptr);
  }

  SendListResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SendListResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SendListResp& from);
  void MergeFrom(const SendListResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendListResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onebot.SendListResp";
  }
  protected:
  explicit SendListResp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:onebot.SendListResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class SetGroupKickReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onebot.SetGroupKickReq) */ {
 public:
  inline SetGroupKickReq() : SetGroupKickReq(nullptr) {};
  virtual ~SetGroupKickReq();

  SetGroupKickReq(const SetGroupKickReq& from);
  SetGroupKickReq(SetGroupKickReq&& from) noexcept
    : SetGroupKickReq() {
    *this = ::std::move(from);
  }

  inline SetGroupKickReq& operator=(const SetGroupKickReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetGroupKickReq& operator=(SetGroupKickReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetGroupKickReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetGroupKickReq* internal_default_instance() {
    return reinterpret_cast<const SetGroupKickReq*>(
               &_SetGroupKickReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(SetGroupKickReq& a, SetGroupKickReq& b) {
    a.Swap(&b);
  }
  inline void Swap(SetGroupKickReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetGroupKickReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetGroupKickReq* New() const final {
    return CreateMaybeMessage<SetGroupKickReq>(nullptr);
  }

  SetGroupKickReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetGroupKickReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetGroupKickReq& from);
  void MergeFrom(const SetGroupKickReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetGroupKickReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onebot.SetGroupKickReq";
  }
  protected:
  explicit SetGroupKickReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupIdFieldNumber = 1,
    kUserIdFieldNumber = 2,
    kRejectAddRequestFieldNumber = 3,
  };
  // int64 group_id = 1;
  void clear_group_id();
  ::PROTOBUF_NAMESPACE_ID::int64 group_id() const;
  void set_group_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_group_id() const;
  void _internal_set_group_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 user_id = 2;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::int64 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool reject_add_request = 3;
  void clear_reject_add_request();
  bool reject_add_request() const;
  void set_reject_add_request(bool value);
  private:
  bool _internal_reject_add_request() const;
  void _internal_set_reject_add_request(bool value);
  public:

  // @@protoc_insertion_point(class_scope:onebot.SetGroupKickReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 group_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 user_id_;
  bool reject_add_request_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class SetGroupKickResp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onebot.SetGroupKickResp) */ {
 public:
  inline SetGroupKickResp() : SetGroupKickResp(nullptr) {};
  virtual ~SetGroupKickResp();

  SetGroupKickResp(const SetGroupKickResp& from);
  SetGroupKickResp(SetGroupKickResp&& from) noexcept
    : SetGroupKickResp() {
    *this = ::std::move(from);
  }

  inline SetGroupKickResp& operator=(const SetGroupKickResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetGroupKickResp& operator=(SetGroupKickResp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetGroupKickResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetGroupKickResp* internal_default_instance() {
    return reinterpret_cast<const SetGroupKickResp*>(
               &_SetGroupKickResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(SetGroupKickResp& a, SetGroupKickResp& b) {
    a.Swap(&b);
  }
  inline void Swap(SetGroupKickResp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetGroupKickResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetGroupKickResp* New() const final {
    return CreateMaybeMessage<SetGroupKickResp>(nullptr);
  }

  SetGroupKickResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetGroupKickResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetGroupKickResp& from);
  void MergeFrom(const SetGroupKickResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetGroupKickResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onebot.SetGroupKickResp";
  }
  protected:
  explicit SetGroupKickResp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:onebot.SetGroupKickResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class SetGroupBanReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onebot.SetGroupBanReq) */ {
 public:
  inline SetGroupBanReq() : SetGroupBanReq(nullptr) {};
  virtual ~SetGroupBanReq();

  SetGroupBanReq(const SetGroupBanReq& from);
  SetGroupBanReq(SetGroupBanReq&& from) noexcept
    : SetGroupBanReq() {
    *this = ::std::move(from);
  }

  inline SetGroupBanReq& operator=(const SetGroupBanReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetGroupBanReq& operator=(SetGroupBanReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetGroupBanReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetGroupBanReq* internal_default_instance() {
    return reinterpret_cast<const SetGroupBanReq*>(
               &_SetGroupBanReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(SetGroupBanReq& a, SetGroupBanReq& b) {
    a.Swap(&b);
  }
  inline void Swap(SetGroupBanReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetGroupBanReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetGroupBanReq* New() const final {
    return CreateMaybeMessage<SetGroupBanReq>(nullptr);
  }

  SetGroupBanReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetGroupBanReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetGroupBanReq& from);
  void MergeFrom(const SetGroupBanReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetGroupBanReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onebot.SetGroupBanReq";
  }
  protected:
  explicit SetGroupBanReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupIdFieldNumber = 1,
    kUserIdFieldNumber = 2,
    kDurationFieldNumber = 3,
  };
  // int64 group_id = 1;
  void clear_group_id();
  ::PROTOBUF_NAMESPACE_ID::int64 group_id() const;
  void set_group_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_group_id() const;
  void _internal_set_group_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 user_id = 2;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::int64 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 duration = 3;
  void clear_duration();
  ::PROTOBUF_NAMESPACE_ID::int64 duration() const;
  void set_duration(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_duration() const;
  void _internal_set_duration(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:onebot.SetGroupBanReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 group_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 user_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 duration_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class SetGroupBanResp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onebot.SetGroupBanResp) */ {
 public:
  inline SetGroupBanResp() : SetGroupBanResp(nullptr) {};
  virtual ~SetGroupBanResp();

  SetGroupBanResp(const SetGroupBanResp& from);
  SetGroupBanResp(SetGroupBanResp&& from) noexcept
    : SetGroupBanResp() {
    *this = ::std::move(from);
  }

  inline SetGroupBanResp& operator=(const SetGroupBanResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetGroupBanResp& operator=(SetGroupBanResp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetGroupBanResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetGroupBanResp* internal_default_instance() {
    return reinterpret_cast<const SetGroupBanResp*>(
               &_SetGroupBanResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(SetGroupBanResp& a, SetGroupBanResp& b) {
    a.Swap(&b);
  }
  inline void Swap(SetGroupBanResp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetGroupBanResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetGroupBanResp* New() const final {
    return CreateMaybeMessage<SetGroupBanResp>(nullptr);
  }

  SetGroupBanResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetGroupBanResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetGroupBanResp& from);
  void MergeFrom(const SetGroupBanResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetGroupBanResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onebot.SetGroupBanResp";
  }
  protected:
  explicit SetGroupBanResp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:onebot.SetGroupBanResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class SetGroupAnonymousBanReq_Anonymous PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onebot.SetGroupAnonymousBanReq.Anonymous) */ {
 public:
  inline SetGroupAnonymousBanReq_Anonymous() : SetGroupAnonymousBanReq_Anonymous(nullptr) {};
  virtual ~SetGroupAnonymousBanReq_Anonymous();

  SetGroupAnonymousBanReq_Anonymous(const SetGroupAnonymousBanReq_Anonymous& from);
  SetGroupAnonymousBanReq_Anonymous(SetGroupAnonymousBanReq_Anonymous&& from) noexcept
    : SetGroupAnonymousBanReq_Anonymous() {
    *this = ::std::move(from);
  }

  inline SetGroupAnonymousBanReq_Anonymous& operator=(const SetGroupAnonymousBanReq_Anonymous& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetGroupAnonymousBanReq_Anonymous& operator=(SetGroupAnonymousBanReq_Anonymous&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetGroupAnonymousBanReq_Anonymous& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetGroupAnonymousBanReq_Anonymous* internal_default_instance() {
    return reinterpret_cast<const SetGroupAnonymousBanReq_Anonymous*>(
               &_SetGroupAnonymousBanReq_Anonymous_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(SetGroupAnonymousBanReq_Anonymous& a, SetGroupAnonymousBanReq_Anonymous& b) {
    a.Swap(&b);
  }
  inline void Swap(SetGroupAnonymousBanReq_Anonymous* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetGroupAnonymousBanReq_Anonymous* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetGroupAnonymousBanReq_Anonymous* New() const final {
    return CreateMaybeMessage<SetGroupAnonymousBanReq_Anonymous>(nullptr);
  }

  SetGroupAnonymousBanReq_Anonymous* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetGroupAnonymousBanReq_Anonymous>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetGroupAnonymousBanReq_Anonymous& from);
  void MergeFrom(const SetGroupAnonymousBanReq_Anonymous& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetGroupAnonymousBanReq_Anonymous* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onebot.SetGroupAnonymousBanReq.Anonymous";
  }
  protected:
  explicit SetGroupAnonymousBanReq_Anonymous(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kFlagFieldNumber = 3,
    kIdFieldNumber = 1,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string flag = 3;
  void clear_flag();
  const std::string& flag() const;
  void set_flag(const std::string& value);
  void set_flag(std::string&& value);
  void set_flag(const char* value);
  void set_flag(const char* value, size_t size);
  std::string* mutable_flag();
  std::string* release_flag();
  void set_allocated_flag(std::string* flag);
  private:
  const std::string& _internal_flag() const;
  void _internal_set_flag(const std::string& value);
  std::string* _internal_mutable_flag();
  public:

  // int64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:onebot.SetGroupAnonymousBanReq.Anonymous)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr flag_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class SetGroupAnonymousBanReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onebot.SetGroupAnonymousBanReq) */ {
 public:
  inline SetGroupAnonymousBanReq() : SetGroupAnonymousBanReq(nullptr) {};
  virtual ~SetGroupAnonymousBanReq();

  SetGroupAnonymousBanReq(const SetGroupAnonymousBanReq& from);
  SetGroupAnonymousBanReq(SetGroupAnonymousBanReq&& from) noexcept
    : SetGroupAnonymousBanReq() {
    *this = ::std::move(from);
  }

  inline SetGroupAnonymousBanReq& operator=(const SetGroupAnonymousBanReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetGroupAnonymousBanReq& operator=(SetGroupAnonymousBanReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetGroupAnonymousBanReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetGroupAnonymousBanReq* internal_default_instance() {
    return reinterpret_cast<const SetGroupAnonymousBanReq*>(
               &_SetGroupAnonymousBanReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(SetGroupAnonymousBanReq& a, SetGroupAnonymousBanReq& b) {
    a.Swap(&b);
  }
  inline void Swap(SetGroupAnonymousBanReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetGroupAnonymousBanReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetGroupAnonymousBanReq* New() const final {
    return CreateMaybeMessage<SetGroupAnonymousBanReq>(nullptr);
  }

  SetGroupAnonymousBanReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetGroupAnonymousBanReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetGroupAnonymousBanReq& from);
  void MergeFrom(const SetGroupAnonymousBanReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetGroupAnonymousBanReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onebot.SetGroupAnonymousBanReq";
  }
  protected:
  explicit SetGroupAnonymousBanReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef SetGroupAnonymousBanReq_Anonymous Anonymous;

  // accessors -------------------------------------------------------

  enum : int {
    kAnonymousFlagFieldNumber = 3,
    kFlagFieldNumber = 4,
    kAnonymousFieldNumber = 2,
    kGroupIdFieldNumber = 1,
    kDurationFieldNumber = 5,
  };
  // string anonymous_flag = 3;
  void clear_anonymous_flag();
  const std::string& anonymous_flag() const;
  void set_anonymous_flag(const std::string& value);
  void set_anonymous_flag(std::string&& value);
  void set_anonymous_flag(const char* value);
  void set_anonymous_flag(const char* value, size_t size);
  std::string* mutable_anonymous_flag();
  std::string* release_anonymous_flag();
  void set_allocated_anonymous_flag(std::string* anonymous_flag);
  private:
  const std::string& _internal_anonymous_flag() const;
  void _internal_set_anonymous_flag(const std::string& value);
  std::string* _internal_mutable_anonymous_flag();
  public:

  // string flag = 4;
  void clear_flag();
  const std::string& flag() const;
  void set_flag(const std::string& value);
  void set_flag(std::string&& value);
  void set_flag(const char* value);
  void set_flag(const char* value, size_t size);
  std::string* mutable_flag();
  std::string* release_flag();
  void set_allocated_flag(std::string* flag);
  private:
  const std::string& _internal_flag() const;
  void _internal_set_flag(const std::string& value);
  std::string* _internal_mutable_flag();
  public:

  // .onebot.SetGroupAnonymousBanReq.Anonymous anonymous = 2;
  bool has_anonymous() const;
  private:
  bool _internal_has_anonymous() const;
  public:
  void clear_anonymous();
  const ::onebot::SetGroupAnonymousBanReq_Anonymous& anonymous() const;
  ::onebot::SetGroupAnonymousBanReq_Anonymous* release_anonymous();
  ::onebot::SetGroupAnonymousBanReq_Anonymous* mutable_anonymous();
  void set_allocated_anonymous(::onebot::SetGroupAnonymousBanReq_Anonymous* anonymous);
  private:
  const ::onebot::SetGroupAnonymousBanReq_Anonymous& _internal_anonymous() const;
  ::onebot::SetGroupAnonymousBanReq_Anonymous* _internal_mutable_anonymous();
  public:
  void unsafe_arena_set_allocated_anonymous(
      ::onebot::SetGroupAnonymousBanReq_Anonymous* anonymous);
  ::onebot::SetGroupAnonymousBanReq_Anonymous* unsafe_arena_release_anonymous();

  // int64 group_id = 1;
  void clear_group_id();
  ::PROTOBUF_NAMESPACE_ID::int64 group_id() const;
  void set_group_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_group_id() const;
  void _internal_set_group_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 duration = 5;
  void clear_duration();
  ::PROTOBUF_NAMESPACE_ID::int64 duration() const;
  void set_duration(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_duration() const;
  void _internal_set_duration(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:onebot.SetGroupAnonymousBanReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr anonymous_flag_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr flag_;
  ::onebot::SetGroupAnonymousBanReq_Anonymous* anonymous_;
  ::PROTOBUF_NAMESPACE_ID::int64 group_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 duration_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class SetGroupAnonymousBanResp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onebot.SetGroupAnonymousBanResp) */ {
 public:
  inline SetGroupAnonymousBanResp() : SetGroupAnonymousBanResp(nullptr) {};
  virtual ~SetGroupAnonymousBanResp();

  SetGroupAnonymousBanResp(const SetGroupAnonymousBanResp& from);
  SetGroupAnonymousBanResp(SetGroupAnonymousBanResp&& from) noexcept
    : SetGroupAnonymousBanResp() {
    *this = ::std::move(from);
  }

  inline SetGroupAnonymousBanResp& operator=(const SetGroupAnonymousBanResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetGroupAnonymousBanResp& operator=(SetGroupAnonymousBanResp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetGroupAnonymousBanResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetGroupAnonymousBanResp* internal_default_instance() {
    return reinterpret_cast<const SetGroupAnonymousBanResp*>(
               &_SetGroupAnonymousBanResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(SetGroupAnonymousBanResp& a, SetGroupAnonymousBanResp& b) {
    a.Swap(&b);
  }
  inline void Swap(SetGroupAnonymousBanResp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetGroupAnonymousBanResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetGroupAnonymousBanResp* New() const final {
    return CreateMaybeMessage<SetGroupAnonymousBanResp>(nullptr);
  }

  SetGroupAnonymousBanResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetGroupAnonymousBanResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetGroupAnonymousBanResp& from);
  void MergeFrom(const SetGroupAnonymousBanResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetGroupAnonymousBanResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onebot.SetGroupAnonymousBanResp";
  }
  protected:
  explicit SetGroupAnonymousBanResp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:onebot.SetGroupAnonymousBanResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class SetGroupWholeBanReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onebot.SetGroupWholeBanReq) */ {
 public:
  inline SetGroupWholeBanReq() : SetGroupWholeBanReq(nullptr) {};
  virtual ~SetGroupWholeBanReq();

  SetGroupWholeBanReq(const SetGroupWholeBanReq& from);
  SetGroupWholeBanReq(SetGroupWholeBanReq&& from) noexcept
    : SetGroupWholeBanReq() {
    *this = ::std::move(from);
  }

  inline SetGroupWholeBanReq& operator=(const SetGroupWholeBanReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetGroupWholeBanReq& operator=(SetGroupWholeBanReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetGroupWholeBanReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetGroupWholeBanReq* internal_default_instance() {
    return reinterpret_cast<const SetGroupWholeBanReq*>(
               &_SetGroupWholeBanReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(SetGroupWholeBanReq& a, SetGroupWholeBanReq& b) {
    a.Swap(&b);
  }
  inline void Swap(SetGroupWholeBanReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetGroupWholeBanReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetGroupWholeBanReq* New() const final {
    return CreateMaybeMessage<SetGroupWholeBanReq>(nullptr);
  }

  SetGroupWholeBanReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetGroupWholeBanReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetGroupWholeBanReq& from);
  void MergeFrom(const SetGroupWholeBanReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetGroupWholeBanReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onebot.SetGroupWholeBanReq";
  }
  protected:
  explicit SetGroupWholeBanReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupIdFieldNumber = 1,
    kEnableFieldNumber = 2,
  };
  // int64 group_id = 1;
  void clear_group_id();
  ::PROTOBUF_NAMESPACE_ID::int64 group_id() const;
  void set_group_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_group_id() const;
  void _internal_set_group_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool enable = 2;
  void clear_enable();
  bool enable() const;
  void set_enable(bool value);
  private:
  bool _internal_enable() const;
  void _internal_set_enable(bool value);
  public:

  // @@protoc_insertion_point(class_scope:onebot.SetGroupWholeBanReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 group_id_;
  bool enable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class SetGroupWholeBanResp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onebot.SetGroupWholeBanResp) */ {
 public:
  inline SetGroupWholeBanResp() : SetGroupWholeBanResp(nullptr) {};
  virtual ~SetGroupWholeBanResp();

  SetGroupWholeBanResp(const SetGroupWholeBanResp& from);
  SetGroupWholeBanResp(SetGroupWholeBanResp&& from) noexcept
    : SetGroupWholeBanResp() {
    *this = ::std::move(from);
  }

  inline SetGroupWholeBanResp& operator=(const SetGroupWholeBanResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetGroupWholeBanResp& operator=(SetGroupWholeBanResp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetGroupWholeBanResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetGroupWholeBanResp* internal_default_instance() {
    return reinterpret_cast<const SetGroupWholeBanResp*>(
               &_SetGroupWholeBanResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(SetGroupWholeBanResp& a, SetGroupWholeBanResp& b) {
    a.Swap(&b);
  }
  inline void Swap(SetGroupWholeBanResp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetGroupWholeBanResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetGroupWholeBanResp* New() const final {
    return CreateMaybeMessage<SetGroupWholeBanResp>(nullptr);
  }

  SetGroupWholeBanResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetGroupWholeBanResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetGroupWholeBanResp& from);
  void MergeFrom(const SetGroupWholeBanResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetGroupWholeBanResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onebot.SetGroupWholeBanResp";
  }
  protected:
  explicit SetGroupWholeBanResp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:onebot.SetGroupWholeBanResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class SetGroupAdminReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onebot.SetGroupAdminReq) */ {
 public:
  inline SetGroupAdminReq() : SetGroupAdminReq(nullptr) {};
  virtual ~SetGroupAdminReq();

  SetGroupAdminReq(const SetGroupAdminReq& from);
  SetGroupAdminReq(SetGroupAdminReq&& from) noexcept
    : SetGroupAdminReq() {
    *this = ::std::move(from);
  }

  inline SetGroupAdminReq& operator=(const SetGroupAdminReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetGroupAdminReq& operator=(SetGroupAdminReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetGroupAdminReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetGroupAdminReq* internal_default_instance() {
    return reinterpret_cast<const SetGroupAdminReq*>(
               &_SetGroupAdminReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(SetGroupAdminReq& a, SetGroupAdminReq& b) {
    a.Swap(&b);
  }
  inline void Swap(SetGroupAdminReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetGroupAdminReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetGroupAdminReq* New() const final {
    return CreateMaybeMessage<SetGroupAdminReq>(nullptr);
  }

  SetGroupAdminReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetGroupAdminReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetGroupAdminReq& from);
  void MergeFrom(const SetGroupAdminReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetGroupAdminReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onebot.SetGroupAdminReq";
  }
  protected:
  explicit SetGroupAdminReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupIdFieldNumber = 1,
    kUserIdFieldNumber = 2,
    kEnableFieldNumber = 3,
  };
  // int64 group_id = 1;
  void clear_group_id();
  ::PROTOBUF_NAMESPACE_ID::int64 group_id() const;
  void set_group_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_group_id() const;
  void _internal_set_group_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 user_id = 2;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::int64 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool enable = 3;
  void clear_enable();
  bool enable() const;
  void set_enable(bool value);
  private:
  bool _internal_enable() const;
  void _internal_set_enable(bool value);
  public:

  // @@protoc_insertion_point(class_scope:onebot.SetGroupAdminReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 group_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 user_id_;
  bool enable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class SetGroupAdminResp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onebot.SetGroupAdminResp) */ {
 public:
  inline SetGroupAdminResp() : SetGroupAdminResp(nullptr) {};
  virtual ~SetGroupAdminResp();

  SetGroupAdminResp(const SetGroupAdminResp& from);
  SetGroupAdminResp(SetGroupAdminResp&& from) noexcept
    : SetGroupAdminResp() {
    *this = ::std::move(from);
  }

  inline SetGroupAdminResp& operator=(const SetGroupAdminResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetGroupAdminResp& operator=(SetGroupAdminResp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetGroupAdminResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetGroupAdminResp* internal_default_instance() {
    return reinterpret_cast<const SetGroupAdminResp*>(
               &_SetGroupAdminResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(SetGroupAdminResp& a, SetGroupAdminResp& b) {
    a.Swap(&b);
  }
  inline void Swap(SetGroupAdminResp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetGroupAdminResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetGroupAdminResp* New() const final {
    return CreateMaybeMessage<SetGroupAdminResp>(nullptr);
  }

  SetGroupAdminResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetGroupAdminResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetGroupAdminResp& from);
  void MergeFrom(const SetGroupAdminResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetGroupAdminResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onebot.SetGroupAdminResp";
  }
  protected:
  explicit SetGroupAdminResp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:onebot.SetGroupAdminResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class SetGroupAnonymousReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onebot.SetGroupAnonymousReq) */ {
 public:
  inline SetGroupAnonymousReq() : SetGroupAnonymousReq(nullptr) {};
  virtual ~SetGroupAnonymousReq();

  SetGroupAnonymousReq(const SetGroupAnonymousReq& from);
  SetGroupAnonymousReq(SetGroupAnonymousReq&& from) noexcept
    : SetGroupAnonymousReq() {
    *this = ::std::move(from);
  }

  inline SetGroupAnonymousReq& operator=(const SetGroupAnonymousReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetGroupAnonymousReq& operator=(SetGroupAnonymousReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetGroupAnonymousReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetGroupAnonymousReq* internal_default_instance() {
    return reinterpret_cast<const SetGroupAnonymousReq*>(
               &_SetGroupAnonymousReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(SetGroupAnonymousReq& a, SetGroupAnonymousReq& b) {
    a.Swap(&b);
  }
  inline void Swap(SetGroupAnonymousReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetGroupAnonymousReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetGroupAnonymousReq* New() const final {
    return CreateMaybeMessage<SetGroupAnonymousReq>(nullptr);
  }

  SetGroupAnonymousReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetGroupAnonymousReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetGroupAnonymousReq& from);
  void MergeFrom(const SetGroupAnonymousReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetGroupAnonymousReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onebot.SetGroupAnonymousReq";
  }
  protected:
  explicit SetGroupAnonymousReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupIdFieldNumber = 1,
    kEnableFieldNumber = 2,
  };
  // int64 group_id = 1;
  void clear_group_id();
  ::PROTOBUF_NAMESPACE_ID::int64 group_id() const;
  void set_group_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_group_id() const;
  void _internal_set_group_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool enable = 2;
  void clear_enable();
  bool enable() const;
  void set_enable(bool value);
  private:
  bool _internal_enable() const;
  void _internal_set_enable(bool value);
  public:

  // @@protoc_insertion_point(class_scope:onebot.SetGroupAnonymousReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 group_id_;
  bool enable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class SetGroupAnonymousResp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onebot.SetGroupAnonymousResp) */ {
 public:
  inline SetGroupAnonymousResp() : SetGroupAnonymousResp(nullptr) {};
  virtual ~SetGroupAnonymousResp();

  SetGroupAnonymousResp(const SetGroupAnonymousResp& from);
  SetGroupAnonymousResp(SetGroupAnonymousResp&& from) noexcept
    : SetGroupAnonymousResp() {
    *this = ::std::move(from);
  }

  inline SetGroupAnonymousResp& operator=(const SetGroupAnonymousResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetGroupAnonymousResp& operator=(SetGroupAnonymousResp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetGroupAnonymousResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetGroupAnonymousResp* internal_default_instance() {
    return reinterpret_cast<const SetGroupAnonymousResp*>(
               &_SetGroupAnonymousResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(SetGroupAnonymousResp& a, SetGroupAnonymousResp& b) {
    a.Swap(&b);
  }
  inline void Swap(SetGroupAnonymousResp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetGroupAnonymousResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetGroupAnonymousResp* New() const final {
    return CreateMaybeMessage<SetGroupAnonymousResp>(nullptr);
  }

  SetGroupAnonymousResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetGroupAnonymousResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetGroupAnonymousResp& from);
  void MergeFrom(const SetGroupAnonymousResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetGroupAnonymousResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onebot.SetGroupAnonymousResp";
  }
  protected:
  explicit SetGroupAnonymousResp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:onebot.SetGroupAnonymousResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class SetGroupNameReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onebot.SetGroupNameReq) */ {
 public:
  inline SetGroupNameReq() : SetGroupNameReq(nullptr) {};
  virtual ~SetGroupNameReq();

  SetGroupNameReq(const SetGroupNameReq& from);
  SetGroupNameReq(SetGroupNameReq&& from) noexcept
    : SetGroupNameReq() {
    *this = ::std::move(from);
  }

  inline SetGroupNameReq& operator=(const SetGroupNameReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetGroupNameReq& operator=(SetGroupNameReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetGroupNameReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetGroupNameReq* internal_default_instance() {
    return reinterpret_cast<const SetGroupNameReq*>(
               &_SetGroupNameReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(SetGroupNameReq& a, SetGroupNameReq& b) {
    a.Swap(&b);
  }
  inline void Swap(SetGroupNameReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetGroupNameReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetGroupNameReq* New() const final {
    return CreateMaybeMessage<SetGroupNameReq>(nullptr);
  }

  SetGroupNameReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetGroupNameReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetGroupNameReq& from);
  void MergeFrom(const SetGroupNameReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetGroupNameReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onebot.SetGroupNameReq";
  }
  protected:
  explicit SetGroupNameReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupNameFieldNumber = 2,
    kGroupIdFieldNumber = 1,
  };
  // string group_name = 2;
  void clear_group_name();
  const std::string& group_name() const;
  void set_group_name(const std::string& value);
  void set_group_name(std::string&& value);
  void set_group_name(const char* value);
  void set_group_name(const char* value, size_t size);
  std::string* mutable_group_name();
  std::string* release_group_name();
  void set_allocated_group_name(std::string* group_name);
  private:
  const std::string& _internal_group_name() const;
  void _internal_set_group_name(const std::string& value);
  std::string* _internal_mutable_group_name();
  public:

  // int64 group_id = 1;
  void clear_group_id();
  ::PROTOBUF_NAMESPACE_ID::int64 group_id() const;
  void set_group_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_group_id() const;
  void _internal_set_group_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:onebot.SetGroupNameReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr group_name_;
  ::PROTOBUF_NAMESPACE_ID::int64 group_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class SetGroupNameResp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onebot.SetGroupNameResp) */ {
 public:
  inline SetGroupNameResp() : SetGroupNameResp(nullptr) {};
  virtual ~SetGroupNameResp();

  SetGroupNameResp(const SetGroupNameResp& from);
  SetGroupNameResp(SetGroupNameResp&& from) noexcept
    : SetGroupNameResp() {
    *this = ::std::move(from);
  }

  inline SetGroupNameResp& operator=(const SetGroupNameResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetGroupNameResp& operator=(SetGroupNameResp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetGroupNameResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetGroupNameResp* internal_default_instance() {
    return reinterpret_cast<const SetGroupNameResp*>(
               &_SetGroupNameResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(SetGroupNameResp& a, SetGroupNameResp& b) {
    a.Swap(&b);
  }
  inline void Swap(SetGroupNameResp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetGroupNameResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetGroupNameResp* New() const final {
    return CreateMaybeMessage<SetGroupNameResp>(nullptr);
  }

  SetGroupNameResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetGroupNameResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetGroupNameResp& from);
  void MergeFrom(const SetGroupNameResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetGroupNameResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onebot.SetGroupNameResp";
  }
  protected:
  explicit SetGroupNameResp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:onebot.SetGroupNameResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class SetGroupLeaveReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onebot.SetGroupLeaveReq) */ {
 public:
  inline SetGroupLeaveReq() : SetGroupLeaveReq(nullptr) {};
  virtual ~SetGroupLeaveReq();

  SetGroupLeaveReq(const SetGroupLeaveReq& from);
  SetGroupLeaveReq(SetGroupLeaveReq&& from) noexcept
    : SetGroupLeaveReq() {
    *this = ::std::move(from);
  }

  inline SetGroupLeaveReq& operator=(const SetGroupLeaveReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetGroupLeaveReq& operator=(SetGroupLeaveReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetGroupLeaveReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetGroupLeaveReq* internal_default_instance() {
    return reinterpret_cast<const SetGroupLeaveReq*>(
               &_SetGroupLeaveReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(SetGroupLeaveReq& a, SetGroupLeaveReq& b) {
    a.Swap(&b);
  }
  inline void Swap(SetGroupLeaveReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetGroupLeaveReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetGroupLeaveReq* New() const final {
    return CreateMaybeMessage<SetGroupLeaveReq>(nullptr);
  }

  SetGroupLeaveReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetGroupLeaveReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetGroupLeaveReq& from);
  void MergeFrom(const SetGroupLeaveReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetGroupLeaveReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onebot.SetGroupLeaveReq";
  }
  protected:
  explicit SetGroupLeaveReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupIdFieldNumber = 1,
    kIsDismissFieldNumber = 2,
  };
  // int64 group_id = 1;
  void clear_group_id();
  ::PROTOBUF_NAMESPACE_ID::int64 group_id() const;
  void set_group_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_group_id() const;
  void _internal_set_group_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool is_dismiss = 2;
  void clear_is_dismiss();
  bool is_dismiss() const;
  void set_is_dismiss(bool value);
  private:
  bool _internal_is_dismiss() const;
  void _internal_set_is_dismiss(bool value);
  public:

  // @@protoc_insertion_point(class_scope:onebot.SetGroupLeaveReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 group_id_;
  bool is_dismiss_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class SetGroupLeaveResp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onebot.SetGroupLeaveResp) */ {
 public:
  inline SetGroupLeaveResp() : SetGroupLeaveResp(nullptr) {};
  virtual ~SetGroupLeaveResp();

  SetGroupLeaveResp(const SetGroupLeaveResp& from);
  SetGroupLeaveResp(SetGroupLeaveResp&& from) noexcept
    : SetGroupLeaveResp() {
    *this = ::std::move(from);
  }

  inline SetGroupLeaveResp& operator=(const SetGroupLeaveResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetGroupLeaveResp& operator=(SetGroupLeaveResp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetGroupLeaveResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetGroupLeaveResp* internal_default_instance() {
    return reinterpret_cast<const SetGroupLeaveResp*>(
               &_SetGroupLeaveResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(SetGroupLeaveResp& a, SetGroupLeaveResp& b) {
    a.Swap(&b);
  }
  inline void Swap(SetGroupLeaveResp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetGroupLeaveResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetGroupLeaveResp* New() const final {
    return CreateMaybeMessage<SetGroupLeaveResp>(nullptr);
  }

  SetGroupLeaveResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetGroupLeaveResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetGroupLeaveResp& from);
  void MergeFrom(const SetGroupLeaveResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetGroupLeaveResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onebot.SetGroupLeaveResp";
  }
  protected:
  explicit SetGroupLeaveResp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:onebot.SetGroupLeaveResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class SetGroupSpecialTitleReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onebot.SetGroupSpecialTitleReq) */ {
 public:
  inline SetGroupSpecialTitleReq() : SetGroupSpecialTitleReq(nullptr) {};
  virtual ~SetGroupSpecialTitleReq();

  SetGroupSpecialTitleReq(const SetGroupSpecialTitleReq& from);
  SetGroupSpecialTitleReq(SetGroupSpecialTitleReq&& from) noexcept
    : SetGroupSpecialTitleReq() {
    *this = ::std::move(from);
  }

  inline SetGroupSpecialTitleReq& operator=(const SetGroupSpecialTitleReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetGroupSpecialTitleReq& operator=(SetGroupSpecialTitleReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetGroupSpecialTitleReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetGroupSpecialTitleReq* internal_default_instance() {
    return reinterpret_cast<const SetGroupSpecialTitleReq*>(
               &_SetGroupSpecialTitleReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(SetGroupSpecialTitleReq& a, SetGroupSpecialTitleReq& b) {
    a.Swap(&b);
  }
  inline void Swap(SetGroupSpecialTitleReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetGroupSpecialTitleReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetGroupSpecialTitleReq* New() const final {
    return CreateMaybeMessage<SetGroupSpecialTitleReq>(nullptr);
  }

  SetGroupSpecialTitleReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetGroupSpecialTitleReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetGroupSpecialTitleReq& from);
  void MergeFrom(const SetGroupSpecialTitleReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetGroupSpecialTitleReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onebot.SetGroupSpecialTitleReq";
  }
  protected:
  explicit SetGroupSpecialTitleReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpecialTitleFieldNumber = 3,
    kGroupIdFieldNumber = 1,
    kUserIdFieldNumber = 2,
    kDurationFieldNumber = 4,
  };
  // string special_title = 3;
  void clear_special_title();
  const std::string& special_title() const;
  void set_special_title(const std::string& value);
  void set_special_title(std::string&& value);
  void set_special_title(const char* value);
  void set_special_title(const char* value, size_t size);
  std::string* mutable_special_title();
  std::string* release_special_title();
  void set_allocated_special_title(std::string* special_title);
  private:
  const std::string& _internal_special_title() const;
  void _internal_set_special_title(const std::string& value);
  std::string* _internal_mutable_special_title();
  public:

  // int64 group_id = 1;
  void clear_group_id();
  ::PROTOBUF_NAMESPACE_ID::int64 group_id() const;
  void set_group_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_group_id() const;
  void _internal_set_group_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 user_id = 2;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::int64 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 duration = 4;
  void clear_duration();
  ::PROTOBUF_NAMESPACE_ID::int64 duration() const;
  void set_duration(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_duration() const;
  void _internal_set_duration(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:onebot.SetGroupSpecialTitleReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr special_title_;
  ::PROTOBUF_NAMESPACE_ID::int64 group_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 user_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 duration_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class SetGroupSpecialTitleResp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onebot.SetGroupSpecialTitleResp) */ {
 public:
  inline SetGroupSpecialTitleResp() : SetGroupSpecialTitleResp(nullptr) {};
  virtual ~SetGroupSpecialTitleResp();

  SetGroupSpecialTitleResp(const SetGroupSpecialTitleResp& from);
  SetGroupSpecialTitleResp(SetGroupSpecialTitleResp&& from) noexcept
    : SetGroupSpecialTitleResp() {
    *this = ::std::move(from);
  }

  inline SetGroupSpecialTitleResp& operator=(const SetGroupSpecialTitleResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetGroupSpecialTitleResp& operator=(SetGroupSpecialTitleResp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetGroupSpecialTitleResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetGroupSpecialTitleResp* internal_default_instance() {
    return reinterpret_cast<const SetGroupSpecialTitleResp*>(
               &_SetGroupSpecialTitleResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(SetGroupSpecialTitleResp& a, SetGroupSpecialTitleResp& b) {
    a.Swap(&b);
  }
  inline void Swap(SetGroupSpecialTitleResp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetGroupSpecialTitleResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetGroupSpecialTitleResp* New() const final {
    return CreateMaybeMessage<SetGroupSpecialTitleResp>(nullptr);
  }

  SetGroupSpecialTitleResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetGroupSpecialTitleResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetGroupSpecialTitleResp& from);
  void MergeFrom(const SetGroupSpecialTitleResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetGroupSpecialTitleResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onebot.SetGroupSpecialTitleResp";
  }
  protected:
  explicit SetGroupSpecialTitleResp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:onebot.SetGroupSpecialTitleResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class SetFriendAddRequestReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onebot.SetFriendAddRequestReq) */ {
 public:
  inline SetFriendAddRequestReq() : SetFriendAddRequestReq(nullptr) {};
  virtual ~SetFriendAddRequestReq();

  SetFriendAddRequestReq(const SetFriendAddRequestReq& from);
  SetFriendAddRequestReq(SetFriendAddRequestReq&& from) noexcept
    : SetFriendAddRequestReq() {
    *this = ::std::move(from);
  }

  inline SetFriendAddRequestReq& operator=(const SetFriendAddRequestReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetFriendAddRequestReq& operator=(SetFriendAddRequestReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetFriendAddRequestReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetFriendAddRequestReq* internal_default_instance() {
    return reinterpret_cast<const SetFriendAddRequestReq*>(
               &_SetFriendAddRequestReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(SetFriendAddRequestReq& a, SetFriendAddRequestReq& b) {
    a.Swap(&b);
  }
  inline void Swap(SetFriendAddRequestReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetFriendAddRequestReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetFriendAddRequestReq* New() const final {
    return CreateMaybeMessage<SetFriendAddRequestReq>(nullptr);
  }

  SetFriendAddRequestReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetFriendAddRequestReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetFriendAddRequestReq& from);
  void MergeFrom(const SetFriendAddRequestReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetFriendAddRequestReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onebot.SetFriendAddRequestReq";
  }
  protected:
  explicit SetFriendAddRequestReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFlagFieldNumber = 1,
    kRemarkFieldNumber = 3,
    kApproveFieldNumber = 2,
  };
  // string flag = 1;
  void clear_flag();
  const std::string& flag() const;
  void set_flag(const std::string& value);
  void set_flag(std::string&& value);
  void set_flag(const char* value);
  void set_flag(const char* value, size_t size);
  std::string* mutable_flag();
  std::string* release_flag();
  void set_allocated_flag(std::string* flag);
  private:
  const std::string& _internal_flag() const;
  void _internal_set_flag(const std::string& value);
  std::string* _internal_mutable_flag();
  public:

  // string remark = 3;
  void clear_remark();
  const std::string& remark() const;
  void set_remark(const std::string& value);
  void set_remark(std::string&& value);
  void set_remark(const char* value);
  void set_remark(const char* value, size_t size);
  std::string* mutable_remark();
  std::string* release_remark();
  void set_allocated_remark(std::string* remark);
  private:
  const std::string& _internal_remark() const;
  void _internal_set_remark(const std::string& value);
  std::string* _internal_mutable_remark();
  public:

  // bool approve = 2;
  void clear_approve();
  bool approve() const;
  void set_approve(bool value);
  private:
  bool _internal_approve() const;
  void _internal_set_approve(bool value);
  public:

  // @@protoc_insertion_point(class_scope:onebot.SetFriendAddRequestReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr flag_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr remark_;
  bool approve_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class SetFriendAddRequestResp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onebot.SetFriendAddRequestResp) */ {
 public:
  inline SetFriendAddRequestResp() : SetFriendAddRequestResp(nullptr) {};
  virtual ~SetFriendAddRequestResp();

  SetFriendAddRequestResp(const SetFriendAddRequestResp& from);
  SetFriendAddRequestResp(SetFriendAddRequestResp&& from) noexcept
    : SetFriendAddRequestResp() {
    *this = ::std::move(from);
  }

  inline SetFriendAddRequestResp& operator=(const SetFriendAddRequestResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetFriendAddRequestResp& operator=(SetFriendAddRequestResp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetFriendAddRequestResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetFriendAddRequestResp* internal_default_instance() {
    return reinterpret_cast<const SetFriendAddRequestResp*>(
               &_SetFriendAddRequestResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(SetFriendAddRequestResp& a, SetFriendAddRequestResp& b) {
    a.Swap(&b);
  }
  inline void Swap(SetFriendAddRequestResp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetFriendAddRequestResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetFriendAddRequestResp* New() const final {
    return CreateMaybeMessage<SetFriendAddRequestResp>(nullptr);
  }

  SetFriendAddRequestResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetFriendAddRequestResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetFriendAddRequestResp& from);
  void MergeFrom(const SetFriendAddRequestResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetFriendAddRequestResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onebot.SetFriendAddRequestResp";
  }
  protected:
  explicit SetFriendAddRequestResp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:onebot.SetFriendAddRequestResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class SetGroupAddRequestReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onebot.SetGroupAddRequestReq) */ {
 public:
  inline SetGroupAddRequestReq() : SetGroupAddRequestReq(nullptr) {};
  virtual ~SetGroupAddRequestReq();

  SetGroupAddRequestReq(const SetGroupAddRequestReq& from);
  SetGroupAddRequestReq(SetGroupAddRequestReq&& from) noexcept
    : SetGroupAddRequestReq() {
    *this = ::std::move(from);
  }

  inline SetGroupAddRequestReq& operator=(const SetGroupAddRequestReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetGroupAddRequestReq& operator=(SetGroupAddRequestReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetGroupAddRequestReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetGroupAddRequestReq* internal_default_instance() {
    return reinterpret_cast<const SetGroupAddRequestReq*>(
               &_SetGroupAddRequestReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(SetGroupAddRequestReq& a, SetGroupAddRequestReq& b) {
    a.Swap(&b);
  }
  inline void Swap(SetGroupAddRequestReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetGroupAddRequestReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetGroupAddRequestReq* New() const final {
    return CreateMaybeMessage<SetGroupAddRequestReq>(nullptr);
  }

  SetGroupAddRequestReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetGroupAddRequestReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetGroupAddRequestReq& from);
  void MergeFrom(const SetGroupAddRequestReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetGroupAddRequestReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onebot.SetGroupAddRequestReq";
  }
  protected:
  explicit SetGroupAddRequestReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFlagFieldNumber = 1,
    kSubTypeFieldNumber = 2,
    kTypeFieldNumber = 3,
    kReasonFieldNumber = 5,
    kApproveFieldNumber = 4,
  };
  // string flag = 1;
  void clear_flag();
  const std::string& flag() const;
  void set_flag(const std::string& value);
  void set_flag(std::string&& value);
  void set_flag(const char* value);
  void set_flag(const char* value, size_t size);
  std::string* mutable_flag();
  std::string* release_flag();
  void set_allocated_flag(std::string* flag);
  private:
  const std::string& _internal_flag() const;
  void _internal_set_flag(const std::string& value);
  std::string* _internal_mutable_flag();
  public:

  // string sub_type = 2;
  void clear_sub_type();
  const std::string& sub_type() const;
  void set_sub_type(const std::string& value);
  void set_sub_type(std::string&& value);
  void set_sub_type(const char* value);
  void set_sub_type(const char* value, size_t size);
  std::string* mutable_sub_type();
  std::string* release_sub_type();
  void set_allocated_sub_type(std::string* sub_type);
  private:
  const std::string& _internal_sub_type() const;
  void _internal_set_sub_type(const std::string& value);
  std::string* _internal_mutable_sub_type();
  public:

  // string type = 3;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // string reason = 5;
  void clear_reason();
  const std::string& reason() const;
  void set_reason(const std::string& value);
  void set_reason(std::string&& value);
  void set_reason(const char* value);
  void set_reason(const char* value, size_t size);
  std::string* mutable_reason();
  std::string* release_reason();
  void set_allocated_reason(std::string* reason);
  private:
  const std::string& _internal_reason() const;
  void _internal_set_reason(const std::string& value);
  std::string* _internal_mutable_reason();
  public:

  // bool approve = 4;
  void clear_approve();
  bool approve() const;
  void set_approve(bool value);
  private:
  bool _internal_approve() const;
  void _internal_set_approve(bool value);
  public:

  // @@protoc_insertion_point(class_scope:onebot.SetGroupAddRequestReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr flag_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sub_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reason_;
  bool approve_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class SetGroupAddRequestResp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onebot.SetGroupAddRequestResp) */ {
 public:
  inline SetGroupAddRequestResp() : SetGroupAddRequestResp(nullptr) {};
  virtual ~SetGroupAddRequestResp();

  SetGroupAddRequestResp(const SetGroupAddRequestResp& from);
  SetGroupAddRequestResp(SetGroupAddRequestResp&& from) noexcept
    : SetGroupAddRequestResp() {
    *this = ::std::move(from);
  }

  inline SetGroupAddRequestResp& operator=(const SetGroupAddRequestResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetGroupAddRequestResp& operator=(SetGroupAddRequestResp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetGroupAddRequestResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetGroupAddRequestResp* internal_default_instance() {
    return reinterpret_cast<const SetGroupAddRequestResp*>(
               &_SetGroupAddRequestResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(SetGroupAddRequestResp& a, SetGroupAddRequestResp& b) {
    a.Swap(&b);
  }
  inline void Swap(SetGroupAddRequestResp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetGroupAddRequestResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetGroupAddRequestResp* New() const final {
    return CreateMaybeMessage<SetGroupAddRequestResp>(nullptr);
  }

  SetGroupAddRequestResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetGroupAddRequestResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetGroupAddRequestResp& from);
  void MergeFrom(const SetGroupAddRequestResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetGroupAddRequestResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onebot.SetGroupAddRequestResp";
  }
  protected:
  explicit SetGroupAddRequestResp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:onebot.SetGroupAddRequestResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class GetLoginInfoReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onebot.GetLoginInfoReq) */ {
 public:
  inline GetLoginInfoReq() : GetLoginInfoReq(nullptr) {};
  virtual ~GetLoginInfoReq();

  GetLoginInfoReq(const GetLoginInfoReq& from);
  GetLoginInfoReq(GetLoginInfoReq&& from) noexcept
    : GetLoginInfoReq() {
    *this = ::std::move(from);
  }

  inline GetLoginInfoReq& operator=(const GetLoginInfoReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetLoginInfoReq& operator=(GetLoginInfoReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetLoginInfoReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetLoginInfoReq* internal_default_instance() {
    return reinterpret_cast<const GetLoginInfoReq*>(
               &_GetLoginInfoReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(GetLoginInfoReq& a, GetLoginInfoReq& b) {
    a.Swap(&b);
  }
  inline void Swap(GetLoginInfoReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetLoginInfoReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetLoginInfoReq* New() const final {
    return CreateMaybeMessage<GetLoginInfoReq>(nullptr);
  }

  GetLoginInfoReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetLoginInfoReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetLoginInfoReq& from);
  void MergeFrom(const GetLoginInfoReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetLoginInfoReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onebot.GetLoginInfoReq";
  }
  protected:
  explicit GetLoginInfoReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:onebot.GetLoginInfoReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class GetLoginInfoResp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onebot.GetLoginInfoResp) */ {
 public:
  inline GetLoginInfoResp() : GetLoginInfoResp(nullptr) {};
  virtual ~GetLoginInfoResp();

  GetLoginInfoResp(const GetLoginInfoResp& from);
  GetLoginInfoResp(GetLoginInfoResp&& from) noexcept
    : GetLoginInfoResp() {
    *this = ::std::move(from);
  }

  inline GetLoginInfoResp& operator=(const GetLoginInfoResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetLoginInfoResp& operator=(GetLoginInfoResp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetLoginInfoResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetLoginInfoResp* internal_default_instance() {
    return reinterpret_cast<const GetLoginInfoResp*>(
               &_GetLoginInfoResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(GetLoginInfoResp& a, GetLoginInfoResp& b) {
    a.Swap(&b);
  }
  inline void Swap(GetLoginInfoResp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetLoginInfoResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetLoginInfoResp* New() const final {
    return CreateMaybeMessage<GetLoginInfoResp>(nullptr);
  }

  GetLoginInfoResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetLoginInfoResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetLoginInfoResp& from);
  void MergeFrom(const GetLoginInfoResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetLoginInfoResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onebot.GetLoginInfoResp";
  }
  protected:
  explicit GetLoginInfoResp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNicknameFieldNumber = 2,
    kUserIdFieldNumber = 1,
  };
  // string nickname = 2;
  void clear_nickname();
  const std::string& nickname() const;
  void set_nickname(const std::string& value);
  void set_nickname(std::string&& value);
  void set_nickname(const char* value);
  void set_nickname(const char* value, size_t size);
  std::string* mutable_nickname();
  std::string* release_nickname();
  void set_allocated_nickname(std::string* nickname);
  private:
  const std::string& _internal_nickname() const;
  void _internal_set_nickname(const std::string& value);
  std::string* _internal_mutable_nickname();
  public:

  // int64 user_id = 1;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::int64 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:onebot.GetLoginInfoResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nickname_;
  ::PROTOBUF_NAMESPACE_ID::int64 user_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class GetStrangerInfoReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onebot.GetStrangerInfoReq) */ {
 public:
  inline GetStrangerInfoReq() : GetStrangerInfoReq(nullptr) {};
  virtual ~GetStrangerInfoReq();

  GetStrangerInfoReq(const GetStrangerInfoReq& from);
  GetStrangerInfoReq(GetStrangerInfoReq&& from) noexcept
    : GetStrangerInfoReq() {
    *this = ::std::move(from);
  }

  inline GetStrangerInfoReq& operator=(const GetStrangerInfoReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetStrangerInfoReq& operator=(GetStrangerInfoReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetStrangerInfoReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetStrangerInfoReq* internal_default_instance() {
    return reinterpret_cast<const GetStrangerInfoReq*>(
               &_GetStrangerInfoReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(GetStrangerInfoReq& a, GetStrangerInfoReq& b) {
    a.Swap(&b);
  }
  inline void Swap(GetStrangerInfoReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetStrangerInfoReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetStrangerInfoReq* New() const final {
    return CreateMaybeMessage<GetStrangerInfoReq>(nullptr);
  }

  GetStrangerInfoReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetStrangerInfoReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetStrangerInfoReq& from);
  void MergeFrom(const GetStrangerInfoReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetStrangerInfoReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onebot.GetStrangerInfoReq";
  }
  protected:
  explicit GetStrangerInfoReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kNoCacheFieldNumber = 2,
  };
  // int64 user_id = 1;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::int64 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool no_cache = 2;
  void clear_no_cache();
  bool no_cache() const;
  void set_no_cache(bool value);
  private:
  bool _internal_no_cache() const;
  void _internal_set_no_cache(bool value);
  public:

  // @@protoc_insertion_point(class_scope:onebot.GetStrangerInfoReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 user_id_;
  bool no_cache_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class GetStrangerInfoResp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onebot.GetStrangerInfoResp) */ {
 public:
  inline GetStrangerInfoResp() : GetStrangerInfoResp(nullptr) {};
  virtual ~GetStrangerInfoResp();

  GetStrangerInfoResp(const GetStrangerInfoResp& from);
  GetStrangerInfoResp(GetStrangerInfoResp&& from) noexcept
    : GetStrangerInfoResp() {
    *this = ::std::move(from);
  }

  inline GetStrangerInfoResp& operator=(const GetStrangerInfoResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetStrangerInfoResp& operator=(GetStrangerInfoResp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetStrangerInfoResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetStrangerInfoResp* internal_default_instance() {
    return reinterpret_cast<const GetStrangerInfoResp*>(
               &_GetStrangerInfoResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(GetStrangerInfoResp& a, GetStrangerInfoResp& b) {
    a.Swap(&b);
  }
  inline void Swap(GetStrangerInfoResp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetStrangerInfoResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetStrangerInfoResp* New() const final {
    return CreateMaybeMessage<GetStrangerInfoResp>(nullptr);
  }

  GetStrangerInfoResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetStrangerInfoResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetStrangerInfoResp& from);
  void MergeFrom(const GetStrangerInfoResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetStrangerInfoResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onebot.GetStrangerInfoResp";
  }
  protected:
  explicit GetStrangerInfoResp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNicknameFieldNumber = 2,
    kSexFieldNumber = 3,
    kUserIdFieldNumber = 1,
    kAgeFieldNumber = 4,
  };
  // string nickname = 2;
  void clear_nickname();
  const std::string& nickname() const;
  void set_nickname(const std::string& value);
  void set_nickname(std::string&& value);
  void set_nickname(const char* value);
  void set_nickname(const char* value, size_t size);
  std::string* mutable_nickname();
  std::string* release_nickname();
  void set_allocated_nickname(std::string* nickname);
  private:
  const std::string& _internal_nickname() const;
  void _internal_set_nickname(const std::string& value);
  std::string* _internal_mutable_nickname();
  public:

  // string sex = 3;
  void clear_sex();
  const std::string& sex() const;
  void set_sex(const std::string& value);
  void set_sex(std::string&& value);
  void set_sex(const char* value);
  void set_sex(const char* value, size_t size);
  std::string* mutable_sex();
  std::string* release_sex();
  void set_allocated_sex(std::string* sex);
  private:
  const std::string& _internal_sex() const;
  void _internal_set_sex(const std::string& value);
  std::string* _internal_mutable_sex();
  public:

  // int64 user_id = 1;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::int64 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 age = 4;
  void clear_age();
  ::PROTOBUF_NAMESPACE_ID::int32 age() const;
  void set_age(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_age() const;
  void _internal_set_age(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:onebot.GetStrangerInfoResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nickname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sex_;
  ::PROTOBUF_NAMESPACE_ID::int64 user_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 age_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class GetFriendListReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onebot.GetFriendListReq) */ {
 public:
  inline GetFriendListReq() : GetFriendListReq(nullptr) {};
  virtual ~GetFriendListReq();

  GetFriendListReq(const GetFriendListReq& from);
  GetFriendListReq(GetFriendListReq&& from) noexcept
    : GetFriendListReq() {
    *this = ::std::move(from);
  }

  inline GetFriendListReq& operator=(const GetFriendListReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetFriendListReq& operator=(GetFriendListReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetFriendListReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetFriendListReq* internal_default_instance() {
    return reinterpret_cast<const GetFriendListReq*>(
               &_GetFriendListReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(GetFriendListReq& a, GetFriendListReq& b) {
    a.Swap(&b);
  }
  inline void Swap(GetFriendListReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetFriendListReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetFriendListReq* New() const final {
    return CreateMaybeMessage<GetFriendListReq>(nullptr);
  }

  GetFriendListReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetFriendListReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetFriendListReq& from);
  void MergeFrom(const GetFriendListReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetFriendListReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onebot.GetFriendListReq";
  }
  protected:
  explicit GetFriendListReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:onebot.GetFriendListReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class GetFriendListResp_Friend PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onebot.GetFriendListResp.Friend) */ {
 public:
  inline GetFriendListResp_Friend() : GetFriendListResp_Friend(nullptr) {};
  virtual ~GetFriendListResp_Friend();

  GetFriendListResp_Friend(const GetFriendListResp_Friend& from);
  GetFriendListResp_Friend(GetFriendListResp_Friend&& from) noexcept
    : GetFriendListResp_Friend() {
    *this = ::std::move(from);
  }

  inline GetFriendListResp_Friend& operator=(const GetFriendListResp_Friend& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetFriendListResp_Friend& operator=(GetFriendListResp_Friend&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetFriendListResp_Friend& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetFriendListResp_Friend* internal_default_instance() {
    return reinterpret_cast<const GetFriendListResp_Friend*>(
               &_GetFriendListResp_Friend_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(GetFriendListResp_Friend& a, GetFriendListResp_Friend& b) {
    a.Swap(&b);
  }
  inline void Swap(GetFriendListResp_Friend* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetFriendListResp_Friend* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetFriendListResp_Friend* New() const final {
    return CreateMaybeMessage<GetFriendListResp_Friend>(nullptr);
  }

  GetFriendListResp_Friend* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetFriendListResp_Friend>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetFriendListResp_Friend& from);
  void MergeFrom(const GetFriendListResp_Friend& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetFriendListResp_Friend* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onebot.GetFriendListResp.Friend";
  }
  protected:
  explicit GetFriendListResp_Friend(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNicknameFieldNumber = 2,
    kRemarkFieldNumber = 3,
    kUserIdFieldNumber = 1,
  };
  // string nickname = 2;
  void clear_nickname();
  const std::string& nickname() const;
  void set_nickname(const std::string& value);
  void set_nickname(std::string&& value);
  void set_nickname(const char* value);
  void set_nickname(const char* value, size_t size);
  std::string* mutable_nickname();
  std::string* release_nickname();
  void set_allocated_nickname(std::string* nickname);
  private:
  const std::string& _internal_nickname() const;
  void _internal_set_nickname(const std::string& value);
  std::string* _internal_mutable_nickname();
  public:

  // string remark = 3;
  void clear_remark();
  const std::string& remark() const;
  void set_remark(const std::string& value);
  void set_remark(std::string&& value);
  void set_remark(const char* value);
  void set_remark(const char* value, size_t size);
  std::string* mutable_remark();
  std::string* release_remark();
  void set_allocated_remark(std::string* remark);
  private:
  const std::string& _internal_remark() const;
  void _internal_set_remark(const std::string& value);
  std::string* _internal_mutable_remark();
  public:

  // int64 user_id = 1;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::int64 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:onebot.GetFriendListResp.Friend)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nickname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr remark_;
  ::PROTOBUF_NAMESPACE_ID::int64 user_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class GetFriendListResp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onebot.GetFriendListResp) */ {
 public:
  inline GetFriendListResp() : GetFriendListResp(nullptr) {};
  virtual ~GetFriendListResp();

  GetFriendListResp(const GetFriendListResp& from);
  GetFriendListResp(GetFriendListResp&& from) noexcept
    : GetFriendListResp() {
    *this = ::std::move(from);
  }

  inline GetFriendListResp& operator=(const GetFriendListResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetFriendListResp& operator=(GetFriendListResp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetFriendListResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetFriendListResp* internal_default_instance() {
    return reinterpret_cast<const GetFriendListResp*>(
               &_GetFriendListResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(GetFriendListResp& a, GetFriendListResp& b) {
    a.Swap(&b);
  }
  inline void Swap(GetFriendListResp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetFriendListResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetFriendListResp* New() const final {
    return CreateMaybeMessage<GetFriendListResp>(nullptr);
  }

  GetFriendListResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetFriendListResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetFriendListResp& from);
  void MergeFrom(const GetFriendListResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetFriendListResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onebot.GetFriendListResp";
  }
  protected:
  explicit GetFriendListResp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef GetFriendListResp_Friend Friend;

  // accessors -------------------------------------------------------

  enum : int {
    kFriendListFieldNumber = 1,
  };
  // repeated .onebot.GetFriendListResp.Friend friend_list = 1;
  int friend_list_size() const;
  private:
  int _internal_friend_list_size() const;
  public:
  void clear_friend_list();
  ::onebot::GetFriendListResp_Friend* mutable_friend_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onebot::GetFriendListResp_Friend >*
      mutable_friend_list();
  private:
  const ::onebot::GetFriendListResp_Friend& _internal_friend_list(int index) const;
  ::onebot::GetFriendListResp_Friend* _internal_add_friend_list();
  public:
  const ::onebot::GetFriendListResp_Friend& friend_list(int index) const;
  ::onebot::GetFriendListResp_Friend* add_friend_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onebot::GetFriendListResp_Friend >&
      friend_list() const;

  // @@protoc_insertion_point(class_scope:onebot.GetFriendListResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onebot::GetFriendListResp_Friend > friend_list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class GetGroupInfoReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onebot.GetGroupInfoReq) */ {
 public:
  inline GetGroupInfoReq() : GetGroupInfoReq(nullptr) {};
  virtual ~GetGroupInfoReq();

  GetGroupInfoReq(const GetGroupInfoReq& from);
  GetGroupInfoReq(GetGroupInfoReq&& from) noexcept
    : GetGroupInfoReq() {
    *this = ::std::move(from);
  }

  inline GetGroupInfoReq& operator=(const GetGroupInfoReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetGroupInfoReq& operator=(GetGroupInfoReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetGroupInfoReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetGroupInfoReq* internal_default_instance() {
    return reinterpret_cast<const GetGroupInfoReq*>(
               &_GetGroupInfoReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(GetGroupInfoReq& a, GetGroupInfoReq& b) {
    a.Swap(&b);
  }
  inline void Swap(GetGroupInfoReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetGroupInfoReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetGroupInfoReq* New() const final {
    return CreateMaybeMessage<GetGroupInfoReq>(nullptr);
  }

  GetGroupInfoReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetGroupInfoReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetGroupInfoReq& from);
  void MergeFrom(const GetGroupInfoReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetGroupInfoReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onebot.GetGroupInfoReq";
  }
  protected:
  explicit GetGroupInfoReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupIdFieldNumber = 1,
    kNoCacheFieldNumber = 2,
  };
  // int64 group_id = 1;
  void clear_group_id();
  ::PROTOBUF_NAMESPACE_ID::int64 group_id() const;
  void set_group_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_group_id() const;
  void _internal_set_group_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool no_cache = 2;
  void clear_no_cache();
  bool no_cache() const;
  void set_no_cache(bool value);
  private:
  bool _internal_no_cache() const;
  void _internal_set_no_cache(bool value);
  public:

  // @@protoc_insertion_point(class_scope:onebot.GetGroupInfoReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 group_id_;
  bool no_cache_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class GetGroupInfoResp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onebot.GetGroupInfoResp) */ {
 public:
  inline GetGroupInfoResp() : GetGroupInfoResp(nullptr) {};
  virtual ~GetGroupInfoResp();

  GetGroupInfoResp(const GetGroupInfoResp& from);
  GetGroupInfoResp(GetGroupInfoResp&& from) noexcept
    : GetGroupInfoResp() {
    *this = ::std::move(from);
  }

  inline GetGroupInfoResp& operator=(const GetGroupInfoResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetGroupInfoResp& operator=(GetGroupInfoResp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetGroupInfoResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetGroupInfoResp* internal_default_instance() {
    return reinterpret_cast<const GetGroupInfoResp*>(
               &_GetGroupInfoResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(GetGroupInfoResp& a, GetGroupInfoResp& b) {
    a.Swap(&b);
  }
  inline void Swap(GetGroupInfoResp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetGroupInfoResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetGroupInfoResp* New() const final {
    return CreateMaybeMessage<GetGroupInfoResp>(nullptr);
  }

  GetGroupInfoResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetGroupInfoResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetGroupInfoResp& from);
  void MergeFrom(const GetGroupInfoResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetGroupInfoResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onebot.GetGroupInfoResp";
  }
  protected:
  explicit GetGroupInfoResp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupNameFieldNumber = 2,
    kGroupIdFieldNumber = 1,
    kMemberCountFieldNumber = 3,
    kMaxMemberCountFieldNumber = 4,
  };
  // string group_name = 2;
  void clear_group_name();
  const std::string& group_name() const;
  void set_group_name(const std::string& value);
  void set_group_name(std::string&& value);
  void set_group_name(const char* value);
  void set_group_name(const char* value, size_t size);
  std::string* mutable_group_name();
  std::string* release_group_name();
  void set_allocated_group_name(std::string* group_name);
  private:
  const std::string& _internal_group_name() const;
  void _internal_set_group_name(const std::string& value);
  std::string* _internal_mutable_group_name();
  public:

  // int64 group_id = 1;
  void clear_group_id();
  ::PROTOBUF_NAMESPACE_ID::int64 group_id() const;
  void set_group_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_group_id() const;
  void _internal_set_group_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 member_count = 3;
  void clear_member_count();
  ::PROTOBUF_NAMESPACE_ID::int32 member_count() const;
  void set_member_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_member_count() const;
  void _internal_set_member_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 max_member_count = 4;
  void clear_max_member_count();
  ::PROTOBUF_NAMESPACE_ID::int32 max_member_count() const;
  void set_max_member_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max_member_count() const;
  void _internal_set_max_member_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:onebot.GetGroupInfoResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr group_name_;
  ::PROTOBUF_NAMESPACE_ID::int64 group_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 member_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_member_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class GetGroupListReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onebot.GetGroupListReq) */ {
 public:
  inline GetGroupListReq() : GetGroupListReq(nullptr) {};
  virtual ~GetGroupListReq();

  GetGroupListReq(const GetGroupListReq& from);
  GetGroupListReq(GetGroupListReq&& from) noexcept
    : GetGroupListReq() {
    *this = ::std::move(from);
  }

  inline GetGroupListReq& operator=(const GetGroupListReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetGroupListReq& operator=(GetGroupListReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetGroupListReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetGroupListReq* internal_default_instance() {
    return reinterpret_cast<const GetGroupListReq*>(
               &_GetGroupListReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(GetGroupListReq& a, GetGroupListReq& b) {
    a.Swap(&b);
  }
  inline void Swap(GetGroupListReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetGroupListReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetGroupListReq* New() const final {
    return CreateMaybeMessage<GetGroupListReq>(nullptr);
  }

  GetGroupListReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetGroupListReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetGroupListReq& from);
  void MergeFrom(const GetGroupListReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetGroupListReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onebot.GetGroupListReq";
  }
  protected:
  explicit GetGroupListReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:onebot.GetGroupListReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class GetGroupListResp_Group PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onebot.GetGroupListResp.Group) */ {
 public:
  inline GetGroupListResp_Group() : GetGroupListResp_Group(nullptr) {};
  virtual ~GetGroupListResp_Group();

  GetGroupListResp_Group(const GetGroupListResp_Group& from);
  GetGroupListResp_Group(GetGroupListResp_Group&& from) noexcept
    : GetGroupListResp_Group() {
    *this = ::std::move(from);
  }

  inline GetGroupListResp_Group& operator=(const GetGroupListResp_Group& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetGroupListResp_Group& operator=(GetGroupListResp_Group&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetGroupListResp_Group& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetGroupListResp_Group* internal_default_instance() {
    return reinterpret_cast<const GetGroupListResp_Group*>(
               &_GetGroupListResp_Group_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(GetGroupListResp_Group& a, GetGroupListResp_Group& b) {
    a.Swap(&b);
  }
  inline void Swap(GetGroupListResp_Group* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetGroupListResp_Group* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetGroupListResp_Group* New() const final {
    return CreateMaybeMessage<GetGroupListResp_Group>(nullptr);
  }

  GetGroupListResp_Group* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetGroupListResp_Group>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetGroupListResp_Group& from);
  void MergeFrom(const GetGroupListResp_Group& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetGroupListResp_Group* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onebot.GetGroupListResp.Group";
  }
  protected:
  explicit GetGroupListResp_Group(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupNameFieldNumber = 2,
    kGroupIdFieldNumber = 1,
    kMemberCountFieldNumber = 3,
    kMaxMemberCountFieldNumber = 4,
  };
  // string group_name = 2;
  void clear_group_name();
  const std::string& group_name() const;
  void set_group_name(const std::string& value);
  void set_group_name(std::string&& value);
  void set_group_name(const char* value);
  void set_group_name(const char* value, size_t size);
  std::string* mutable_group_name();
  std::string* release_group_name();
  void set_allocated_group_name(std::string* group_name);
  private:
  const std::string& _internal_group_name() const;
  void _internal_set_group_name(const std::string& value);
  std::string* _internal_mutable_group_name();
  public:

  // int64 group_id = 1;
  void clear_group_id();
  ::PROTOBUF_NAMESPACE_ID::int64 group_id() const;
  void set_group_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_group_id() const;
  void _internal_set_group_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 member_count = 3;
  void clear_member_count();
  ::PROTOBUF_NAMESPACE_ID::int32 member_count() const;
  void set_member_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_member_count() const;
  void _internal_set_member_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 max_member_count = 4;
  void clear_max_member_count();
  ::PROTOBUF_NAMESPACE_ID::int32 max_member_count() const;
  void set_max_member_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max_member_count() const;
  void _internal_set_max_member_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:onebot.GetGroupListResp.Group)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr group_name_;
  ::PROTOBUF_NAMESPACE_ID::int64 group_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 member_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_member_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class GetGroupListResp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onebot.GetGroupListResp) */ {
 public:
  inline GetGroupListResp() : GetGroupListResp(nullptr) {};
  virtual ~GetGroupListResp();

  GetGroupListResp(const GetGroupListResp& from);
  GetGroupListResp(GetGroupListResp&& from) noexcept
    : GetGroupListResp() {
    *this = ::std::move(from);
  }

  inline GetGroupListResp& operator=(const GetGroupListResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetGroupListResp& operator=(GetGroupListResp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetGroupListResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetGroupListResp* internal_default_instance() {
    return reinterpret_cast<const GetGroupListResp*>(
               &_GetGroupListResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(GetGroupListResp& a, GetGroupListResp& b) {
    a.Swap(&b);
  }
  inline void Swap(GetGroupListResp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetGroupListResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetGroupListResp* New() const final {
    return CreateMaybeMessage<GetGroupListResp>(nullptr);
  }

  GetGroupListResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetGroupListResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetGroupListResp& from);
  void MergeFrom(const GetGroupListResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetGroupListResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onebot.GetGroupListResp";
  }
  protected:
  explicit GetGroupListResp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef GetGroupListResp_Group Group;

  // accessors -------------------------------------------------------

  enum : int {
    kGroupListFieldNumber = 1,
  };
  // repeated .onebot.GetGroupListResp.Group group_list = 1;
  int group_list_size() const;
  private:
  int _internal_group_list_size() const;
  public:
  void clear_group_list();
  ::onebot::GetGroupListResp_Group* mutable_group_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onebot::GetGroupListResp_Group >*
      mutable_group_list();
  private:
  const ::onebot::GetGroupListResp_Group& _internal_group_list(int index) const;
  ::onebot::GetGroupListResp_Group* _internal_add_group_list();
  public:
  const ::onebot::GetGroupListResp_Group& group_list(int index) const;
  ::onebot::GetGroupListResp_Group* add_group_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onebot::GetGroupListResp_Group >&
      group_list() const;

  // @@protoc_insertion_point(class_scope:onebot.GetGroupListResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onebot::GetGroupListResp_Group > group_list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class GetGroupMemberInfoReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onebot.GetGroupMemberInfoReq) */ {
 public:
  inline GetGroupMemberInfoReq() : GetGroupMemberInfoReq(nullptr) {};
  virtual ~GetGroupMemberInfoReq();

  GetGroupMemberInfoReq(const GetGroupMemberInfoReq& from);
  GetGroupMemberInfoReq(GetGroupMemberInfoReq&& from) noexcept
    : GetGroupMemberInfoReq() {
    *this = ::std::move(from);
  }

  inline GetGroupMemberInfoReq& operator=(const GetGroupMemberInfoReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetGroupMemberInfoReq& operator=(GetGroupMemberInfoReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetGroupMemberInfoReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetGroupMemberInfoReq* internal_default_instance() {
    return reinterpret_cast<const GetGroupMemberInfoReq*>(
               &_GetGroupMemberInfoReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(GetGroupMemberInfoReq& a, GetGroupMemberInfoReq& b) {
    a.Swap(&b);
  }
  inline void Swap(GetGroupMemberInfoReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetGroupMemberInfoReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetGroupMemberInfoReq* New() const final {
    return CreateMaybeMessage<GetGroupMemberInfoReq>(nullptr);
  }

  GetGroupMemberInfoReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetGroupMemberInfoReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetGroupMemberInfoReq& from);
  void MergeFrom(const GetGroupMemberInfoReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetGroupMemberInfoReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onebot.GetGroupMemberInfoReq";
  }
  protected:
  explicit GetGroupMemberInfoReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupIdFieldNumber = 1,
    kUserIdFieldNumber = 2,
    kNoCacheFieldNumber = 3,
  };
  // int64 group_id = 1;
  void clear_group_id();
  ::PROTOBUF_NAMESPACE_ID::int64 group_id() const;
  void set_group_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_group_id() const;
  void _internal_set_group_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 user_id = 2;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::int64 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool no_cache = 3;
  void clear_no_cache();
  bool no_cache() const;
  void set_no_cache(bool value);
  private:
  bool _internal_no_cache() const;
  void _internal_set_no_cache(bool value);
  public:

  // @@protoc_insertion_point(class_scope:onebot.GetGroupMemberInfoReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 group_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 user_id_;
  bool no_cache_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class GetGroupMemberInfoResp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onebot.GetGroupMemberInfoResp) */ {
 public:
  inline GetGroupMemberInfoResp() : GetGroupMemberInfoResp(nullptr) {};
  virtual ~GetGroupMemberInfoResp();

  GetGroupMemberInfoResp(const GetGroupMemberInfoResp& from);
  GetGroupMemberInfoResp(GetGroupMemberInfoResp&& from) noexcept
    : GetGroupMemberInfoResp() {
    *this = ::std::move(from);
  }

  inline GetGroupMemberInfoResp& operator=(const GetGroupMemberInfoResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetGroupMemberInfoResp& operator=(GetGroupMemberInfoResp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetGroupMemberInfoResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetGroupMemberInfoResp* internal_default_instance() {
    return reinterpret_cast<const GetGroupMemberInfoResp*>(
               &_GetGroupMemberInfoResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(GetGroupMemberInfoResp& a, GetGroupMemberInfoResp& b) {
    a.Swap(&b);
  }
  inline void Swap(GetGroupMemberInfoResp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetGroupMemberInfoResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetGroupMemberInfoResp* New() const final {
    return CreateMaybeMessage<GetGroupMemberInfoResp>(nullptr);
  }

  GetGroupMemberInfoResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetGroupMemberInfoResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetGroupMemberInfoResp& from);
  void MergeFrom(const GetGroupMemberInfoResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetGroupMemberInfoResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onebot.GetGroupMemberInfoResp";
  }
  protected:
  explicit GetGroupMemberInfoResp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNicknameFieldNumber = 3,
    kCardFieldNumber = 4,
    kSexFieldNumber = 5,
    kAreaFieldNumber = 7,
    kLevelFieldNumber = 10,
    kRoleFieldNumber = 11,
    kTitleFieldNumber = 13,
    kGroupIdFieldNumber = 1,
    kUserIdFieldNumber = 2,
    kAgeFieldNumber = 6,
    kJoinTimeFieldNumber = 8,
    kLastSentTimeFieldNumber = 9,
    kUnfriendlyFieldNumber = 12,
    kCardChangeableFieldNumber = 15,
    kTitleExpireTimeFieldNumber = 14,
  };
  // string nickname = 3;
  void clear_nickname();
  const std::string& nickname() const;
  void set_nickname(const std::string& value);
  void set_nickname(std::string&& value);
  void set_nickname(const char* value);
  void set_nickname(const char* value, size_t size);
  std::string* mutable_nickname();
  std::string* release_nickname();
  void set_allocated_nickname(std::string* nickname);
  private:
  const std::string& _internal_nickname() const;
  void _internal_set_nickname(const std::string& value);
  std::string* _internal_mutable_nickname();
  public:

  // string card = 4;
  void clear_card();
  const std::string& card() const;
  void set_card(const std::string& value);
  void set_card(std::string&& value);
  void set_card(const char* value);
  void set_card(const char* value, size_t size);
  std::string* mutable_card();
  std::string* release_card();
  void set_allocated_card(std::string* card);
  private:
  const std::string& _internal_card() const;
  void _internal_set_card(const std::string& value);
  std::string* _internal_mutable_card();
  public:

  // string sex = 5;
  void clear_sex();
  const std::string& sex() const;
  void set_sex(const std::string& value);
  void set_sex(std::string&& value);
  void set_sex(const char* value);
  void set_sex(const char* value, size_t size);
  std::string* mutable_sex();
  std::string* release_sex();
  void set_allocated_sex(std::string* sex);
  private:
  const std::string& _internal_sex() const;
  void _internal_set_sex(const std::string& value);
  std::string* _internal_mutable_sex();
  public:

  // string area = 7;
  void clear_area();
  const std::string& area() const;
  void set_area(const std::string& value);
  void set_area(std::string&& value);
  void set_area(const char* value);
  void set_area(const char* value, size_t size);
  std::string* mutable_area();
  std::string* release_area();
  void set_allocated_area(std::string* area);
  private:
  const std::string& _internal_area() const;
  void _internal_set_area(const std::string& value);
  std::string* _internal_mutable_area();
  public:

  // string level = 10;
  void clear_level();
  const std::string& level() const;
  void set_level(const std::string& value);
  void set_level(std::string&& value);
  void set_level(const char* value);
  void set_level(const char* value, size_t size);
  std::string* mutable_level();
  std::string* release_level();
  void set_allocated_level(std::string* level);
  private:
  const std::string& _internal_level() const;
  void _internal_set_level(const std::string& value);
  std::string* _internal_mutable_level();
  public:

  // string role = 11;
  void clear_role();
  const std::string& role() const;
  void set_role(const std::string& value);
  void set_role(std::string&& value);
  void set_role(const char* value);
  void set_role(const char* value, size_t size);
  std::string* mutable_role();
  std::string* release_role();
  void set_allocated_role(std::string* role);
  private:
  const std::string& _internal_role() const;
  void _internal_set_role(const std::string& value);
  std::string* _internal_mutable_role();
  public:

  // string title = 13;
  void clear_title();
  const std::string& title() const;
  void set_title(const std::string& value);
  void set_title(std::string&& value);
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  std::string* mutable_title();
  std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // int64 group_id = 1;
  void clear_group_id();
  ::PROTOBUF_NAMESPACE_ID::int64 group_id() const;
  void set_group_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_group_id() const;
  void _internal_set_group_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 user_id = 2;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::int64 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 age = 6;
  void clear_age();
  ::PROTOBUF_NAMESPACE_ID::int32 age() const;
  void set_age(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_age() const;
  void _internal_set_age(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 join_time = 8;
  void clear_join_time();
  ::PROTOBUF_NAMESPACE_ID::int32 join_time() const;
  void set_join_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_join_time() const;
  void _internal_set_join_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 last_sent_time = 9;
  void clear_last_sent_time();
  ::PROTOBUF_NAMESPACE_ID::int32 last_sent_time() const;
  void set_last_sent_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_last_sent_time() const;
  void _internal_set_last_sent_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool unfriendly = 12;
  void clear_unfriendly();
  bool unfriendly() const;
  void set_unfriendly(bool value);
  private:
  bool _internal_unfriendly() const;
  void _internal_set_unfriendly(bool value);
  public:

  // bool card_changeable = 15;
  void clear_card_changeable();
  bool card_changeable() const;
  void set_card_changeable(bool value);
  private:
  bool _internal_card_changeable() const;
  void _internal_set_card_changeable(bool value);
  public:

  // int32 title_expire_time = 14;
  void clear_title_expire_time();
  ::PROTOBUF_NAMESPACE_ID::int32 title_expire_time() const;
  void set_title_expire_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_title_expire_time() const;
  void _internal_set_title_expire_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:onebot.GetGroupMemberInfoResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nickname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr card_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sex_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr area_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr level_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr role_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::PROTOBUF_NAMESPACE_ID::int64 group_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 user_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 age_;
  ::PROTOBUF_NAMESPACE_ID::int32 join_time_;
  ::PROTOBUF_NAMESPACE_ID::int32 last_sent_time_;
  bool unfriendly_;
  bool card_changeable_;
  ::PROTOBUF_NAMESPACE_ID::int32 title_expire_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class GetGroupMemberListReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onebot.GetGroupMemberListReq) */ {
 public:
  inline GetGroupMemberListReq() : GetGroupMemberListReq(nullptr) {};
  virtual ~GetGroupMemberListReq();

  GetGroupMemberListReq(const GetGroupMemberListReq& from);
  GetGroupMemberListReq(GetGroupMemberListReq&& from) noexcept
    : GetGroupMemberListReq() {
    *this = ::std::move(from);
  }

  inline GetGroupMemberListReq& operator=(const GetGroupMemberListReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetGroupMemberListReq& operator=(GetGroupMemberListReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetGroupMemberListReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetGroupMemberListReq* internal_default_instance() {
    return reinterpret_cast<const GetGroupMemberListReq*>(
               &_GetGroupMemberListReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(GetGroupMemberListReq& a, GetGroupMemberListReq& b) {
    a.Swap(&b);
  }
  inline void Swap(GetGroupMemberListReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetGroupMemberListReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetGroupMemberListReq* New() const final {
    return CreateMaybeMessage<GetGroupMemberListReq>(nullptr);
  }

  GetGroupMemberListReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetGroupMemberListReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetGroupMemberListReq& from);
  void MergeFrom(const GetGroupMemberListReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetGroupMemberListReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onebot.GetGroupMemberListReq";
  }
  protected:
  explicit GetGroupMemberListReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupIdFieldNumber = 1,
  };
  // int64 group_id = 1;
  void clear_group_id();
  ::PROTOBUF_NAMESPACE_ID::int64 group_id() const;
  void set_group_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_group_id() const;
  void _internal_set_group_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:onebot.GetGroupMemberListReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 group_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class GetGroupMemberListResp_GroupMember PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onebot.GetGroupMemberListResp.GroupMember) */ {
 public:
  inline GetGroupMemberListResp_GroupMember() : GetGroupMemberListResp_GroupMember(nullptr) {};
  virtual ~GetGroupMemberListResp_GroupMember();

  GetGroupMemberListResp_GroupMember(const GetGroupMemberListResp_GroupMember& from);
  GetGroupMemberListResp_GroupMember(GetGroupMemberListResp_GroupMember&& from) noexcept
    : GetGroupMemberListResp_GroupMember() {
    *this = ::std::move(from);
  }

  inline GetGroupMemberListResp_GroupMember& operator=(const GetGroupMemberListResp_GroupMember& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetGroupMemberListResp_GroupMember& operator=(GetGroupMemberListResp_GroupMember&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetGroupMemberListResp_GroupMember& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetGroupMemberListResp_GroupMember* internal_default_instance() {
    return reinterpret_cast<const GetGroupMemberListResp_GroupMember*>(
               &_GetGroupMemberListResp_GroupMember_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(GetGroupMemberListResp_GroupMember& a, GetGroupMemberListResp_GroupMember& b) {
    a.Swap(&b);
  }
  inline void Swap(GetGroupMemberListResp_GroupMember* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetGroupMemberListResp_GroupMember* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetGroupMemberListResp_GroupMember* New() const final {
    return CreateMaybeMessage<GetGroupMemberListResp_GroupMember>(nullptr);
  }

  GetGroupMemberListResp_GroupMember* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetGroupMemberListResp_GroupMember>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetGroupMemberListResp_GroupMember& from);
  void MergeFrom(const GetGroupMemberListResp_GroupMember& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetGroupMemberListResp_GroupMember* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onebot.GetGroupMemberListResp.GroupMember";
  }
  protected:
  explicit GetGroupMemberListResp_GroupMember(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNicknameFieldNumber = 3,
    kCardFieldNumber = 4,
    kSexFieldNumber = 5,
    kAreaFieldNumber = 7,
    kLevelFieldNumber = 10,
    kRoleFieldNumber = 11,
    kTitleFieldNumber = 13,
    kGroupIdFieldNumber = 1,
    kUserIdFieldNumber = 2,
    kAgeFieldNumber = 6,
    kJoinTimeFieldNumber = 8,
    kLastSentTimeFieldNumber = 9,
    kUnfriendlyFieldNumber = 12,
    kCardChangeableFieldNumber = 15,
    kTitleExpireTimeFieldNumber = 14,
  };
  // string nickname = 3;
  void clear_nickname();
  const std::string& nickname() const;
  void set_nickname(const std::string& value);
  void set_nickname(std::string&& value);
  void set_nickname(const char* value);
  void set_nickname(const char* value, size_t size);
  std::string* mutable_nickname();
  std::string* release_nickname();
  void set_allocated_nickname(std::string* nickname);
  private:
  const std::string& _internal_nickname() const;
  void _internal_set_nickname(const std::string& value);
  std::string* _internal_mutable_nickname();
  public:

  // string card = 4;
  void clear_card();
  const std::string& card() const;
  void set_card(const std::string& value);
  void set_card(std::string&& value);
  void set_card(const char* value);
  void set_card(const char* value, size_t size);
  std::string* mutable_card();
  std::string* release_card();
  void set_allocated_card(std::string* card);
  private:
  const std::string& _internal_card() const;
  void _internal_set_card(const std::string& value);
  std::string* _internal_mutable_card();
  public:

  // string sex = 5;
  void clear_sex();
  const std::string& sex() const;
  void set_sex(const std::string& value);
  void set_sex(std::string&& value);
  void set_sex(const char* value);
  void set_sex(const char* value, size_t size);
  std::string* mutable_sex();
  std::string* release_sex();
  void set_allocated_sex(std::string* sex);
  private:
  const std::string& _internal_sex() const;
  void _internal_set_sex(const std::string& value);
  std::string* _internal_mutable_sex();
  public:

  // string area = 7;
  void clear_area();
  const std::string& area() const;
  void set_area(const std::string& value);
  void set_area(std::string&& value);
  void set_area(const char* value);
  void set_area(const char* value, size_t size);
  std::string* mutable_area();
  std::string* release_area();
  void set_allocated_area(std::string* area);
  private:
  const std::string& _internal_area() const;
  void _internal_set_area(const std::string& value);
  std::string* _internal_mutable_area();
  public:

  // string level = 10;
  void clear_level();
  const std::string& level() const;
  void set_level(const std::string& value);
  void set_level(std::string&& value);
  void set_level(const char* value);
  void set_level(const char* value, size_t size);
  std::string* mutable_level();
  std::string* release_level();
  void set_allocated_level(std::string* level);
  private:
  const std::string& _internal_level() const;
  void _internal_set_level(const std::string& value);
  std::string* _internal_mutable_level();
  public:

  // string role = 11;
  void clear_role();
  const std::string& role() const;
  void set_role(const std::string& value);
  void set_role(std::string&& value);
  void set_role(const char* value);
  void set_role(const char* value, size_t size);
  std::string* mutable_role();
  std::string* release_role();
  void set_allocated_role(std::string* role);
  private:
  const std::string& _internal_role() const;
  void _internal_set_role(const std::string& value);
  std::string* _internal_mutable_role();
  public:

  // string title = 13;
  void clear_title();
  const std::string& title() const;
  void set_title(const std::string& value);
  void set_title(std::string&& value);
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  std::string* mutable_title();
  std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // int64 group_id = 1;
  void clear_group_id();
  ::PROTOBUF_NAMESPACE_ID::int64 group_id() const;
  void set_group_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_group_id() const;
  void _internal_set_group_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 user_id = 2;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::int64 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 age = 6;
  void clear_age();
  ::PROTOBUF_NAMESPACE_ID::int32 age() const;
  void set_age(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_age() const;
  void _internal_set_age(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 join_time = 8;
  void clear_join_time();
  ::PROTOBUF_NAMESPACE_ID::int32 join_time() const;
  void set_join_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_join_time() const;
  void _internal_set_join_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 last_sent_time = 9;
  void clear_last_sent_time();
  ::PROTOBUF_NAMESPACE_ID::int32 last_sent_time() const;
  void set_last_sent_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_last_sent_time() const;
  void _internal_set_last_sent_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool unfriendly = 12;
  void clear_unfriendly();
  bool unfriendly() const;
  void set_unfriendly(bool value);
  private:
  bool _internal_unfriendly() const;
  void _internal_set_unfriendly(bool value);
  public:

  // bool card_changeable = 15;
  void clear_card_changeable();
  bool card_changeable() const;
  void set_card_changeable(bool value);
  private:
  bool _internal_card_changeable() const;
  void _internal_set_card_changeable(bool value);
  public:

  // int32 title_expire_time = 14;
  void clear_title_expire_time();
  ::PROTOBUF_NAMESPACE_ID::int32 title_expire_time() const;
  void set_title_expire_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_title_expire_time() const;
  void _internal_set_title_expire_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:onebot.GetGroupMemberListResp.GroupMember)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nickname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr card_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sex_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr area_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr level_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr role_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::PROTOBUF_NAMESPACE_ID::int64 group_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 user_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 age_;
  ::PROTOBUF_NAMESPACE_ID::int32 join_time_;
  ::PROTOBUF_NAMESPACE_ID::int32 last_sent_time_;
  bool unfriendly_;
  bool card_changeable_;
  ::PROTOBUF_NAMESPACE_ID::int32 title_expire_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class GetGroupMemberListResp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onebot.GetGroupMemberListResp) */ {
 public:
  inline GetGroupMemberListResp() : GetGroupMemberListResp(nullptr) {};
  virtual ~GetGroupMemberListResp();

  GetGroupMemberListResp(const GetGroupMemberListResp& from);
  GetGroupMemberListResp(GetGroupMemberListResp&& from) noexcept
    : GetGroupMemberListResp() {
    *this = ::std::move(from);
  }

  inline GetGroupMemberListResp& operator=(const GetGroupMemberListResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetGroupMemberListResp& operator=(GetGroupMemberListResp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetGroupMemberListResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetGroupMemberListResp* internal_default_instance() {
    return reinterpret_cast<const GetGroupMemberListResp*>(
               &_GetGroupMemberListResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(GetGroupMemberListResp& a, GetGroupMemberListResp& b) {
    a.Swap(&b);
  }
  inline void Swap(GetGroupMemberListResp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetGroupMemberListResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetGroupMemberListResp* New() const final {
    return CreateMaybeMessage<GetGroupMemberListResp>(nullptr);
  }

  GetGroupMemberListResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetGroupMemberListResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetGroupMemberListResp& from);
  void MergeFrom(const GetGroupMemberListResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetGroupMemberListResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onebot.GetGroupMemberListResp";
  }
  protected:
  explicit GetGroupMemberListResp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef GetGroupMemberListResp_GroupMember GroupMember;

  // accessors -------------------------------------------------------

  enum : int {
    kGroupMemberListFieldNumber = 1,
  };
  // repeated .onebot.GetGroupMemberListResp.GroupMember group_member_list = 1;
  int group_member_list_size() const;
  private:
  int _internal_group_member_list_size() const;
  public:
  void clear_group_member_list();
  ::onebot::GetGroupMemberListResp_GroupMember* mutable_group_member_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onebot::GetGroupMemberListResp_GroupMember >*
      mutable_group_member_list();
  private:
  const ::onebot::GetGroupMemberListResp_GroupMember& _internal_group_member_list(int index) const;
  ::onebot::GetGroupMemberListResp_GroupMember* _internal_add_group_member_list();
  public:
  const ::onebot::GetGroupMemberListResp_GroupMember& group_member_list(int index) const;
  ::onebot::GetGroupMemberListResp_GroupMember* add_group_member_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onebot::GetGroupMemberListResp_GroupMember >&
      group_member_list() const;

  // @@protoc_insertion_point(class_scope:onebot.GetGroupMemberListResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onebot::GetGroupMemberListResp_GroupMember > group_member_list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class GetGroupHonorInfoReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onebot.GetGroupHonorInfoReq) */ {
 public:
  inline GetGroupHonorInfoReq() : GetGroupHonorInfoReq(nullptr) {};
  virtual ~GetGroupHonorInfoReq();

  GetGroupHonorInfoReq(const GetGroupHonorInfoReq& from);
  GetGroupHonorInfoReq(GetGroupHonorInfoReq&& from) noexcept
    : GetGroupHonorInfoReq() {
    *this = ::std::move(from);
  }

  inline GetGroupHonorInfoReq& operator=(const GetGroupHonorInfoReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetGroupHonorInfoReq& operator=(GetGroupHonorInfoReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetGroupHonorInfoReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetGroupHonorInfoReq* internal_default_instance() {
    return reinterpret_cast<const GetGroupHonorInfoReq*>(
               &_GetGroupHonorInfoReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(GetGroupHonorInfoReq& a, GetGroupHonorInfoReq& b) {
    a.Swap(&b);
  }
  inline void Swap(GetGroupHonorInfoReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetGroupHonorInfoReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetGroupHonorInfoReq* New() const final {
    return CreateMaybeMessage<GetGroupHonorInfoReq>(nullptr);
  }

  GetGroupHonorInfoReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetGroupHonorInfoReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetGroupHonorInfoReq& from);
  void MergeFrom(const GetGroupHonorInfoReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetGroupHonorInfoReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onebot.GetGroupHonorInfoReq";
  }
  protected:
  explicit GetGroupHonorInfoReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 2,
    kGroupIdFieldNumber = 1,
  };
  // string type = 2;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // int64 group_id = 1;
  void clear_group_id();
  ::PROTOBUF_NAMESPACE_ID::int64 group_id() const;
  void set_group_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_group_id() const;
  void _internal_set_group_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:onebot.GetGroupHonorInfoReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::int64 group_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class GetGroupHonorInfoResp_CurrentTalkative PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onebot.GetGroupHonorInfoResp.CurrentTalkative) */ {
 public:
  inline GetGroupHonorInfoResp_CurrentTalkative() : GetGroupHonorInfoResp_CurrentTalkative(nullptr) {};
  virtual ~GetGroupHonorInfoResp_CurrentTalkative();

  GetGroupHonorInfoResp_CurrentTalkative(const GetGroupHonorInfoResp_CurrentTalkative& from);
  GetGroupHonorInfoResp_CurrentTalkative(GetGroupHonorInfoResp_CurrentTalkative&& from) noexcept
    : GetGroupHonorInfoResp_CurrentTalkative() {
    *this = ::std::move(from);
  }

  inline GetGroupHonorInfoResp_CurrentTalkative& operator=(const GetGroupHonorInfoResp_CurrentTalkative& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetGroupHonorInfoResp_CurrentTalkative& operator=(GetGroupHonorInfoResp_CurrentTalkative&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetGroupHonorInfoResp_CurrentTalkative& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetGroupHonorInfoResp_CurrentTalkative* internal_default_instance() {
    return reinterpret_cast<const GetGroupHonorInfoResp_CurrentTalkative*>(
               &_GetGroupHonorInfoResp_CurrentTalkative_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(GetGroupHonorInfoResp_CurrentTalkative& a, GetGroupHonorInfoResp_CurrentTalkative& b) {
    a.Swap(&b);
  }
  inline void Swap(GetGroupHonorInfoResp_CurrentTalkative* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetGroupHonorInfoResp_CurrentTalkative* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetGroupHonorInfoResp_CurrentTalkative* New() const final {
    return CreateMaybeMessage<GetGroupHonorInfoResp_CurrentTalkative>(nullptr);
  }

  GetGroupHonorInfoResp_CurrentTalkative* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetGroupHonorInfoResp_CurrentTalkative>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetGroupHonorInfoResp_CurrentTalkative& from);
  void MergeFrom(const GetGroupHonorInfoResp_CurrentTalkative& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetGroupHonorInfoResp_CurrentTalkative* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onebot.GetGroupHonorInfoResp.CurrentTalkative";
  }
  protected:
  explicit GetGroupHonorInfoResp_CurrentTalkative(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNicknameFieldNumber = 2,
    kAvatarFieldNumber = 3,
    kUserIdFieldNumber = 1,
    kDayCountFieldNumber = 4,
  };
  // string nickname = 2;
  void clear_nickname();
  const std::string& nickname() const;
  void set_nickname(const std::string& value);
  void set_nickname(std::string&& value);
  void set_nickname(const char* value);
  void set_nickname(const char* value, size_t size);
  std::string* mutable_nickname();
  std::string* release_nickname();
  void set_allocated_nickname(std::string* nickname);
  private:
  const std::string& _internal_nickname() const;
  void _internal_set_nickname(const std::string& value);
  std::string* _internal_mutable_nickname();
  public:

  // string avatar = 3;
  void clear_avatar();
  const std::string& avatar() const;
  void set_avatar(const std::string& value);
  void set_avatar(std::string&& value);
  void set_avatar(const char* value);
  void set_avatar(const char* value, size_t size);
  std::string* mutable_avatar();
  std::string* release_avatar();
  void set_allocated_avatar(std::string* avatar);
  private:
  const std::string& _internal_avatar() const;
  void _internal_set_avatar(const std::string& value);
  std::string* _internal_mutable_avatar();
  public:

  // int64 user_id = 1;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::int64 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 day_count = 4;
  void clear_day_count();
  ::PROTOBUF_NAMESPACE_ID::int32 day_count() const;
  void set_day_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_day_count() const;
  void _internal_set_day_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:onebot.GetGroupHonorInfoResp.CurrentTalkative)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nickname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr avatar_;
  ::PROTOBUF_NAMESPACE_ID::int64 user_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 day_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class GetGroupHonorInfoResp_Honor PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onebot.GetGroupHonorInfoResp.Honor) */ {
 public:
  inline GetGroupHonorInfoResp_Honor() : GetGroupHonorInfoResp_Honor(nullptr) {};
  virtual ~GetGroupHonorInfoResp_Honor();

  GetGroupHonorInfoResp_Honor(const GetGroupHonorInfoResp_Honor& from);
  GetGroupHonorInfoResp_Honor(GetGroupHonorInfoResp_Honor&& from) noexcept
    : GetGroupHonorInfoResp_Honor() {
    *this = ::std::move(from);
  }

  inline GetGroupHonorInfoResp_Honor& operator=(const GetGroupHonorInfoResp_Honor& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetGroupHonorInfoResp_Honor& operator=(GetGroupHonorInfoResp_Honor&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetGroupHonorInfoResp_Honor& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetGroupHonorInfoResp_Honor* internal_default_instance() {
    return reinterpret_cast<const GetGroupHonorInfoResp_Honor*>(
               &_GetGroupHonorInfoResp_Honor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(GetGroupHonorInfoResp_Honor& a, GetGroupHonorInfoResp_Honor& b) {
    a.Swap(&b);
  }
  inline void Swap(GetGroupHonorInfoResp_Honor* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetGroupHonorInfoResp_Honor* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetGroupHonorInfoResp_Honor* New() const final {
    return CreateMaybeMessage<GetGroupHonorInfoResp_Honor>(nullptr);
  }

  GetGroupHonorInfoResp_Honor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetGroupHonorInfoResp_Honor>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetGroupHonorInfoResp_Honor& from);
  void MergeFrom(const GetGroupHonorInfoResp_Honor& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetGroupHonorInfoResp_Honor* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onebot.GetGroupHonorInfoResp.Honor";
  }
  protected:
  explicit GetGroupHonorInfoResp_Honor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNicknameFieldNumber = 2,
    kAvatarFieldNumber = 3,
    kDescriptionFieldNumber = 4,
    kUserIdFieldNumber = 1,
  };
  // string nickname = 2;
  void clear_nickname();
  const std::string& nickname() const;
  void set_nickname(const std::string& value);
  void set_nickname(std::string&& value);
  void set_nickname(const char* value);
  void set_nickname(const char* value, size_t size);
  std::string* mutable_nickname();
  std::string* release_nickname();
  void set_allocated_nickname(std::string* nickname);
  private:
  const std::string& _internal_nickname() const;
  void _internal_set_nickname(const std::string& value);
  std::string* _internal_mutable_nickname();
  public:

  // string avatar = 3;
  void clear_avatar();
  const std::string& avatar() const;
  void set_avatar(const std::string& value);
  void set_avatar(std::string&& value);
  void set_avatar(const char* value);
  void set_avatar(const char* value, size_t size);
  std::string* mutable_avatar();
  std::string* release_avatar();
  void set_allocated_avatar(std::string* avatar);
  private:
  const std::string& _internal_avatar() const;
  void _internal_set_avatar(const std::string& value);
  std::string* _internal_mutable_avatar();
  public:

  // string description = 4;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // int64 user_id = 1;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::int64 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:onebot.GetGroupHonorInfoResp.Honor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nickname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr avatar_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::int64 user_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class GetGroupHonorInfoResp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onebot.GetGroupHonorInfoResp) */ {
 public:
  inline GetGroupHonorInfoResp() : GetGroupHonorInfoResp(nullptr) {};
  virtual ~GetGroupHonorInfoResp();

  GetGroupHonorInfoResp(const GetGroupHonorInfoResp& from);
  GetGroupHonorInfoResp(GetGroupHonorInfoResp&& from) noexcept
    : GetGroupHonorInfoResp() {
    *this = ::std::move(from);
  }

  inline GetGroupHonorInfoResp& operator=(const GetGroupHonorInfoResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetGroupHonorInfoResp& operator=(GetGroupHonorInfoResp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetGroupHonorInfoResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetGroupHonorInfoResp* internal_default_instance() {
    return reinterpret_cast<const GetGroupHonorInfoResp*>(
               &_GetGroupHonorInfoResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(GetGroupHonorInfoResp& a, GetGroupHonorInfoResp& b) {
    a.Swap(&b);
  }
  inline void Swap(GetGroupHonorInfoResp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetGroupHonorInfoResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetGroupHonorInfoResp* New() const final {
    return CreateMaybeMessage<GetGroupHonorInfoResp>(nullptr);
  }

  GetGroupHonorInfoResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetGroupHonorInfoResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetGroupHonorInfoResp& from);
  void MergeFrom(const GetGroupHonorInfoResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetGroupHonorInfoResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onebot.GetGroupHonorInfoResp";
  }
  protected:
  explicit GetGroupHonorInfoResp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef GetGroupHonorInfoResp_CurrentTalkative CurrentTalkative;
  typedef GetGroupHonorInfoResp_Honor Honor;

  // accessors -------------------------------------------------------

  enum : int {
    kTalkativeListFieldNumber = 3,
    kPerformerListFieldNumber = 4,
    kLegendListFieldNumber = 5,
    kStrongNewbieListFieldNumber = 6,
    kEmotionListFieldNumber = 7,
    kCurrentTalkativeFieldNumber = 2,
    kGroupIdFieldNumber = 1,
  };
  // repeated .onebot.GetGroupHonorInfoResp.Honor talkative_list = 3;
  int talkative_list_size() const;
  private:
  int _internal_talkative_list_size() const;
  public:
  void clear_talkative_list();
  ::onebot::GetGroupHonorInfoResp_Honor* mutable_talkative_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onebot::GetGroupHonorInfoResp_Honor >*
      mutable_talkative_list();
  private:
  const ::onebot::GetGroupHonorInfoResp_Honor& _internal_talkative_list(int index) const;
  ::onebot::GetGroupHonorInfoResp_Honor* _internal_add_talkative_list();
  public:
  const ::onebot::GetGroupHonorInfoResp_Honor& talkative_list(int index) const;
  ::onebot::GetGroupHonorInfoResp_Honor* add_talkative_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onebot::GetGroupHonorInfoResp_Honor >&
      talkative_list() const;

  // repeated .onebot.GetGroupHonorInfoResp.Honor performer_list = 4;
  int performer_list_size() const;
  private:
  int _internal_performer_list_size() const;
  public:
  void clear_performer_list();
  ::onebot::GetGroupHonorInfoResp_Honor* mutable_performer_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onebot::GetGroupHonorInfoResp_Honor >*
      mutable_performer_list();
  private:
  const ::onebot::GetGroupHonorInfoResp_Honor& _internal_performer_list(int index) const;
  ::onebot::GetGroupHonorInfoResp_Honor* _internal_add_performer_list();
  public:
  const ::onebot::GetGroupHonorInfoResp_Honor& performer_list(int index) const;
  ::onebot::GetGroupHonorInfoResp_Honor* add_performer_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onebot::GetGroupHonorInfoResp_Honor >&
      performer_list() const;

  // repeated .onebot.GetGroupHonorInfoResp.Honor legend_list = 5;
  int legend_list_size() const;
  private:
  int _internal_legend_list_size() const;
  public:
  void clear_legend_list();
  ::onebot::GetGroupHonorInfoResp_Honor* mutable_legend_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onebot::GetGroupHonorInfoResp_Honor >*
      mutable_legend_list();
  private:
  const ::onebot::GetGroupHonorInfoResp_Honor& _internal_legend_list(int index) const;
  ::onebot::GetGroupHonorInfoResp_Honor* _internal_add_legend_list();
  public:
  const ::onebot::GetGroupHonorInfoResp_Honor& legend_list(int index) const;
  ::onebot::GetGroupHonorInfoResp_Honor* add_legend_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onebot::GetGroupHonorInfoResp_Honor >&
      legend_list() const;

  // repeated .onebot.GetGroupHonorInfoResp.Honor strong_newbie_list = 6;
  int strong_newbie_list_size() const;
  private:
  int _internal_strong_newbie_list_size() const;
  public:
  void clear_strong_newbie_list();
  ::onebot::GetGroupHonorInfoResp_Honor* mutable_strong_newbie_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onebot::GetGroupHonorInfoResp_Honor >*
      mutable_strong_newbie_list();
  private:
  const ::onebot::GetGroupHonorInfoResp_Honor& _internal_strong_newbie_list(int index) const;
  ::onebot::GetGroupHonorInfoResp_Honor* _internal_add_strong_newbie_list();
  public:
  const ::onebot::GetGroupHonorInfoResp_Honor& strong_newbie_list(int index) const;
  ::onebot::GetGroupHonorInfoResp_Honor* add_strong_newbie_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onebot::GetGroupHonorInfoResp_Honor >&
      strong_newbie_list() const;

  // repeated .onebot.GetGroupHonorInfoResp.Honor emotion_list = 7;
  int emotion_list_size() const;
  private:
  int _internal_emotion_list_size() const;
  public:
  void clear_emotion_list();
  ::onebot::GetGroupHonorInfoResp_Honor* mutable_emotion_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onebot::GetGroupHonorInfoResp_Honor >*
      mutable_emotion_list();
  private:
  const ::onebot::GetGroupHonorInfoResp_Honor& _internal_emotion_list(int index) const;
  ::onebot::GetGroupHonorInfoResp_Honor* _internal_add_emotion_list();
  public:
  const ::onebot::GetGroupHonorInfoResp_Honor& emotion_list(int index) const;
  ::onebot::GetGroupHonorInfoResp_Honor* add_emotion_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onebot::GetGroupHonorInfoResp_Honor >&
      emotion_list() const;

  // .onebot.GetGroupHonorInfoResp.CurrentTalkative current_talkative = 2;
  bool has_current_talkative() const;
  private:
  bool _internal_has_current_talkative() const;
  public:
  void clear_current_talkative();
  const ::onebot::GetGroupHonorInfoResp_CurrentTalkative& current_talkative() const;
  ::onebot::GetGroupHonorInfoResp_CurrentTalkative* release_current_talkative();
  ::onebot::GetGroupHonorInfoResp_CurrentTalkative* mutable_current_talkative();
  void set_allocated_current_talkative(::onebot::GetGroupHonorInfoResp_CurrentTalkative* current_talkative);
  private:
  const ::onebot::GetGroupHonorInfoResp_CurrentTalkative& _internal_current_talkative() const;
  ::onebot::GetGroupHonorInfoResp_CurrentTalkative* _internal_mutable_current_talkative();
  public:
  void unsafe_arena_set_allocated_current_talkative(
      ::onebot::GetGroupHonorInfoResp_CurrentTalkative* current_talkative);
  ::onebot::GetGroupHonorInfoResp_CurrentTalkative* unsafe_arena_release_current_talkative();

  // int64 group_id = 1;
  void clear_group_id();
  ::PROTOBUF_NAMESPACE_ID::int64 group_id() const;
  void set_group_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_group_id() const;
  void _internal_set_group_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:onebot.GetGroupHonorInfoResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onebot::GetGroupHonorInfoResp_Honor > talkative_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onebot::GetGroupHonorInfoResp_Honor > performer_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onebot::GetGroupHonorInfoResp_Honor > legend_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onebot::GetGroupHonorInfoResp_Honor > strong_newbie_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onebot::GetGroupHonorInfoResp_Honor > emotion_list_;
  ::onebot::GetGroupHonorInfoResp_CurrentTalkative* current_talkative_;
  ::PROTOBUF_NAMESPACE_ID::int64 group_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class GetCookiesReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onebot.GetCookiesReq) */ {
 public:
  inline GetCookiesReq() : GetCookiesReq(nullptr) {};
  virtual ~GetCookiesReq();

  GetCookiesReq(const GetCookiesReq& from);
  GetCookiesReq(GetCookiesReq&& from) noexcept
    : GetCookiesReq() {
    *this = ::std::move(from);
  }

  inline GetCookiesReq& operator=(const GetCookiesReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetCookiesReq& operator=(GetCookiesReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetCookiesReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetCookiesReq* internal_default_instance() {
    return reinterpret_cast<const GetCookiesReq*>(
               &_GetCookiesReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  friend void swap(GetCookiesReq& a, GetCookiesReq& b) {
    a.Swap(&b);
  }
  inline void Swap(GetCookiesReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetCookiesReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetCookiesReq* New() const final {
    return CreateMaybeMessage<GetCookiesReq>(nullptr);
  }

  GetCookiesReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetCookiesReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetCookiesReq& from);
  void MergeFrom(const GetCookiesReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetCookiesReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onebot.GetCookiesReq";
  }
  protected:
  explicit GetCookiesReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDomainFieldNumber = 1,
  };
  // string domain = 1;
  void clear_domain();
  const std::string& domain() const;
  void set_domain(const std::string& value);
  void set_domain(std::string&& value);
  void set_domain(const char* value);
  void set_domain(const char* value, size_t size);
  std::string* mutable_domain();
  std::string* release_domain();
  void set_allocated_domain(std::string* domain);
  private:
  const std::string& _internal_domain() const;
  void _internal_set_domain(const std::string& value);
  std::string* _internal_mutable_domain();
  public:

  // @@protoc_insertion_point(class_scope:onebot.GetCookiesReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr domain_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class GetCookiesResp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onebot.GetCookiesResp) */ {
 public:
  inline GetCookiesResp() : GetCookiesResp(nullptr) {};
  virtual ~GetCookiesResp();

  GetCookiesResp(const GetCookiesResp& from);
  GetCookiesResp(GetCookiesResp&& from) noexcept
    : GetCookiesResp() {
    *this = ::std::move(from);
  }

  inline GetCookiesResp& operator=(const GetCookiesResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetCookiesResp& operator=(GetCookiesResp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetCookiesResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetCookiesResp* internal_default_instance() {
    return reinterpret_cast<const GetCookiesResp*>(
               &_GetCookiesResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  friend void swap(GetCookiesResp& a, GetCookiesResp& b) {
    a.Swap(&b);
  }
  inline void Swap(GetCookiesResp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetCookiesResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetCookiesResp* New() const final {
    return CreateMaybeMessage<GetCookiesResp>(nullptr);
  }

  GetCookiesResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetCookiesResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetCookiesResp& from);
  void MergeFrom(const GetCookiesResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetCookiesResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onebot.GetCookiesResp";
  }
  protected:
  explicit GetCookiesResp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCookiesFieldNumber = 1,
  };
  // string cookies = 1;
  void clear_cookies();
  const std::string& cookies() const;
  void set_cookies(const std::string& value);
  void set_cookies(std::string&& value);
  void set_cookies(const char* value);
  void set_cookies(const char* value, size_t size);
  std::string* mutable_cookies();
  std::string* release_cookies();
  void set_allocated_cookies(std::string* cookies);
  private:
  const std::string& _internal_cookies() const;
  void _internal_set_cookies(const std::string& value);
  std::string* _internal_mutable_cookies();
  public:

  // @@protoc_insertion_point(class_scope:onebot.GetCookiesResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cookies_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class GetCsrfTokenReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onebot.GetCsrfTokenReq) */ {
 public:
  inline GetCsrfTokenReq() : GetCsrfTokenReq(nullptr) {};
  virtual ~GetCsrfTokenReq();

  GetCsrfTokenReq(const GetCsrfTokenReq& from);
  GetCsrfTokenReq(GetCsrfTokenReq&& from) noexcept
    : GetCsrfTokenReq() {
    *this = ::std::move(from);
  }

  inline GetCsrfTokenReq& operator=(const GetCsrfTokenReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetCsrfTokenReq& operator=(GetCsrfTokenReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetCsrfTokenReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetCsrfTokenReq* internal_default_instance() {
    return reinterpret_cast<const GetCsrfTokenReq*>(
               &_GetCsrfTokenReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  friend void swap(GetCsrfTokenReq& a, GetCsrfTokenReq& b) {
    a.Swap(&b);
  }
  inline void Swap(GetCsrfTokenReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetCsrfTokenReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetCsrfTokenReq* New() const final {
    return CreateMaybeMessage<GetCsrfTokenReq>(nullptr);
  }

  GetCsrfTokenReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetCsrfTokenReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetCsrfTokenReq& from);
  void MergeFrom(const GetCsrfTokenReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetCsrfTokenReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onebot.GetCsrfTokenReq";
  }
  protected:
  explicit GetCsrfTokenReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:onebot.GetCsrfTokenReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class GetCsrfTokenResp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onebot.GetCsrfTokenResp) */ {
 public:
  inline GetCsrfTokenResp() : GetCsrfTokenResp(nullptr) {};
  virtual ~GetCsrfTokenResp();

  GetCsrfTokenResp(const GetCsrfTokenResp& from);
  GetCsrfTokenResp(GetCsrfTokenResp&& from) noexcept
    : GetCsrfTokenResp() {
    *this = ::std::move(from);
  }

  inline GetCsrfTokenResp& operator=(const GetCsrfTokenResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetCsrfTokenResp& operator=(GetCsrfTokenResp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetCsrfTokenResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetCsrfTokenResp* internal_default_instance() {
    return reinterpret_cast<const GetCsrfTokenResp*>(
               &_GetCsrfTokenResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    62;

  friend void swap(GetCsrfTokenResp& a, GetCsrfTokenResp& b) {
    a.Swap(&b);
  }
  inline void Swap(GetCsrfTokenResp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetCsrfTokenResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetCsrfTokenResp* New() const final {
    return CreateMaybeMessage<GetCsrfTokenResp>(nullptr);
  }

  GetCsrfTokenResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetCsrfTokenResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetCsrfTokenResp& from);
  void MergeFrom(const GetCsrfTokenResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetCsrfTokenResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onebot.GetCsrfTokenResp";
  }
  protected:
  explicit GetCsrfTokenResp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
  };
  // int32 token = 1;
  void clear_token();
  ::PROTOBUF_NAMESPACE_ID::int32 token() const;
  void set_token(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_token() const;
  void _internal_set_token(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:onebot.GetCsrfTokenResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class GetCredentialsReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onebot.GetCredentialsReq) */ {
 public:
  inline GetCredentialsReq() : GetCredentialsReq(nullptr) {};
  virtual ~GetCredentialsReq();

  GetCredentialsReq(const GetCredentialsReq& from);
  GetCredentialsReq(GetCredentialsReq&& from) noexcept
    : GetCredentialsReq() {
    *this = ::std::move(from);
  }

  inline GetCredentialsReq& operator=(const GetCredentialsReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetCredentialsReq& operator=(GetCredentialsReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetCredentialsReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetCredentialsReq* internal_default_instance() {
    return reinterpret_cast<const GetCredentialsReq*>(
               &_GetCredentialsReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    63;

  friend void swap(GetCredentialsReq& a, GetCredentialsReq& b) {
    a.Swap(&b);
  }
  inline void Swap(GetCredentialsReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetCredentialsReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetCredentialsReq* New() const final {
    return CreateMaybeMessage<GetCredentialsReq>(nullptr);
  }

  GetCredentialsReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetCredentialsReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetCredentialsReq& from);
  void MergeFrom(const GetCredentialsReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetCredentialsReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onebot.GetCredentialsReq";
  }
  protected:
  explicit GetCredentialsReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDomainFieldNumber = 1,
  };
  // string domain = 1;
  void clear_domain();
  const std::string& domain() const;
  void set_domain(const std::string& value);
  void set_domain(std::string&& value);
  void set_domain(const char* value);
  void set_domain(const char* value, size_t size);
  std::string* mutable_domain();
  std::string* release_domain();
  void set_allocated_domain(std::string* domain);
  private:
  const std::string& _internal_domain() const;
  void _internal_set_domain(const std::string& value);
  std::string* _internal_mutable_domain();
  public:

  // @@protoc_insertion_point(class_scope:onebot.GetCredentialsReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr domain_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class GetCredentialsResp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onebot.GetCredentialsResp) */ {
 public:
  inline GetCredentialsResp() : GetCredentialsResp(nullptr) {};
  virtual ~GetCredentialsResp();

  GetCredentialsResp(const GetCredentialsResp& from);
  GetCredentialsResp(GetCredentialsResp&& from) noexcept
    : GetCredentialsResp() {
    *this = ::std::move(from);
  }

  inline GetCredentialsResp& operator=(const GetCredentialsResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetCredentialsResp& operator=(GetCredentialsResp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetCredentialsResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetCredentialsResp* internal_default_instance() {
    return reinterpret_cast<const GetCredentialsResp*>(
               &_GetCredentialsResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    64;

  friend void swap(GetCredentialsResp& a, GetCredentialsResp& b) {
    a.Swap(&b);
  }
  inline void Swap(GetCredentialsResp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetCredentialsResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetCredentialsResp* New() const final {
    return CreateMaybeMessage<GetCredentialsResp>(nullptr);
  }

  GetCredentialsResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetCredentialsResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetCredentialsResp& from);
  void MergeFrom(const GetCredentialsResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetCredentialsResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onebot.GetCredentialsResp";
  }
  protected:
  explicit GetCredentialsResp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCookiesFieldNumber = 1,
    kCsrfTokenFieldNumber = 2,
  };
  // string cookies = 1;
  void clear_cookies();
  const std::string& cookies() const;
  void set_cookies(const std::string& value);
  void set_cookies(std::string&& value);
  void set_cookies(const char* value);
  void set_cookies(const char* value, size_t size);
  std::string* mutable_cookies();
  std::string* release_cookies();
  void set_allocated_cookies(std::string* cookies);
  private:
  const std::string& _internal_cookies() const;
  void _internal_set_cookies(const std::string& value);
  std::string* _internal_mutable_cookies();
  public:

  // int32 csrf_token = 2;
  void clear_csrf_token();
  ::PROTOBUF_NAMESPACE_ID::int32 csrf_token() const;
  void set_csrf_token(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_csrf_token() const;
  void _internal_set_csrf_token(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:onebot.GetCredentialsResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cookies_;
  ::PROTOBUF_NAMESPACE_ID::int32 csrf_token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class GetRecordReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onebot.GetRecordReq) */ {
 public:
  inline GetRecordReq() : GetRecordReq(nullptr) {};
  virtual ~GetRecordReq();

  GetRecordReq(const GetRecordReq& from);
  GetRecordReq(GetRecordReq&& from) noexcept
    : GetRecordReq() {
    *this = ::std::move(from);
  }

  inline GetRecordReq& operator=(const GetRecordReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetRecordReq& operator=(GetRecordReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetRecordReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetRecordReq* internal_default_instance() {
    return reinterpret_cast<const GetRecordReq*>(
               &_GetRecordReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    65;

  friend void swap(GetRecordReq& a, GetRecordReq& b) {
    a.Swap(&b);
  }
  inline void Swap(GetRecordReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetRecordReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetRecordReq* New() const final {
    return CreateMaybeMessage<GetRecordReq>(nullptr);
  }

  GetRecordReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetRecordReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetRecordReq& from);
  void MergeFrom(const GetRecordReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetRecordReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onebot.GetRecordReq";
  }
  protected:
  explicit GetRecordReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileFieldNumber = 1,
    kOutFormatFieldNumber = 2,
  };
  // string file = 1;
  void clear_file();
  const std::string& file() const;
  void set_file(const std::string& value);
  void set_file(std::string&& value);
  void set_file(const char* value);
  void set_file(const char* value, size_t size);
  std::string* mutable_file();
  std::string* release_file();
  void set_allocated_file(std::string* file);
  private:
  const std::string& _internal_file() const;
  void _internal_set_file(const std::string& value);
  std::string* _internal_mutable_file();
  public:

  // string out_format = 2;
  void clear_out_format();
  const std::string& out_format() const;
  void set_out_format(const std::string& value);
  void set_out_format(std::string&& value);
  void set_out_format(const char* value);
  void set_out_format(const char* value, size_t size);
  std::string* mutable_out_format();
  std::string* release_out_format();
  void set_allocated_out_format(std::string* out_format);
  private:
  const std::string& _internal_out_format() const;
  void _internal_set_out_format(const std::string& value);
  std::string* _internal_mutable_out_format();
  public:

  // @@protoc_insertion_point(class_scope:onebot.GetRecordReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr out_format_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class GetRecordResp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onebot.GetRecordResp) */ {
 public:
  inline GetRecordResp() : GetRecordResp(nullptr) {};
  virtual ~GetRecordResp();

  GetRecordResp(const GetRecordResp& from);
  GetRecordResp(GetRecordResp&& from) noexcept
    : GetRecordResp() {
    *this = ::std::move(from);
  }

  inline GetRecordResp& operator=(const GetRecordResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetRecordResp& operator=(GetRecordResp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetRecordResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetRecordResp* internal_default_instance() {
    return reinterpret_cast<const GetRecordResp*>(
               &_GetRecordResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    66;

  friend void swap(GetRecordResp& a, GetRecordResp& b) {
    a.Swap(&b);
  }
  inline void Swap(GetRecordResp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetRecordResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetRecordResp* New() const final {
    return CreateMaybeMessage<GetRecordResp>(nullptr);
  }

  GetRecordResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetRecordResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetRecordResp& from);
  void MergeFrom(const GetRecordResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetRecordResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onebot.GetRecordResp";
  }
  protected:
  explicit GetRecordResp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileFieldNumber = 1,
  };
  // string file = 1;
  void clear_file();
  const std::string& file() const;
  void set_file(const std::string& value);
  void set_file(std::string&& value);
  void set_file(const char* value);
  void set_file(const char* value, size_t size);
  std::string* mutable_file();
  std::string* release_file();
  void set_allocated_file(std::string* file);
  private:
  const std::string& _internal_file() const;
  void _internal_set_file(const std::string& value);
  std::string* _internal_mutable_file();
  public:

  // @@protoc_insertion_point(class_scope:onebot.GetRecordResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class GetImageReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onebot.GetImageReq) */ {
 public:
  inline GetImageReq() : GetImageReq(nullptr) {};
  virtual ~GetImageReq();

  GetImageReq(const GetImageReq& from);
  GetImageReq(GetImageReq&& from) noexcept
    : GetImageReq() {
    *this = ::std::move(from);
  }

  inline GetImageReq& operator=(const GetImageReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetImageReq& operator=(GetImageReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetImageReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetImageReq* internal_default_instance() {
    return reinterpret_cast<const GetImageReq*>(
               &_GetImageReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    67;

  friend void swap(GetImageReq& a, GetImageReq& b) {
    a.Swap(&b);
  }
  inline void Swap(GetImageReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetImageReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetImageReq* New() const final {
    return CreateMaybeMessage<GetImageReq>(nullptr);
  }

  GetImageReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetImageReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetImageReq& from);
  void MergeFrom(const GetImageReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetImageReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onebot.GetImageReq";
  }
  protected:
  explicit GetImageReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileFieldNumber = 1,
  };
  // string file = 1;
  void clear_file();
  const std::string& file() const;
  void set_file(const std::string& value);
  void set_file(std::string&& value);
  void set_file(const char* value);
  void set_file(const char* value, size_t size);
  std::string* mutable_file();
  std::string* release_file();
  void set_allocated_file(std::string* file);
  private:
  const std::string& _internal_file() const;
  void _internal_set_file(const std::string& value);
  std::string* _internal_mutable_file();
  public:

  // @@protoc_insertion_point(class_scope:onebot.GetImageReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class GetImageResp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onebot.GetImageResp) */ {
 public:
  inline GetImageResp() : GetImageResp(nullptr) {};
  virtual ~GetImageResp();

  GetImageResp(const GetImageResp& from);
  GetImageResp(GetImageResp&& from) noexcept
    : GetImageResp() {
    *this = ::std::move(from);
  }

  inline GetImageResp& operator=(const GetImageResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetImageResp& operator=(GetImageResp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetImageResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetImageResp* internal_default_instance() {
    return reinterpret_cast<const GetImageResp*>(
               &_GetImageResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    68;

  friend void swap(GetImageResp& a, GetImageResp& b) {
    a.Swap(&b);
  }
  inline void Swap(GetImageResp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetImageResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetImageResp* New() const final {
    return CreateMaybeMessage<GetImageResp>(nullptr);
  }

  GetImageResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetImageResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetImageResp& from);
  void MergeFrom(const GetImageResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetImageResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onebot.GetImageResp";
  }
  protected:
  explicit GetImageResp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileFieldNumber = 1,
  };
  // string file = 1;
  void clear_file();
  const std::string& file() const;
  void set_file(const std::string& value);
  void set_file(std::string&& value);
  void set_file(const char* value);
  void set_file(const char* value, size_t size);
  std::string* mutable_file();
  std::string* release_file();
  void set_allocated_file(std::string* file);
  private:
  const std::string& _internal_file() const;
  void _internal_set_file(const std::string& value);
  std::string* _internal_mutable_file();
  public:

  // @@protoc_insertion_point(class_scope:onebot.GetImageResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class CanSendImageReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onebot.CanSendImageReq) */ {
 public:
  inline CanSendImageReq() : CanSendImageReq(nullptr) {};
  virtual ~CanSendImageReq();

  CanSendImageReq(const CanSendImageReq& from);
  CanSendImageReq(CanSendImageReq&& from) noexcept
    : CanSendImageReq() {
    *this = ::std::move(from);
  }

  inline CanSendImageReq& operator=(const CanSendImageReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline CanSendImageReq& operator=(CanSendImageReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CanSendImageReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CanSendImageReq* internal_default_instance() {
    return reinterpret_cast<const CanSendImageReq*>(
               &_CanSendImageReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    69;

  friend void swap(CanSendImageReq& a, CanSendImageReq& b) {
    a.Swap(&b);
  }
  inline void Swap(CanSendImageReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CanSendImageReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CanSendImageReq* New() const final {
    return CreateMaybeMessage<CanSendImageReq>(nullptr);
  }

  CanSendImageReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CanSendImageReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CanSendImageReq& from);
  void MergeFrom(const CanSendImageReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CanSendImageReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onebot.CanSendImageReq";
  }
  protected:
  explicit CanSendImageReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:onebot.CanSendImageReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class CanSendImageResp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onebot.CanSendImageResp) */ {
 public:
  inline CanSendImageResp() : CanSendImageResp(nullptr) {};
  virtual ~CanSendImageResp();

  CanSendImageResp(const CanSendImageResp& from);
  CanSendImageResp(CanSendImageResp&& from) noexcept
    : CanSendImageResp() {
    *this = ::std::move(from);
  }

  inline CanSendImageResp& operator=(const CanSendImageResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline CanSendImageResp& operator=(CanSendImageResp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CanSendImageResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CanSendImageResp* internal_default_instance() {
    return reinterpret_cast<const CanSendImageResp*>(
               &_CanSendImageResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    70;

  friend void swap(CanSendImageResp& a, CanSendImageResp& b) {
    a.Swap(&b);
  }
  inline void Swap(CanSendImageResp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CanSendImageResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CanSendImageResp* New() const final {
    return CreateMaybeMessage<CanSendImageResp>(nullptr);
  }

  CanSendImageResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CanSendImageResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CanSendImageResp& from);
  void MergeFrom(const CanSendImageResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CanSendImageResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onebot.CanSendImageResp";
  }
  protected:
  explicit CanSendImageResp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kYesFieldNumber = 1,
  };
  // bool yes = 1;
  void clear_yes();
  bool yes() const;
  void set_yes(bool value);
  private:
  bool _internal_yes() const;
  void _internal_set_yes(bool value);
  public:

  // @@protoc_insertion_point(class_scope:onebot.CanSendImageResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool yes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class CanSendRecordReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onebot.CanSendRecordReq) */ {
 public:
  inline CanSendRecordReq() : CanSendRecordReq(nullptr) {};
  virtual ~CanSendRecordReq();

  CanSendRecordReq(const CanSendRecordReq& from);
  CanSendRecordReq(CanSendRecordReq&& from) noexcept
    : CanSendRecordReq() {
    *this = ::std::move(from);
  }

  inline CanSendRecordReq& operator=(const CanSendRecordReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline CanSendRecordReq& operator=(CanSendRecordReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CanSendRecordReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CanSendRecordReq* internal_default_instance() {
    return reinterpret_cast<const CanSendRecordReq*>(
               &_CanSendRecordReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    71;

  friend void swap(CanSendRecordReq& a, CanSendRecordReq& b) {
    a.Swap(&b);
  }
  inline void Swap(CanSendRecordReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CanSendRecordReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CanSendRecordReq* New() const final {
    return CreateMaybeMessage<CanSendRecordReq>(nullptr);
  }

  CanSendRecordReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CanSendRecordReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CanSendRecordReq& from);
  void MergeFrom(const CanSendRecordReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CanSendRecordReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onebot.CanSendRecordReq";
  }
  protected:
  explicit CanSendRecordReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:onebot.CanSendRecordReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class CanSendRecordResp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onebot.CanSendRecordResp) */ {
 public:
  inline CanSendRecordResp() : CanSendRecordResp(nullptr) {};
  virtual ~CanSendRecordResp();

  CanSendRecordResp(const CanSendRecordResp& from);
  CanSendRecordResp(CanSendRecordResp&& from) noexcept
    : CanSendRecordResp() {
    *this = ::std::move(from);
  }

  inline CanSendRecordResp& operator=(const CanSendRecordResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline CanSendRecordResp& operator=(CanSendRecordResp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CanSendRecordResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CanSendRecordResp* internal_default_instance() {
    return reinterpret_cast<const CanSendRecordResp*>(
               &_CanSendRecordResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    72;

  friend void swap(CanSendRecordResp& a, CanSendRecordResp& b) {
    a.Swap(&b);
  }
  inline void Swap(CanSendRecordResp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CanSendRecordResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CanSendRecordResp* New() const final {
    return CreateMaybeMessage<CanSendRecordResp>(nullptr);
  }

  CanSendRecordResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CanSendRecordResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CanSendRecordResp& from);
  void MergeFrom(const CanSendRecordResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CanSendRecordResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onebot.CanSendRecordResp";
  }
  protected:
  explicit CanSendRecordResp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kYesFieldNumber = 1,
  };
  // bool yes = 1;
  void clear_yes();
  bool yes() const;
  void set_yes(bool value);
  private:
  bool _internal_yes() const;
  void _internal_set_yes(bool value);
  public:

  // @@protoc_insertion_point(class_scope:onebot.CanSendRecordResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool yes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class GetStatusReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onebot.GetStatusReq) */ {
 public:
  inline GetStatusReq() : GetStatusReq(nullptr) {};
  virtual ~GetStatusReq();

  GetStatusReq(const GetStatusReq& from);
  GetStatusReq(GetStatusReq&& from) noexcept
    : GetStatusReq() {
    *this = ::std::move(from);
  }

  inline GetStatusReq& operator=(const GetStatusReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetStatusReq& operator=(GetStatusReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetStatusReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetStatusReq* internal_default_instance() {
    return reinterpret_cast<const GetStatusReq*>(
               &_GetStatusReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    73;

  friend void swap(GetStatusReq& a, GetStatusReq& b) {
    a.Swap(&b);
  }
  inline void Swap(GetStatusReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetStatusReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetStatusReq* New() const final {
    return CreateMaybeMessage<GetStatusReq>(nullptr);
  }

  GetStatusReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetStatusReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetStatusReq& from);
  void MergeFrom(const GetStatusReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetStatusReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onebot.GetStatusReq";
  }
  protected:
  explicit GetStatusReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:onebot.GetStatusReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class GetStatusResp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onebot.GetStatusResp) */ {
 public:
  inline GetStatusResp() : GetStatusResp(nullptr) {};
  virtual ~GetStatusResp();

  GetStatusResp(const GetStatusResp& from);
  GetStatusResp(GetStatusResp&& from) noexcept
    : GetStatusResp() {
    *this = ::std::move(from);
  }

  inline GetStatusResp& operator=(const GetStatusResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetStatusResp& operator=(GetStatusResp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetStatusResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetStatusResp* internal_default_instance() {
    return reinterpret_cast<const GetStatusResp*>(
               &_GetStatusResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    74;

  friend void swap(GetStatusResp& a, GetStatusResp& b) {
    a.Swap(&b);
  }
  inline void Swap(GetStatusResp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetStatusResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetStatusResp* New() const final {
    return CreateMaybeMessage<GetStatusResp>(nullptr);
  }

  GetStatusResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetStatusResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetStatusResp& from);
  void MergeFrom(const GetStatusResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetStatusResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onebot.GetStatusResp";
  }
  protected:
  explicit GetStatusResp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOnlineFieldNumber = 1,
    kGoodFieldNumber = 2,
  };
  // bool online = 1;
  void clear_online();
  bool online() const;
  void set_online(bool value);
  private:
  bool _internal_online() const;
  void _internal_set_online(bool value);
  public:

  // bool good = 2;
  void clear_good();
  bool good() const;
  void set_good(bool value);
  private:
  bool _internal_good() const;
  void _internal_set_good(bool value);
  public:

  // @@protoc_insertion_point(class_scope:onebot.GetStatusResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool online_;
  bool good_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class GetVersionInfoReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onebot.GetVersionInfoReq) */ {
 public:
  inline GetVersionInfoReq() : GetVersionInfoReq(nullptr) {};
  virtual ~GetVersionInfoReq();

  GetVersionInfoReq(const GetVersionInfoReq& from);
  GetVersionInfoReq(GetVersionInfoReq&& from) noexcept
    : GetVersionInfoReq() {
    *this = ::std::move(from);
  }

  inline GetVersionInfoReq& operator=(const GetVersionInfoReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetVersionInfoReq& operator=(GetVersionInfoReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetVersionInfoReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetVersionInfoReq* internal_default_instance() {
    return reinterpret_cast<const GetVersionInfoReq*>(
               &_GetVersionInfoReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    75;

  friend void swap(GetVersionInfoReq& a, GetVersionInfoReq& b) {
    a.Swap(&b);
  }
  inline void Swap(GetVersionInfoReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetVersionInfoReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetVersionInfoReq* New() const final {
    return CreateMaybeMessage<GetVersionInfoReq>(nullptr);
  }

  GetVersionInfoReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetVersionInfoReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetVersionInfoReq& from);
  void MergeFrom(const GetVersionInfoReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetVersionInfoReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onebot.GetVersionInfoReq";
  }
  protected:
  explicit GetVersionInfoReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:onebot.GetVersionInfoReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class GetVersionInfoResp_ExtraEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GetVersionInfoResp_ExtraEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GetVersionInfoResp_ExtraEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  GetVersionInfoResp_ExtraEntry_DoNotUse();
  explicit GetVersionInfoResp_ExtraEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const GetVersionInfoResp_ExtraEntry_DoNotUse& other);
  static const GetVersionInfoResp_ExtraEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const GetVersionInfoResp_ExtraEntry_DoNotUse*>(&_GetVersionInfoResp_ExtraEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "onebot.GetVersionInfoResp.ExtraEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "onebot.GetVersionInfoResp.ExtraEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[76];
  }

  public:
};

// -------------------------------------------------------------------

class GetVersionInfoResp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onebot.GetVersionInfoResp) */ {
 public:
  inline GetVersionInfoResp() : GetVersionInfoResp(nullptr) {};
  virtual ~GetVersionInfoResp();

  GetVersionInfoResp(const GetVersionInfoResp& from);
  GetVersionInfoResp(GetVersionInfoResp&& from) noexcept
    : GetVersionInfoResp() {
    *this = ::std::move(from);
  }

  inline GetVersionInfoResp& operator=(const GetVersionInfoResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetVersionInfoResp& operator=(GetVersionInfoResp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetVersionInfoResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetVersionInfoResp* internal_default_instance() {
    return reinterpret_cast<const GetVersionInfoResp*>(
               &_GetVersionInfoResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    77;

  friend void swap(GetVersionInfoResp& a, GetVersionInfoResp& b) {
    a.Swap(&b);
  }
  inline void Swap(GetVersionInfoResp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetVersionInfoResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetVersionInfoResp* New() const final {
    return CreateMaybeMessage<GetVersionInfoResp>(nullptr);
  }

  GetVersionInfoResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetVersionInfoResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetVersionInfoResp& from);
  void MergeFrom(const GetVersionInfoResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetVersionInfoResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onebot.GetVersionInfoResp";
  }
  protected:
  explicit GetVersionInfoResp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kExtraFieldNumber = 4,
    kAppNameFieldNumber = 1,
    kAppVersionFieldNumber = 2,
    kProtocolVersionFieldNumber = 3,
  };
  // map<string, string> extra = 4;
  int extra_size() const;
  private:
  int _internal_extra_size() const;
  public:
  void clear_extra();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_extra() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_extra();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      extra() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_extra();

  // string app_name = 1;
  void clear_app_name();
  const std::string& app_name() const;
  void set_app_name(const std::string& value);
  void set_app_name(std::string&& value);
  void set_app_name(const char* value);
  void set_app_name(const char* value, size_t size);
  std::string* mutable_app_name();
  std::string* release_app_name();
  void set_allocated_app_name(std::string* app_name);
  private:
  const std::string& _internal_app_name() const;
  void _internal_set_app_name(const std::string& value);
  std::string* _internal_mutable_app_name();
  public:

  // string app_version = 2;
  void clear_app_version();
  const std::string& app_version() const;
  void set_app_version(const std::string& value);
  void set_app_version(std::string&& value);
  void set_app_version(const char* value);
  void set_app_version(const char* value, size_t size);
  std::string* mutable_app_version();
  std::string* release_app_version();
  void set_allocated_app_version(std::string* app_version);
  private:
  const std::string& _internal_app_version() const;
  void _internal_set_app_version(const std::string& value);
  std::string* _internal_mutable_app_version();
  public:

  // string protocol_version = 3;
  void clear_protocol_version();
  const std::string& protocol_version() const;
  void set_protocol_version(const std::string& value);
  void set_protocol_version(std::string&& value);
  void set_protocol_version(const char* value);
  void set_protocol_version(const char* value, size_t size);
  std::string* mutable_protocol_version();
  std::string* release_protocol_version();
  void set_allocated_protocol_version(std::string* protocol_version);
  private:
  const std::string& _internal_protocol_version() const;
  void _internal_set_protocol_version(const std::string& value);
  std::string* _internal_mutable_protocol_version();
  public:

  // @@protoc_insertion_point(class_scope:onebot.GetVersionInfoResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      GetVersionInfoResp_ExtraEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > extra_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr protocol_version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class SetRestartReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onebot.SetRestartReq) */ {
 public:
  inline SetRestartReq() : SetRestartReq(nullptr) {};
  virtual ~SetRestartReq();

  SetRestartReq(const SetRestartReq& from);
  SetRestartReq(SetRestartReq&& from) noexcept
    : SetRestartReq() {
    *this = ::std::move(from);
  }

  inline SetRestartReq& operator=(const SetRestartReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetRestartReq& operator=(SetRestartReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetRestartReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetRestartReq* internal_default_instance() {
    return reinterpret_cast<const SetRestartReq*>(
               &_SetRestartReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    78;

  friend void swap(SetRestartReq& a, SetRestartReq& b) {
    a.Swap(&b);
  }
  inline void Swap(SetRestartReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetRestartReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetRestartReq* New() const final {
    return CreateMaybeMessage<SetRestartReq>(nullptr);
  }

  SetRestartReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetRestartReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetRestartReq& from);
  void MergeFrom(const SetRestartReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetRestartReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onebot.SetRestartReq";
  }
  protected:
  explicit SetRestartReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDelayFieldNumber = 1,
  };
  // int32 delay = 1;
  void clear_delay();
  ::PROTOBUF_NAMESPACE_ID::int32 delay() const;
  void set_delay(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_delay() const;
  void _internal_set_delay(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:onebot.SetRestartReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 delay_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class SetRestartResp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onebot.SetRestartResp) */ {
 public:
  inline SetRestartResp() : SetRestartResp(nullptr) {};
  virtual ~SetRestartResp();

  SetRestartResp(const SetRestartResp& from);
  SetRestartResp(SetRestartResp&& from) noexcept
    : SetRestartResp() {
    *this = ::std::move(from);
  }

  inline SetRestartResp& operator=(const SetRestartResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetRestartResp& operator=(SetRestartResp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetRestartResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetRestartResp* internal_default_instance() {
    return reinterpret_cast<const SetRestartResp*>(
               &_SetRestartResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    79;

  friend void swap(SetRestartResp& a, SetRestartResp& b) {
    a.Swap(&b);
  }
  inline void Swap(SetRestartResp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetRestartResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetRestartResp* New() const final {
    return CreateMaybeMessage<SetRestartResp>(nullptr);
  }

  SetRestartResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetRestartResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetRestartResp& from);
  void MergeFrom(const SetRestartResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetRestartResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onebot.SetRestartResp";
  }
  protected:
  explicit SetRestartResp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:onebot.SetRestartResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class CleanCacheReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onebot.CleanCacheReq) */ {
 public:
  inline CleanCacheReq() : CleanCacheReq(nullptr) {};
  virtual ~CleanCacheReq();

  CleanCacheReq(const CleanCacheReq& from);
  CleanCacheReq(CleanCacheReq&& from) noexcept
    : CleanCacheReq() {
    *this = ::std::move(from);
  }

  inline CleanCacheReq& operator=(const CleanCacheReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline CleanCacheReq& operator=(CleanCacheReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CleanCacheReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CleanCacheReq* internal_default_instance() {
    return reinterpret_cast<const CleanCacheReq*>(
               &_CleanCacheReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    80;

  friend void swap(CleanCacheReq& a, CleanCacheReq& b) {
    a.Swap(&b);
  }
  inline void Swap(CleanCacheReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CleanCacheReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CleanCacheReq* New() const final {
    return CreateMaybeMessage<CleanCacheReq>(nullptr);
  }

  CleanCacheReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CleanCacheReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CleanCacheReq& from);
  void MergeFrom(const CleanCacheReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CleanCacheReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onebot.CleanCacheReq";
  }
  protected:
  explicit CleanCacheReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:onebot.CleanCacheReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class CleanCacheResp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onebot.CleanCacheResp) */ {
 public:
  inline CleanCacheResp() : CleanCacheResp(nullptr) {};
  virtual ~CleanCacheResp();

  CleanCacheResp(const CleanCacheResp& from);
  CleanCacheResp(CleanCacheResp&& from) noexcept
    : CleanCacheResp() {
    *this = ::std::move(from);
  }

  inline CleanCacheResp& operator=(const CleanCacheResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline CleanCacheResp& operator=(CleanCacheResp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CleanCacheResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CleanCacheResp* internal_default_instance() {
    return reinterpret_cast<const CleanCacheResp*>(
               &_CleanCacheResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    81;

  friend void swap(CleanCacheResp& a, CleanCacheResp& b) {
    a.Swap(&b);
  }
  inline void Swap(CleanCacheResp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CleanCacheResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CleanCacheResp* New() const final {
    return CreateMaybeMessage<CleanCacheResp>(nullptr);
  }

  CleanCacheResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CleanCacheResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CleanCacheResp& from);
  void MergeFrom(const CleanCacheResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CleanCacheResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onebot.CleanCacheResp";
  }
  protected:
  explicit CleanCacheResp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:onebot.CleanCacheResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SendPrivateMsgReq

// int64 user_id = 1;
inline void SendPrivateMsgReq::clear_user_id() {
  user_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SendPrivateMsgReq::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SendPrivateMsgReq::user_id() const {
  // @@protoc_insertion_point(field_get:onebot.SendPrivateMsgReq.user_id)
  return _internal_user_id();
}
inline void SendPrivateMsgReq::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  user_id_ = value;
}
inline void SendPrivateMsgReq::set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:onebot.SendPrivateMsgReq.user_id)
}

// .onebot.Message message = 2;
inline bool SendPrivateMsgReq::_internal_has_message() const {
  return this != internal_default_instance() && message_ != nullptr;
}
inline bool SendPrivateMsgReq::has_message() const {
  return _internal_has_message();
}
inline const ::onebot::Message& SendPrivateMsgReq::_internal_message() const {
  const ::onebot::Message* p = message_;
  return p != nullptr ? *p : *reinterpret_cast<const ::onebot::Message*>(
      &::onebot::_Message_default_instance_);
}
inline const ::onebot::Message& SendPrivateMsgReq::message() const {
  // @@protoc_insertion_point(field_get:onebot.SendPrivateMsgReq.message)
  return _internal_message();
}
inline void SendPrivateMsgReq::unsafe_arena_set_allocated_message(
    ::onebot::Message* message) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(message_);
  }
  message_ = message;
  if (message) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onebot.SendPrivateMsgReq.message)
}
inline ::onebot::Message* SendPrivateMsgReq::release_message() {
  
  ::onebot::Message* temp = message_;
  message_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::onebot::Message* SendPrivateMsgReq::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_release:onebot.SendPrivateMsgReq.message)
  
  ::onebot::Message* temp = message_;
  message_ = nullptr;
  return temp;
}
inline ::onebot::Message* SendPrivateMsgReq::_internal_mutable_message() {
  
  if (message_ == nullptr) {
    auto* p = CreateMaybeMessage<::onebot::Message>(GetArena());
    message_ = p;
  }
  return message_;
}
inline ::onebot::Message* SendPrivateMsgReq::mutable_message() {
  // @@protoc_insertion_point(field_mutable:onebot.SendPrivateMsgReq.message)
  return _internal_mutable_message();
}
inline void SendPrivateMsgReq::set_allocated_message(::onebot::Message* message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(message_);
  }
  if (message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(message)->GetArena();
    if (message_arena != submessage_arena) {
      message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, message, submessage_arena);
    }
    
  } else {
    
  }
  message_ = message;
  // @@protoc_insertion_point(field_set_allocated:onebot.SendPrivateMsgReq.message)
}

// bool auto_escape = 3;
inline void SendPrivateMsgReq::clear_auto_escape() {
  auto_escape_ = false;
}
inline bool SendPrivateMsgReq::_internal_auto_escape() const {
  return auto_escape_;
}
inline bool SendPrivateMsgReq::auto_escape() const {
  // @@protoc_insertion_point(field_get:onebot.SendPrivateMsgReq.auto_escape)
  return _internal_auto_escape();
}
inline void SendPrivateMsgReq::_internal_set_auto_escape(bool value) {
  
  auto_escape_ = value;
}
inline void SendPrivateMsgReq::set_auto_escape(bool value) {
  _internal_set_auto_escape(value);
  // @@protoc_insertion_point(field_set:onebot.SendPrivateMsgReq.auto_escape)
}

// -------------------------------------------------------------------

// SendPrivateMsgResp

// int32 message_id = 1;
inline void SendPrivateMsgResp::clear_message_id() {
  message_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SendPrivateMsgResp::_internal_message_id() const {
  return message_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SendPrivateMsgResp::message_id() const {
  // @@protoc_insertion_point(field_get:onebot.SendPrivateMsgResp.message_id)
  return _internal_message_id();
}
inline void SendPrivateMsgResp::_internal_set_message_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  message_id_ = value;
}
inline void SendPrivateMsgResp::set_message_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_message_id(value);
  // @@protoc_insertion_point(field_set:onebot.SendPrivateMsgResp.message_id)
}

// -------------------------------------------------------------------

// SendGroupMsgReq

// int64 group_id = 1;
inline void SendGroupMsgReq::clear_group_id() {
  group_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SendGroupMsgReq::_internal_group_id() const {
  return group_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SendGroupMsgReq::group_id() const {
  // @@protoc_insertion_point(field_get:onebot.SendGroupMsgReq.group_id)
  return _internal_group_id();
}
inline void SendGroupMsgReq::_internal_set_group_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  group_id_ = value;
}
inline void SendGroupMsgReq::set_group_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:onebot.SendGroupMsgReq.group_id)
}

// .onebot.Message message = 2;
inline bool SendGroupMsgReq::_internal_has_message() const {
  return this != internal_default_instance() && message_ != nullptr;
}
inline bool SendGroupMsgReq::has_message() const {
  return _internal_has_message();
}
inline const ::onebot::Message& SendGroupMsgReq::_internal_message() const {
  const ::onebot::Message* p = message_;
  return p != nullptr ? *p : *reinterpret_cast<const ::onebot::Message*>(
      &::onebot::_Message_default_instance_);
}
inline const ::onebot::Message& SendGroupMsgReq::message() const {
  // @@protoc_insertion_point(field_get:onebot.SendGroupMsgReq.message)
  return _internal_message();
}
inline void SendGroupMsgReq::unsafe_arena_set_allocated_message(
    ::onebot::Message* message) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(message_);
  }
  message_ = message;
  if (message) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onebot.SendGroupMsgReq.message)
}
inline ::onebot::Message* SendGroupMsgReq::release_message() {
  
  ::onebot::Message* temp = message_;
  message_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::onebot::Message* SendGroupMsgReq::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_release:onebot.SendGroupMsgReq.message)
  
  ::onebot::Message* temp = message_;
  message_ = nullptr;
  return temp;
}
inline ::onebot::Message* SendGroupMsgReq::_internal_mutable_message() {
  
  if (message_ == nullptr) {
    auto* p = CreateMaybeMessage<::onebot::Message>(GetArena());
    message_ = p;
  }
  return message_;
}
inline ::onebot::Message* SendGroupMsgReq::mutable_message() {
  // @@protoc_insertion_point(field_mutable:onebot.SendGroupMsgReq.message)
  return _internal_mutable_message();
}
inline void SendGroupMsgReq::set_allocated_message(::onebot::Message* message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(message_);
  }
  if (message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(message)->GetArena();
    if (message_arena != submessage_arena) {
      message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, message, submessage_arena);
    }
    
  } else {
    
  }
  message_ = message;
  // @@protoc_insertion_point(field_set_allocated:onebot.SendGroupMsgReq.message)
}

// bool auto_escape = 3;
inline void SendGroupMsgReq::clear_auto_escape() {
  auto_escape_ = false;
}
inline bool SendGroupMsgReq::_internal_auto_escape() const {
  return auto_escape_;
}
inline bool SendGroupMsgReq::auto_escape() const {
  // @@protoc_insertion_point(field_get:onebot.SendGroupMsgReq.auto_escape)
  return _internal_auto_escape();
}
inline void SendGroupMsgReq::_internal_set_auto_escape(bool value) {
  
  auto_escape_ = value;
}
inline void SendGroupMsgReq::set_auto_escape(bool value) {
  _internal_set_auto_escape(value);
  // @@protoc_insertion_point(field_set:onebot.SendGroupMsgReq.auto_escape)
}

// -------------------------------------------------------------------

// SendGroupMsgResp

// int32 message_id = 1;
inline void SendGroupMsgResp::clear_message_id() {
  message_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SendGroupMsgResp::_internal_message_id() const {
  return message_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SendGroupMsgResp::message_id() const {
  // @@protoc_insertion_point(field_get:onebot.SendGroupMsgResp.message_id)
  return _internal_message_id();
}
inline void SendGroupMsgResp::_internal_set_message_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  message_id_ = value;
}
inline void SendGroupMsgResp::set_message_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_message_id(value);
  // @@protoc_insertion_point(field_set:onebot.SendGroupMsgResp.message_id)
}

// -------------------------------------------------------------------

// SendMsgReq

// string message_type = 1;
inline void SendMsgReq::clear_message_type() {
  message_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SendMsgReq::message_type() const {
  // @@protoc_insertion_point(field_get:onebot.SendMsgReq.message_type)
  return _internal_message_type();
}
inline void SendMsgReq::set_message_type(const std::string& value) {
  _internal_set_message_type(value);
  // @@protoc_insertion_point(field_set:onebot.SendMsgReq.message_type)
}
inline std::string* SendMsgReq::mutable_message_type() {
  // @@protoc_insertion_point(field_mutable:onebot.SendMsgReq.message_type)
  return _internal_mutable_message_type();
}
inline const std::string& SendMsgReq::_internal_message_type() const {
  return message_type_.Get();
}
inline void SendMsgReq::_internal_set_message_type(const std::string& value) {
  
  message_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SendMsgReq::set_message_type(std::string&& value) {
  
  message_type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:onebot.SendMsgReq.message_type)
}
inline void SendMsgReq::set_message_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:onebot.SendMsgReq.message_type)
}
inline void SendMsgReq::set_message_type(const char* value,
    size_t size) {
  
  message_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:onebot.SendMsgReq.message_type)
}
inline std::string* SendMsgReq::_internal_mutable_message_type() {
  
  return message_type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SendMsgReq::release_message_type() {
  // @@protoc_insertion_point(field_release:onebot.SendMsgReq.message_type)
  return message_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SendMsgReq::set_allocated_message_type(std::string* message_type) {
  if (message_type != nullptr) {
    
  } else {
    
  }
  message_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:onebot.SendMsgReq.message_type)
}

// int64 user_id = 2;
inline void SendMsgReq::clear_user_id() {
  user_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SendMsgReq::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SendMsgReq::user_id() const {
  // @@protoc_insertion_point(field_get:onebot.SendMsgReq.user_id)
  return _internal_user_id();
}
inline void SendMsgReq::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  user_id_ = value;
}
inline void SendMsgReq::set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:onebot.SendMsgReq.user_id)
}

// int64 group_id = 3;
inline void SendMsgReq::clear_group_id() {
  group_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SendMsgReq::_internal_group_id() const {
  return group_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SendMsgReq::group_id() const {
  // @@protoc_insertion_point(field_get:onebot.SendMsgReq.group_id)
  return _internal_group_id();
}
inline void SendMsgReq::_internal_set_group_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  group_id_ = value;
}
inline void SendMsgReq::set_group_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:onebot.SendMsgReq.group_id)
}

// .onebot.Message message = 4;
inline bool SendMsgReq::_internal_has_message() const {
  return this != internal_default_instance() && message_ != nullptr;
}
inline bool SendMsgReq::has_message() const {
  return _internal_has_message();
}
inline const ::onebot::Message& SendMsgReq::_internal_message() const {
  const ::onebot::Message* p = message_;
  return p != nullptr ? *p : *reinterpret_cast<const ::onebot::Message*>(
      &::onebot::_Message_default_instance_);
}
inline const ::onebot::Message& SendMsgReq::message() const {
  // @@protoc_insertion_point(field_get:onebot.SendMsgReq.message)
  return _internal_message();
}
inline void SendMsgReq::unsafe_arena_set_allocated_message(
    ::onebot::Message* message) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(message_);
  }
  message_ = message;
  if (message) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onebot.SendMsgReq.message)
}
inline ::onebot::Message* SendMsgReq::release_message() {
  
  ::onebot::Message* temp = message_;
  message_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::onebot::Message* SendMsgReq::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_release:onebot.SendMsgReq.message)
  
  ::onebot::Message* temp = message_;
  message_ = nullptr;
  return temp;
}
inline ::onebot::Message* SendMsgReq::_internal_mutable_message() {
  
  if (message_ == nullptr) {
    auto* p = CreateMaybeMessage<::onebot::Message>(GetArena());
    message_ = p;
  }
  return message_;
}
inline ::onebot::Message* SendMsgReq::mutable_message() {
  // @@protoc_insertion_point(field_mutable:onebot.SendMsgReq.message)
  return _internal_mutable_message();
}
inline void SendMsgReq::set_allocated_message(::onebot::Message* message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(message_);
  }
  if (message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(message)->GetArena();
    if (message_arena != submessage_arena) {
      message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, message, submessage_arena);
    }
    
  } else {
    
  }
  message_ = message;
  // @@protoc_insertion_point(field_set_allocated:onebot.SendMsgReq.message)
}

// bool auto_escape = 5;
inline void SendMsgReq::clear_auto_escape() {
  auto_escape_ = false;
}
inline bool SendMsgReq::_internal_auto_escape() const {
  return auto_escape_;
}
inline bool SendMsgReq::auto_escape() const {
  // @@protoc_insertion_point(field_get:onebot.SendMsgReq.auto_escape)
  return _internal_auto_escape();
}
inline void SendMsgReq::_internal_set_auto_escape(bool value) {
  
  auto_escape_ = value;
}
inline void SendMsgReq::set_auto_escape(bool value) {
  _internal_set_auto_escape(value);
  // @@protoc_insertion_point(field_set:onebot.SendMsgReq.auto_escape)
}

// -------------------------------------------------------------------

// SendMsgResp

// int32 message_id = 1;
inline void SendMsgResp::clear_message_id() {
  message_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SendMsgResp::_internal_message_id() const {
  return message_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SendMsgResp::message_id() const {
  // @@protoc_insertion_point(field_get:onebot.SendMsgResp.message_id)
  return _internal_message_id();
}
inline void SendMsgResp::_internal_set_message_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  message_id_ = value;
}
inline void SendMsgResp::set_message_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_message_id(value);
  // @@protoc_insertion_point(field_set:onebot.SendMsgResp.message_id)
}

// -------------------------------------------------------------------

// DeleteMsgReq

// int32 message_id = 1;
inline void DeleteMsgReq::clear_message_id() {
  message_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeleteMsgReq::_internal_message_id() const {
  return message_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeleteMsgReq::message_id() const {
  // @@protoc_insertion_point(field_get:onebot.DeleteMsgReq.message_id)
  return _internal_message_id();
}
inline void DeleteMsgReq::_internal_set_message_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  message_id_ = value;
}
inline void DeleteMsgReq::set_message_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_message_id(value);
  // @@protoc_insertion_point(field_set:onebot.DeleteMsgReq.message_id)
}

// -------------------------------------------------------------------

// DeleteMsgResp

// -------------------------------------------------------------------

// GetMsgReq

// int32 message_id = 1;
inline void GetMsgReq::clear_message_id() {
  message_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetMsgReq::_internal_message_id() const {
  return message_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetMsgReq::message_id() const {
  // @@protoc_insertion_point(field_get:onebot.GetMsgReq.message_id)
  return _internal_message_id();
}
inline void GetMsgReq::_internal_set_message_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  message_id_ = value;
}
inline void GetMsgReq::set_message_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_message_id(value);
  // @@protoc_insertion_point(field_set:onebot.GetMsgReq.message_id)
}

// -------------------------------------------------------------------

// GetMsgResp_Sender

// int64 user_id = 1;
inline void GetMsgResp_Sender::clear_user_id() {
  user_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetMsgResp_Sender::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetMsgResp_Sender::user_id() const {
  // @@protoc_insertion_point(field_get:onebot.GetMsgResp.Sender.user_id)
  return _internal_user_id();
}
inline void GetMsgResp_Sender::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  user_id_ = value;
}
inline void GetMsgResp_Sender::set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:onebot.GetMsgResp.Sender.user_id)
}

// string nickname = 2;
inline void GetMsgResp_Sender::clear_nickname() {
  nickname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetMsgResp_Sender::nickname() const {
  // @@protoc_insertion_point(field_get:onebot.GetMsgResp.Sender.nickname)
  return _internal_nickname();
}
inline void GetMsgResp_Sender::set_nickname(const std::string& value) {
  _internal_set_nickname(value);
  // @@protoc_insertion_point(field_set:onebot.GetMsgResp.Sender.nickname)
}
inline std::string* GetMsgResp_Sender::mutable_nickname() {
  // @@protoc_insertion_point(field_mutable:onebot.GetMsgResp.Sender.nickname)
  return _internal_mutable_nickname();
}
inline const std::string& GetMsgResp_Sender::_internal_nickname() const {
  return nickname_.Get();
}
inline void GetMsgResp_Sender::_internal_set_nickname(const std::string& value) {
  
  nickname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetMsgResp_Sender::set_nickname(std::string&& value) {
  
  nickname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:onebot.GetMsgResp.Sender.nickname)
}
inline void GetMsgResp_Sender::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nickname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:onebot.GetMsgResp.Sender.nickname)
}
inline void GetMsgResp_Sender::set_nickname(const char* value,
    size_t size) {
  
  nickname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:onebot.GetMsgResp.Sender.nickname)
}
inline std::string* GetMsgResp_Sender::_internal_mutable_nickname() {
  
  return nickname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetMsgResp_Sender::release_nickname() {
  // @@protoc_insertion_point(field_release:onebot.GetMsgResp.Sender.nickname)
  return nickname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetMsgResp_Sender::set_allocated_nickname(std::string* nickname) {
  if (nickname != nullptr) {
    
  } else {
    
  }
  nickname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nickname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:onebot.GetMsgResp.Sender.nickname)
}

// string card = 3;
inline void GetMsgResp_Sender::clear_card() {
  card_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetMsgResp_Sender::card() const {
  // @@protoc_insertion_point(field_get:onebot.GetMsgResp.Sender.card)
  return _internal_card();
}
inline void GetMsgResp_Sender::set_card(const std::string& value) {
  _internal_set_card(value);
  // @@protoc_insertion_point(field_set:onebot.GetMsgResp.Sender.card)
}
inline std::string* GetMsgResp_Sender::mutable_card() {
  // @@protoc_insertion_point(field_mutable:onebot.GetMsgResp.Sender.card)
  return _internal_mutable_card();
}
inline const std::string& GetMsgResp_Sender::_internal_card() const {
  return card_.Get();
}
inline void GetMsgResp_Sender::_internal_set_card(const std::string& value) {
  
  card_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetMsgResp_Sender::set_card(std::string&& value) {
  
  card_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:onebot.GetMsgResp.Sender.card)
}
inline void GetMsgResp_Sender::set_card(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  card_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:onebot.GetMsgResp.Sender.card)
}
inline void GetMsgResp_Sender::set_card(const char* value,
    size_t size) {
  
  card_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:onebot.GetMsgResp.Sender.card)
}
inline std::string* GetMsgResp_Sender::_internal_mutable_card() {
  
  return card_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetMsgResp_Sender::release_card() {
  // @@protoc_insertion_point(field_release:onebot.GetMsgResp.Sender.card)
  return card_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetMsgResp_Sender::set_allocated_card(std::string* card) {
  if (card != nullptr) {
    
  } else {
    
  }
  card_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), card,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:onebot.GetMsgResp.Sender.card)
}

// string sex = 4;
inline void GetMsgResp_Sender::clear_sex() {
  sex_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetMsgResp_Sender::sex() const {
  // @@protoc_insertion_point(field_get:onebot.GetMsgResp.Sender.sex)
  return _internal_sex();
}
inline void GetMsgResp_Sender::set_sex(const std::string& value) {
  _internal_set_sex(value);
  // @@protoc_insertion_point(field_set:onebot.GetMsgResp.Sender.sex)
}
inline std::string* GetMsgResp_Sender::mutable_sex() {
  // @@protoc_insertion_point(field_mutable:onebot.GetMsgResp.Sender.sex)
  return _internal_mutable_sex();
}
inline const std::string& GetMsgResp_Sender::_internal_sex() const {
  return sex_.Get();
}
inline void GetMsgResp_Sender::_internal_set_sex(const std::string& value) {
  
  sex_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetMsgResp_Sender::set_sex(std::string&& value) {
  
  sex_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:onebot.GetMsgResp.Sender.sex)
}
inline void GetMsgResp_Sender::set_sex(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sex_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:onebot.GetMsgResp.Sender.sex)
}
inline void GetMsgResp_Sender::set_sex(const char* value,
    size_t size) {
  
  sex_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:onebot.GetMsgResp.Sender.sex)
}
inline std::string* GetMsgResp_Sender::_internal_mutable_sex() {
  
  return sex_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetMsgResp_Sender::release_sex() {
  // @@protoc_insertion_point(field_release:onebot.GetMsgResp.Sender.sex)
  return sex_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetMsgResp_Sender::set_allocated_sex(std::string* sex) {
  if (sex != nullptr) {
    
  } else {
    
  }
  sex_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sex,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:onebot.GetMsgResp.Sender.sex)
}

// int32 age = 5;
inline void GetMsgResp_Sender::clear_age() {
  age_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetMsgResp_Sender::_internal_age() const {
  return age_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetMsgResp_Sender::age() const {
  // @@protoc_insertion_point(field_get:onebot.GetMsgResp.Sender.age)
  return _internal_age();
}
inline void GetMsgResp_Sender::_internal_set_age(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  age_ = value;
}
inline void GetMsgResp_Sender::set_age(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_age(value);
  // @@protoc_insertion_point(field_set:onebot.GetMsgResp.Sender.age)
}

// string area = 6;
inline void GetMsgResp_Sender::clear_area() {
  area_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetMsgResp_Sender::area() const {
  // @@protoc_insertion_point(field_get:onebot.GetMsgResp.Sender.area)
  return _internal_area();
}
inline void GetMsgResp_Sender::set_area(const std::string& value) {
  _internal_set_area(value);
  // @@protoc_insertion_point(field_set:onebot.GetMsgResp.Sender.area)
}
inline std::string* GetMsgResp_Sender::mutable_area() {
  // @@protoc_insertion_point(field_mutable:onebot.GetMsgResp.Sender.area)
  return _internal_mutable_area();
}
inline const std::string& GetMsgResp_Sender::_internal_area() const {
  return area_.Get();
}
inline void GetMsgResp_Sender::_internal_set_area(const std::string& value) {
  
  area_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetMsgResp_Sender::set_area(std::string&& value) {
  
  area_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:onebot.GetMsgResp.Sender.area)
}
inline void GetMsgResp_Sender::set_area(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  area_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:onebot.GetMsgResp.Sender.area)
}
inline void GetMsgResp_Sender::set_area(const char* value,
    size_t size) {
  
  area_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:onebot.GetMsgResp.Sender.area)
}
inline std::string* GetMsgResp_Sender::_internal_mutable_area() {
  
  return area_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetMsgResp_Sender::release_area() {
  // @@protoc_insertion_point(field_release:onebot.GetMsgResp.Sender.area)
  return area_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetMsgResp_Sender::set_allocated_area(std::string* area) {
  if (area != nullptr) {
    
  } else {
    
  }
  area_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), area,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:onebot.GetMsgResp.Sender.area)
}

// string level = 7;
inline void GetMsgResp_Sender::clear_level() {
  level_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetMsgResp_Sender::level() const {
  // @@protoc_insertion_point(field_get:onebot.GetMsgResp.Sender.level)
  return _internal_level();
}
inline void GetMsgResp_Sender::set_level(const std::string& value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:onebot.GetMsgResp.Sender.level)
}
inline std::string* GetMsgResp_Sender::mutable_level() {
  // @@protoc_insertion_point(field_mutable:onebot.GetMsgResp.Sender.level)
  return _internal_mutable_level();
}
inline const std::string& GetMsgResp_Sender::_internal_level() const {
  return level_.Get();
}
inline void GetMsgResp_Sender::_internal_set_level(const std::string& value) {
  
  level_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetMsgResp_Sender::set_level(std::string&& value) {
  
  level_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:onebot.GetMsgResp.Sender.level)
}
inline void GetMsgResp_Sender::set_level(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  level_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:onebot.GetMsgResp.Sender.level)
}
inline void GetMsgResp_Sender::set_level(const char* value,
    size_t size) {
  
  level_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:onebot.GetMsgResp.Sender.level)
}
inline std::string* GetMsgResp_Sender::_internal_mutable_level() {
  
  return level_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetMsgResp_Sender::release_level() {
  // @@protoc_insertion_point(field_release:onebot.GetMsgResp.Sender.level)
  return level_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetMsgResp_Sender::set_allocated_level(std::string* level) {
  if (level != nullptr) {
    
  } else {
    
  }
  level_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), level,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:onebot.GetMsgResp.Sender.level)
}

// string role = 8;
inline void GetMsgResp_Sender::clear_role() {
  role_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetMsgResp_Sender::role() const {
  // @@protoc_insertion_point(field_get:onebot.GetMsgResp.Sender.role)
  return _internal_role();
}
inline void GetMsgResp_Sender::set_role(const std::string& value) {
  _internal_set_role(value);
  // @@protoc_insertion_point(field_set:onebot.GetMsgResp.Sender.role)
}
inline std::string* GetMsgResp_Sender::mutable_role() {
  // @@protoc_insertion_point(field_mutable:onebot.GetMsgResp.Sender.role)
  return _internal_mutable_role();
}
inline const std::string& GetMsgResp_Sender::_internal_role() const {
  return role_.Get();
}
inline void GetMsgResp_Sender::_internal_set_role(const std::string& value) {
  
  role_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetMsgResp_Sender::set_role(std::string&& value) {
  
  role_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:onebot.GetMsgResp.Sender.role)
}
inline void GetMsgResp_Sender::set_role(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  role_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:onebot.GetMsgResp.Sender.role)
}
inline void GetMsgResp_Sender::set_role(const char* value,
    size_t size) {
  
  role_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:onebot.GetMsgResp.Sender.role)
}
inline std::string* GetMsgResp_Sender::_internal_mutable_role() {
  
  return role_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetMsgResp_Sender::release_role() {
  // @@protoc_insertion_point(field_release:onebot.GetMsgResp.Sender.role)
  return role_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetMsgResp_Sender::set_allocated_role(std::string* role) {
  if (role != nullptr) {
    
  } else {
    
  }
  role_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), role,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:onebot.GetMsgResp.Sender.role)
}

// string title = 9;
inline void GetMsgResp_Sender::clear_title() {
  title_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetMsgResp_Sender::title() const {
  // @@protoc_insertion_point(field_get:onebot.GetMsgResp.Sender.title)
  return _internal_title();
}
inline void GetMsgResp_Sender::set_title(const std::string& value) {
  _internal_set_title(value);
  // @@protoc_insertion_point(field_set:onebot.GetMsgResp.Sender.title)
}
inline std::string* GetMsgResp_Sender::mutable_title() {
  // @@protoc_insertion_point(field_mutable:onebot.GetMsgResp.Sender.title)
  return _internal_mutable_title();
}
inline const std::string& GetMsgResp_Sender::_internal_title() const {
  return title_.Get();
}
inline void GetMsgResp_Sender::_internal_set_title(const std::string& value) {
  
  title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetMsgResp_Sender::set_title(std::string&& value) {
  
  title_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:onebot.GetMsgResp.Sender.title)
}
inline void GetMsgResp_Sender::set_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:onebot.GetMsgResp.Sender.title)
}
inline void GetMsgResp_Sender::set_title(const char* value,
    size_t size) {
  
  title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:onebot.GetMsgResp.Sender.title)
}
inline std::string* GetMsgResp_Sender::_internal_mutable_title() {
  
  return title_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetMsgResp_Sender::release_title() {
  // @@protoc_insertion_point(field_release:onebot.GetMsgResp.Sender.title)
  return title_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetMsgResp_Sender::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  title_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:onebot.GetMsgResp.Sender.title)
}

// -------------------------------------------------------------------

// GetMsgResp

// int32 time = 1;
inline void GetMsgResp::clear_time() {
  time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetMsgResp::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetMsgResp::time() const {
  // @@protoc_insertion_point(field_get:onebot.GetMsgResp.time)
  return _internal_time();
}
inline void GetMsgResp::_internal_set_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  time_ = value;
}
inline void GetMsgResp::set_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:onebot.GetMsgResp.time)
}

// string message_type = 2;
inline void GetMsgResp::clear_message_type() {
  message_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetMsgResp::message_type() const {
  // @@protoc_insertion_point(field_get:onebot.GetMsgResp.message_type)
  return _internal_message_type();
}
inline void GetMsgResp::set_message_type(const std::string& value) {
  _internal_set_message_type(value);
  // @@protoc_insertion_point(field_set:onebot.GetMsgResp.message_type)
}
inline std::string* GetMsgResp::mutable_message_type() {
  // @@protoc_insertion_point(field_mutable:onebot.GetMsgResp.message_type)
  return _internal_mutable_message_type();
}
inline const std::string& GetMsgResp::_internal_message_type() const {
  return message_type_.Get();
}
inline void GetMsgResp::_internal_set_message_type(const std::string& value) {
  
  message_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetMsgResp::set_message_type(std::string&& value) {
  
  message_type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:onebot.GetMsgResp.message_type)
}
inline void GetMsgResp::set_message_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:onebot.GetMsgResp.message_type)
}
inline void GetMsgResp::set_message_type(const char* value,
    size_t size) {
  
  message_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:onebot.GetMsgResp.message_type)
}
inline std::string* GetMsgResp::_internal_mutable_message_type() {
  
  return message_type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetMsgResp::release_message_type() {
  // @@protoc_insertion_point(field_release:onebot.GetMsgResp.message_type)
  return message_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetMsgResp::set_allocated_message_type(std::string* message_type) {
  if (message_type != nullptr) {
    
  } else {
    
  }
  message_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:onebot.GetMsgResp.message_type)
}

// int32 message_id = 3;
inline void GetMsgResp::clear_message_id() {
  message_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetMsgResp::_internal_message_id() const {
  return message_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetMsgResp::message_id() const {
  // @@protoc_insertion_point(field_get:onebot.GetMsgResp.message_id)
  return _internal_message_id();
}
inline void GetMsgResp::_internal_set_message_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  message_id_ = value;
}
inline void GetMsgResp::set_message_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_message_id(value);
  // @@protoc_insertion_point(field_set:onebot.GetMsgResp.message_id)
}

// int32 real_id = 4;
inline void GetMsgResp::clear_real_id() {
  real_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetMsgResp::_internal_real_id() const {
  return real_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetMsgResp::real_id() const {
  // @@protoc_insertion_point(field_get:onebot.GetMsgResp.real_id)
  return _internal_real_id();
}
inline void GetMsgResp::_internal_set_real_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  real_id_ = value;
}
inline void GetMsgResp::set_real_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_real_id(value);
  // @@protoc_insertion_point(field_set:onebot.GetMsgResp.real_id)
}

// .onebot.GetMsgResp.Sender sender = 5;
inline bool GetMsgResp::_internal_has_sender() const {
  return this != internal_default_instance() && sender_ != nullptr;
}
inline bool GetMsgResp::has_sender() const {
  return _internal_has_sender();
}
inline void GetMsgResp::clear_sender() {
  if (GetArena() == nullptr && sender_ != nullptr) {
    delete sender_;
  }
  sender_ = nullptr;
}
inline const ::onebot::GetMsgResp_Sender& GetMsgResp::_internal_sender() const {
  const ::onebot::GetMsgResp_Sender* p = sender_;
  return p != nullptr ? *p : *reinterpret_cast<const ::onebot::GetMsgResp_Sender*>(
      &::onebot::_GetMsgResp_Sender_default_instance_);
}
inline const ::onebot::GetMsgResp_Sender& GetMsgResp::sender() const {
  // @@protoc_insertion_point(field_get:onebot.GetMsgResp.sender)
  return _internal_sender();
}
inline void GetMsgResp::unsafe_arena_set_allocated_sender(
    ::onebot::GetMsgResp_Sender* sender) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sender_);
  }
  sender_ = sender;
  if (sender) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onebot.GetMsgResp.sender)
}
inline ::onebot::GetMsgResp_Sender* GetMsgResp::release_sender() {
  
  ::onebot::GetMsgResp_Sender* temp = sender_;
  sender_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::onebot::GetMsgResp_Sender* GetMsgResp::unsafe_arena_release_sender() {
  // @@protoc_insertion_point(field_release:onebot.GetMsgResp.sender)
  
  ::onebot::GetMsgResp_Sender* temp = sender_;
  sender_ = nullptr;
  return temp;
}
inline ::onebot::GetMsgResp_Sender* GetMsgResp::_internal_mutable_sender() {
  
  if (sender_ == nullptr) {
    auto* p = CreateMaybeMessage<::onebot::GetMsgResp_Sender>(GetArena());
    sender_ = p;
  }
  return sender_;
}
inline ::onebot::GetMsgResp_Sender* GetMsgResp::mutable_sender() {
  // @@protoc_insertion_point(field_mutable:onebot.GetMsgResp.sender)
  return _internal_mutable_sender();
}
inline void GetMsgResp::set_allocated_sender(::onebot::GetMsgResp_Sender* sender) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete sender_;
  }
  if (sender) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(sender);
    if (message_arena != submessage_arena) {
      sender = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sender, submessage_arena);
    }
    
  } else {
    
  }
  sender_ = sender;
  // @@protoc_insertion_point(field_set_allocated:onebot.GetMsgResp.sender)
}

// .onebot.Message message = 6;
inline bool GetMsgResp::_internal_has_message() const {
  return this != internal_default_instance() && message_ != nullptr;
}
inline bool GetMsgResp::has_message() const {
  return _internal_has_message();
}
inline const ::onebot::Message& GetMsgResp::_internal_message() const {
  const ::onebot::Message* p = message_;
  return p != nullptr ? *p : *reinterpret_cast<const ::onebot::Message*>(
      &::onebot::_Message_default_instance_);
}
inline const ::onebot::Message& GetMsgResp::message() const {
  // @@protoc_insertion_point(field_get:onebot.GetMsgResp.message)
  return _internal_message();
}
inline void GetMsgResp::unsafe_arena_set_allocated_message(
    ::onebot::Message* message) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(message_);
  }
  message_ = message;
  if (message) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onebot.GetMsgResp.message)
}
inline ::onebot::Message* GetMsgResp::release_message() {
  
  ::onebot::Message* temp = message_;
  message_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::onebot::Message* GetMsgResp::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_release:onebot.GetMsgResp.message)
  
  ::onebot::Message* temp = message_;
  message_ = nullptr;
  return temp;
}
inline ::onebot::Message* GetMsgResp::_internal_mutable_message() {
  
  if (message_ == nullptr) {
    auto* p = CreateMaybeMessage<::onebot::Message>(GetArena());
    message_ = p;
  }
  return message_;
}
inline ::onebot::Message* GetMsgResp::mutable_message() {
  // @@protoc_insertion_point(field_mutable:onebot.GetMsgResp.message)
  return _internal_mutable_message();
}
inline void GetMsgResp::set_allocated_message(::onebot::Message* message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(message_);
  }
  if (message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(message)->GetArena();
    if (message_arena != submessage_arena) {
      message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, message, submessage_arena);
    }
    
  } else {
    
  }
  message_ = message;
  // @@protoc_insertion_point(field_set_allocated:onebot.GetMsgResp.message)
}

// -------------------------------------------------------------------

// GetForwardMsgReq

// string id = 1;
inline void GetForwardMsgReq::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetForwardMsgReq::id() const {
  // @@protoc_insertion_point(field_get:onebot.GetForwardMsgReq.id)
  return _internal_id();
}
inline void GetForwardMsgReq::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:onebot.GetForwardMsgReq.id)
}
inline std::string* GetForwardMsgReq::mutable_id() {
  // @@protoc_insertion_point(field_mutable:onebot.GetForwardMsgReq.id)
  return _internal_mutable_id();
}
inline const std::string& GetForwardMsgReq::_internal_id() const {
  return id_.Get();
}
inline void GetForwardMsgReq::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetForwardMsgReq::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:onebot.GetForwardMsgReq.id)
}
inline void GetForwardMsgReq::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:onebot.GetForwardMsgReq.id)
}
inline void GetForwardMsgReq::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:onebot.GetForwardMsgReq.id)
}
inline std::string* GetForwardMsgReq::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetForwardMsgReq::release_id() {
  // @@protoc_insertion_point(field_release:onebot.GetForwardMsgReq.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetForwardMsgReq::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:onebot.GetForwardMsgReq.id)
}

// -------------------------------------------------------------------

// GetForwardMsgResp

// -------------------------------------------------------------------

// SendLikeReq

// int64 user_id = 1;
inline void SendLikeReq::clear_user_id() {
  user_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SendLikeReq::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SendLikeReq::user_id() const {
  // @@protoc_insertion_point(field_get:onebot.SendLikeReq.user_id)
  return _internal_user_id();
}
inline void SendLikeReq::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  user_id_ = value;
}
inline void SendLikeReq::set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:onebot.SendLikeReq.user_id)
}

// int32 times = 2;
inline void SendLikeReq::clear_times() {
  times_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SendLikeReq::_internal_times() const {
  return times_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SendLikeReq::times() const {
  // @@protoc_insertion_point(field_get:onebot.SendLikeReq.times)
  return _internal_times();
}
inline void SendLikeReq::_internal_set_times(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  times_ = value;
}
inline void SendLikeReq::set_times(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_times(value);
  // @@protoc_insertion_point(field_set:onebot.SendLikeReq.times)
}

// -------------------------------------------------------------------

// SendListResp

// -------------------------------------------------------------------

// SetGroupKickReq

// int64 group_id = 1;
inline void SetGroupKickReq::clear_group_id() {
  group_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SetGroupKickReq::_internal_group_id() const {
  return group_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SetGroupKickReq::group_id() const {
  // @@protoc_insertion_point(field_get:onebot.SetGroupKickReq.group_id)
  return _internal_group_id();
}
inline void SetGroupKickReq::_internal_set_group_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  group_id_ = value;
}
inline void SetGroupKickReq::set_group_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:onebot.SetGroupKickReq.group_id)
}

// int64 user_id = 2;
inline void SetGroupKickReq::clear_user_id() {
  user_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SetGroupKickReq::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SetGroupKickReq::user_id() const {
  // @@protoc_insertion_point(field_get:onebot.SetGroupKickReq.user_id)
  return _internal_user_id();
}
inline void SetGroupKickReq::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  user_id_ = value;
}
inline void SetGroupKickReq::set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:onebot.SetGroupKickReq.user_id)
}

// bool reject_add_request = 3;
inline void SetGroupKickReq::clear_reject_add_request() {
  reject_add_request_ = false;
}
inline bool SetGroupKickReq::_internal_reject_add_request() const {
  return reject_add_request_;
}
inline bool SetGroupKickReq::reject_add_request() const {
  // @@protoc_insertion_point(field_get:onebot.SetGroupKickReq.reject_add_request)
  return _internal_reject_add_request();
}
inline void SetGroupKickReq::_internal_set_reject_add_request(bool value) {
  
  reject_add_request_ = value;
}
inline void SetGroupKickReq::set_reject_add_request(bool value) {
  _internal_set_reject_add_request(value);
  // @@protoc_insertion_point(field_set:onebot.SetGroupKickReq.reject_add_request)
}

// -------------------------------------------------------------------

// SetGroupKickResp

// -------------------------------------------------------------------

// SetGroupBanReq

// int64 group_id = 1;
inline void SetGroupBanReq::clear_group_id() {
  group_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SetGroupBanReq::_internal_group_id() const {
  return group_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SetGroupBanReq::group_id() const {
  // @@protoc_insertion_point(field_get:onebot.SetGroupBanReq.group_id)
  return _internal_group_id();
}
inline void SetGroupBanReq::_internal_set_group_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  group_id_ = value;
}
inline void SetGroupBanReq::set_group_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:onebot.SetGroupBanReq.group_id)
}

// int64 user_id = 2;
inline void SetGroupBanReq::clear_user_id() {
  user_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SetGroupBanReq::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SetGroupBanReq::user_id() const {
  // @@protoc_insertion_point(field_get:onebot.SetGroupBanReq.user_id)
  return _internal_user_id();
}
inline void SetGroupBanReq::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  user_id_ = value;
}
inline void SetGroupBanReq::set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:onebot.SetGroupBanReq.user_id)
}

// int64 duration = 3;
inline void SetGroupBanReq::clear_duration() {
  duration_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SetGroupBanReq::_internal_duration() const {
  return duration_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SetGroupBanReq::duration() const {
  // @@protoc_insertion_point(field_get:onebot.SetGroupBanReq.duration)
  return _internal_duration();
}
inline void SetGroupBanReq::_internal_set_duration(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  duration_ = value;
}
inline void SetGroupBanReq::set_duration(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:onebot.SetGroupBanReq.duration)
}

// -------------------------------------------------------------------

// SetGroupBanResp

// -------------------------------------------------------------------

// SetGroupAnonymousBanReq_Anonymous

// int64 id = 1;
inline void SetGroupAnonymousBanReq_Anonymous::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SetGroupAnonymousBanReq_Anonymous::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SetGroupAnonymousBanReq_Anonymous::id() const {
  // @@protoc_insertion_point(field_get:onebot.SetGroupAnonymousBanReq.Anonymous.id)
  return _internal_id();
}
inline void SetGroupAnonymousBanReq_Anonymous::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void SetGroupAnonymousBanReq_Anonymous::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:onebot.SetGroupAnonymousBanReq.Anonymous.id)
}

// string name = 2;
inline void SetGroupAnonymousBanReq_Anonymous::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SetGroupAnonymousBanReq_Anonymous::name() const {
  // @@protoc_insertion_point(field_get:onebot.SetGroupAnonymousBanReq.Anonymous.name)
  return _internal_name();
}
inline void SetGroupAnonymousBanReq_Anonymous::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:onebot.SetGroupAnonymousBanReq.Anonymous.name)
}
inline std::string* SetGroupAnonymousBanReq_Anonymous::mutable_name() {
  // @@protoc_insertion_point(field_mutable:onebot.SetGroupAnonymousBanReq.Anonymous.name)
  return _internal_mutable_name();
}
inline const std::string& SetGroupAnonymousBanReq_Anonymous::_internal_name() const {
  return name_.Get();
}
inline void SetGroupAnonymousBanReq_Anonymous::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SetGroupAnonymousBanReq_Anonymous::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:onebot.SetGroupAnonymousBanReq.Anonymous.name)
}
inline void SetGroupAnonymousBanReq_Anonymous::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:onebot.SetGroupAnonymousBanReq.Anonymous.name)
}
inline void SetGroupAnonymousBanReq_Anonymous::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:onebot.SetGroupAnonymousBanReq.Anonymous.name)
}
inline std::string* SetGroupAnonymousBanReq_Anonymous::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SetGroupAnonymousBanReq_Anonymous::release_name() {
  // @@protoc_insertion_point(field_release:onebot.SetGroupAnonymousBanReq.Anonymous.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetGroupAnonymousBanReq_Anonymous::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:onebot.SetGroupAnonymousBanReq.Anonymous.name)
}

// string flag = 3;
inline void SetGroupAnonymousBanReq_Anonymous::clear_flag() {
  flag_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SetGroupAnonymousBanReq_Anonymous::flag() const {
  // @@protoc_insertion_point(field_get:onebot.SetGroupAnonymousBanReq.Anonymous.flag)
  return _internal_flag();
}
inline void SetGroupAnonymousBanReq_Anonymous::set_flag(const std::string& value) {
  _internal_set_flag(value);
  // @@protoc_insertion_point(field_set:onebot.SetGroupAnonymousBanReq.Anonymous.flag)
}
inline std::string* SetGroupAnonymousBanReq_Anonymous::mutable_flag() {
  // @@protoc_insertion_point(field_mutable:onebot.SetGroupAnonymousBanReq.Anonymous.flag)
  return _internal_mutable_flag();
}
inline const std::string& SetGroupAnonymousBanReq_Anonymous::_internal_flag() const {
  return flag_.Get();
}
inline void SetGroupAnonymousBanReq_Anonymous::_internal_set_flag(const std::string& value) {
  
  flag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SetGroupAnonymousBanReq_Anonymous::set_flag(std::string&& value) {
  
  flag_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:onebot.SetGroupAnonymousBanReq.Anonymous.flag)
}
inline void SetGroupAnonymousBanReq_Anonymous::set_flag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  flag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:onebot.SetGroupAnonymousBanReq.Anonymous.flag)
}
inline void SetGroupAnonymousBanReq_Anonymous::set_flag(const char* value,
    size_t size) {
  
  flag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:onebot.SetGroupAnonymousBanReq.Anonymous.flag)
}
inline std::string* SetGroupAnonymousBanReq_Anonymous::_internal_mutable_flag() {
  
  return flag_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SetGroupAnonymousBanReq_Anonymous::release_flag() {
  // @@protoc_insertion_point(field_release:onebot.SetGroupAnonymousBanReq.Anonymous.flag)
  return flag_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetGroupAnonymousBanReq_Anonymous::set_allocated_flag(std::string* flag) {
  if (flag != nullptr) {
    
  } else {
    
  }
  flag_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), flag,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:onebot.SetGroupAnonymousBanReq.Anonymous.flag)
}

// -------------------------------------------------------------------

// SetGroupAnonymousBanReq

// int64 group_id = 1;
inline void SetGroupAnonymousBanReq::clear_group_id() {
  group_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SetGroupAnonymousBanReq::_internal_group_id() const {
  return group_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SetGroupAnonymousBanReq::group_id() const {
  // @@protoc_insertion_point(field_get:onebot.SetGroupAnonymousBanReq.group_id)
  return _internal_group_id();
}
inline void SetGroupAnonymousBanReq::_internal_set_group_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  group_id_ = value;
}
inline void SetGroupAnonymousBanReq::set_group_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:onebot.SetGroupAnonymousBanReq.group_id)
}

// .onebot.SetGroupAnonymousBanReq.Anonymous anonymous = 2;
inline bool SetGroupAnonymousBanReq::_internal_has_anonymous() const {
  return this != internal_default_instance() && anonymous_ != nullptr;
}
inline bool SetGroupAnonymousBanReq::has_anonymous() const {
  return _internal_has_anonymous();
}
inline void SetGroupAnonymousBanReq::clear_anonymous() {
  if (GetArena() == nullptr && anonymous_ != nullptr) {
    delete anonymous_;
  }
  anonymous_ = nullptr;
}
inline const ::onebot::SetGroupAnonymousBanReq_Anonymous& SetGroupAnonymousBanReq::_internal_anonymous() const {
  const ::onebot::SetGroupAnonymousBanReq_Anonymous* p = anonymous_;
  return p != nullptr ? *p : *reinterpret_cast<const ::onebot::SetGroupAnonymousBanReq_Anonymous*>(
      &::onebot::_SetGroupAnonymousBanReq_Anonymous_default_instance_);
}
inline const ::onebot::SetGroupAnonymousBanReq_Anonymous& SetGroupAnonymousBanReq::anonymous() const {
  // @@protoc_insertion_point(field_get:onebot.SetGroupAnonymousBanReq.anonymous)
  return _internal_anonymous();
}
inline void SetGroupAnonymousBanReq::unsafe_arena_set_allocated_anonymous(
    ::onebot::SetGroupAnonymousBanReq_Anonymous* anonymous) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(anonymous_);
  }
  anonymous_ = anonymous;
  if (anonymous) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onebot.SetGroupAnonymousBanReq.anonymous)
}
inline ::onebot::SetGroupAnonymousBanReq_Anonymous* SetGroupAnonymousBanReq::release_anonymous() {
  
  ::onebot::SetGroupAnonymousBanReq_Anonymous* temp = anonymous_;
  anonymous_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::onebot::SetGroupAnonymousBanReq_Anonymous* SetGroupAnonymousBanReq::unsafe_arena_release_anonymous() {
  // @@protoc_insertion_point(field_release:onebot.SetGroupAnonymousBanReq.anonymous)
  
  ::onebot::SetGroupAnonymousBanReq_Anonymous* temp = anonymous_;
  anonymous_ = nullptr;
  return temp;
}
inline ::onebot::SetGroupAnonymousBanReq_Anonymous* SetGroupAnonymousBanReq::_internal_mutable_anonymous() {
  
  if (anonymous_ == nullptr) {
    auto* p = CreateMaybeMessage<::onebot::SetGroupAnonymousBanReq_Anonymous>(GetArena());
    anonymous_ = p;
  }
  return anonymous_;
}
inline ::onebot::SetGroupAnonymousBanReq_Anonymous* SetGroupAnonymousBanReq::mutable_anonymous() {
  // @@protoc_insertion_point(field_mutable:onebot.SetGroupAnonymousBanReq.anonymous)
  return _internal_mutable_anonymous();
}
inline void SetGroupAnonymousBanReq::set_allocated_anonymous(::onebot::SetGroupAnonymousBanReq_Anonymous* anonymous) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete anonymous_;
  }
  if (anonymous) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(anonymous);
    if (message_arena != submessage_arena) {
      anonymous = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, anonymous, submessage_arena);
    }
    
  } else {
    
  }
  anonymous_ = anonymous;
  // @@protoc_insertion_point(field_set_allocated:onebot.SetGroupAnonymousBanReq.anonymous)
}

// string anonymous_flag = 3;
inline void SetGroupAnonymousBanReq::clear_anonymous_flag() {
  anonymous_flag_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SetGroupAnonymousBanReq::anonymous_flag() const {
  // @@protoc_insertion_point(field_get:onebot.SetGroupAnonymousBanReq.anonymous_flag)
  return _internal_anonymous_flag();
}
inline void SetGroupAnonymousBanReq::set_anonymous_flag(const std::string& value) {
  _internal_set_anonymous_flag(value);
  // @@protoc_insertion_point(field_set:onebot.SetGroupAnonymousBanReq.anonymous_flag)
}
inline std::string* SetGroupAnonymousBanReq::mutable_anonymous_flag() {
  // @@protoc_insertion_point(field_mutable:onebot.SetGroupAnonymousBanReq.anonymous_flag)
  return _internal_mutable_anonymous_flag();
}
inline const std::string& SetGroupAnonymousBanReq::_internal_anonymous_flag() const {
  return anonymous_flag_.Get();
}
inline void SetGroupAnonymousBanReq::_internal_set_anonymous_flag(const std::string& value) {
  
  anonymous_flag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SetGroupAnonymousBanReq::set_anonymous_flag(std::string&& value) {
  
  anonymous_flag_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:onebot.SetGroupAnonymousBanReq.anonymous_flag)
}
inline void SetGroupAnonymousBanReq::set_anonymous_flag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  anonymous_flag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:onebot.SetGroupAnonymousBanReq.anonymous_flag)
}
inline void SetGroupAnonymousBanReq::set_anonymous_flag(const char* value,
    size_t size) {
  
  anonymous_flag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:onebot.SetGroupAnonymousBanReq.anonymous_flag)
}
inline std::string* SetGroupAnonymousBanReq::_internal_mutable_anonymous_flag() {
  
  return anonymous_flag_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SetGroupAnonymousBanReq::release_anonymous_flag() {
  // @@protoc_insertion_point(field_release:onebot.SetGroupAnonymousBanReq.anonymous_flag)
  return anonymous_flag_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetGroupAnonymousBanReq::set_allocated_anonymous_flag(std::string* anonymous_flag) {
  if (anonymous_flag != nullptr) {
    
  } else {
    
  }
  anonymous_flag_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), anonymous_flag,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:onebot.SetGroupAnonymousBanReq.anonymous_flag)
}

// string flag = 4;
inline void SetGroupAnonymousBanReq::clear_flag() {
  flag_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SetGroupAnonymousBanReq::flag() const {
  // @@protoc_insertion_point(field_get:onebot.SetGroupAnonymousBanReq.flag)
  return _internal_flag();
}
inline void SetGroupAnonymousBanReq::set_flag(const std::string& value) {
  _internal_set_flag(value);
  // @@protoc_insertion_point(field_set:onebot.SetGroupAnonymousBanReq.flag)
}
inline std::string* SetGroupAnonymousBanReq::mutable_flag() {
  // @@protoc_insertion_point(field_mutable:onebot.SetGroupAnonymousBanReq.flag)
  return _internal_mutable_flag();
}
inline const std::string& SetGroupAnonymousBanReq::_internal_flag() const {
  return flag_.Get();
}
inline void SetGroupAnonymousBanReq::_internal_set_flag(const std::string& value) {
  
  flag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SetGroupAnonymousBanReq::set_flag(std::string&& value) {
  
  flag_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:onebot.SetGroupAnonymousBanReq.flag)
}
inline void SetGroupAnonymousBanReq::set_flag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  flag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:onebot.SetGroupAnonymousBanReq.flag)
}
inline void SetGroupAnonymousBanReq::set_flag(const char* value,
    size_t size) {
  
  flag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:onebot.SetGroupAnonymousBanReq.flag)
}
inline std::string* SetGroupAnonymousBanReq::_internal_mutable_flag() {
  
  return flag_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SetGroupAnonymousBanReq::release_flag() {
  // @@protoc_insertion_point(field_release:onebot.SetGroupAnonymousBanReq.flag)
  return flag_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetGroupAnonymousBanReq::set_allocated_flag(std::string* flag) {
  if (flag != nullptr) {
    
  } else {
    
  }
  flag_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), flag,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:onebot.SetGroupAnonymousBanReq.flag)
}

// int64 duration = 5;
inline void SetGroupAnonymousBanReq::clear_duration() {
  duration_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SetGroupAnonymousBanReq::_internal_duration() const {
  return duration_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SetGroupAnonymousBanReq::duration() const {
  // @@protoc_insertion_point(field_get:onebot.SetGroupAnonymousBanReq.duration)
  return _internal_duration();
}
inline void SetGroupAnonymousBanReq::_internal_set_duration(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  duration_ = value;
}
inline void SetGroupAnonymousBanReq::set_duration(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:onebot.SetGroupAnonymousBanReq.duration)
}

// -------------------------------------------------------------------

// SetGroupAnonymousBanResp

// -------------------------------------------------------------------

// SetGroupWholeBanReq

// int64 group_id = 1;
inline void SetGroupWholeBanReq::clear_group_id() {
  group_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SetGroupWholeBanReq::_internal_group_id() const {
  return group_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SetGroupWholeBanReq::group_id() const {
  // @@protoc_insertion_point(field_get:onebot.SetGroupWholeBanReq.group_id)
  return _internal_group_id();
}
inline void SetGroupWholeBanReq::_internal_set_group_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  group_id_ = value;
}
inline void SetGroupWholeBanReq::set_group_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:onebot.SetGroupWholeBanReq.group_id)
}

// bool enable = 2;
inline void SetGroupWholeBanReq::clear_enable() {
  enable_ = false;
}
inline bool SetGroupWholeBanReq::_internal_enable() const {
  return enable_;
}
inline bool SetGroupWholeBanReq::enable() const {
  // @@protoc_insertion_point(field_get:onebot.SetGroupWholeBanReq.enable)
  return _internal_enable();
}
inline void SetGroupWholeBanReq::_internal_set_enable(bool value) {
  
  enable_ = value;
}
inline void SetGroupWholeBanReq::set_enable(bool value) {
  _internal_set_enable(value);
  // @@protoc_insertion_point(field_set:onebot.SetGroupWholeBanReq.enable)
}

// -------------------------------------------------------------------

// SetGroupWholeBanResp

// -------------------------------------------------------------------

// SetGroupAdminReq

// int64 group_id = 1;
inline void SetGroupAdminReq::clear_group_id() {
  group_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SetGroupAdminReq::_internal_group_id() const {
  return group_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SetGroupAdminReq::group_id() const {
  // @@protoc_insertion_point(field_get:onebot.SetGroupAdminReq.group_id)
  return _internal_group_id();
}
inline void SetGroupAdminReq::_internal_set_group_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  group_id_ = value;
}
inline void SetGroupAdminReq::set_group_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:onebot.SetGroupAdminReq.group_id)
}

// int64 user_id = 2;
inline void SetGroupAdminReq::clear_user_id() {
  user_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SetGroupAdminReq::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SetGroupAdminReq::user_id() const {
  // @@protoc_insertion_point(field_get:onebot.SetGroupAdminReq.user_id)
  return _internal_user_id();
}
inline void SetGroupAdminReq::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  user_id_ = value;
}
inline void SetGroupAdminReq::set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:onebot.SetGroupAdminReq.user_id)
}

// bool enable = 3;
inline void SetGroupAdminReq::clear_enable() {
  enable_ = false;
}
inline bool SetGroupAdminReq::_internal_enable() const {
  return enable_;
}
inline bool SetGroupAdminReq::enable() const {
  // @@protoc_insertion_point(field_get:onebot.SetGroupAdminReq.enable)
  return _internal_enable();
}
inline void SetGroupAdminReq::_internal_set_enable(bool value) {
  
  enable_ = value;
}
inline void SetGroupAdminReq::set_enable(bool value) {
  _internal_set_enable(value);
  // @@protoc_insertion_point(field_set:onebot.SetGroupAdminReq.enable)
}

// -------------------------------------------------------------------

// SetGroupAdminResp

// -------------------------------------------------------------------

// SetGroupAnonymousReq

// int64 group_id = 1;
inline void SetGroupAnonymousReq::clear_group_id() {
  group_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SetGroupAnonymousReq::_internal_group_id() const {
  return group_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SetGroupAnonymousReq::group_id() const {
  // @@protoc_insertion_point(field_get:onebot.SetGroupAnonymousReq.group_id)
  return _internal_group_id();
}
inline void SetGroupAnonymousReq::_internal_set_group_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  group_id_ = value;
}
inline void SetGroupAnonymousReq::set_group_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:onebot.SetGroupAnonymousReq.group_id)
}

// bool enable = 2;
inline void SetGroupAnonymousReq::clear_enable() {
  enable_ = false;
}
inline bool SetGroupAnonymousReq::_internal_enable() const {
  return enable_;
}
inline bool SetGroupAnonymousReq::enable() const {
  // @@protoc_insertion_point(field_get:onebot.SetGroupAnonymousReq.enable)
  return _internal_enable();
}
inline void SetGroupAnonymousReq::_internal_set_enable(bool value) {
  
  enable_ = value;
}
inline void SetGroupAnonymousReq::set_enable(bool value) {
  _internal_set_enable(value);
  // @@protoc_insertion_point(field_set:onebot.SetGroupAnonymousReq.enable)
}

// -------------------------------------------------------------------

// SetGroupAnonymousResp

// -------------------------------------------------------------------

// SetGroupNameReq

// int64 group_id = 1;
inline void SetGroupNameReq::clear_group_id() {
  group_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SetGroupNameReq::_internal_group_id() const {
  return group_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SetGroupNameReq::group_id() const {
  // @@protoc_insertion_point(field_get:onebot.SetGroupNameReq.group_id)
  return _internal_group_id();
}
inline void SetGroupNameReq::_internal_set_group_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  group_id_ = value;
}
inline void SetGroupNameReq::set_group_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:onebot.SetGroupNameReq.group_id)
}

// string group_name = 2;
inline void SetGroupNameReq::clear_group_name() {
  group_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SetGroupNameReq::group_name() const {
  // @@protoc_insertion_point(field_get:onebot.SetGroupNameReq.group_name)
  return _internal_group_name();
}
inline void SetGroupNameReq::set_group_name(const std::string& value) {
  _internal_set_group_name(value);
  // @@protoc_insertion_point(field_set:onebot.SetGroupNameReq.group_name)
}
inline std::string* SetGroupNameReq::mutable_group_name() {
  // @@protoc_insertion_point(field_mutable:onebot.SetGroupNameReq.group_name)
  return _internal_mutable_group_name();
}
inline const std::string& SetGroupNameReq::_internal_group_name() const {
  return group_name_.Get();
}
inline void SetGroupNameReq::_internal_set_group_name(const std::string& value) {
  
  group_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SetGroupNameReq::set_group_name(std::string&& value) {
  
  group_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:onebot.SetGroupNameReq.group_name)
}
inline void SetGroupNameReq::set_group_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  group_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:onebot.SetGroupNameReq.group_name)
}
inline void SetGroupNameReq::set_group_name(const char* value,
    size_t size) {
  
  group_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:onebot.SetGroupNameReq.group_name)
}
inline std::string* SetGroupNameReq::_internal_mutable_group_name() {
  
  return group_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SetGroupNameReq::release_group_name() {
  // @@protoc_insertion_point(field_release:onebot.SetGroupNameReq.group_name)
  return group_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetGroupNameReq::set_allocated_group_name(std::string* group_name) {
  if (group_name != nullptr) {
    
  } else {
    
  }
  group_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), group_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:onebot.SetGroupNameReq.group_name)
}

// -------------------------------------------------------------------

// SetGroupNameResp

// -------------------------------------------------------------------

// SetGroupLeaveReq

// int64 group_id = 1;
inline void SetGroupLeaveReq::clear_group_id() {
  group_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SetGroupLeaveReq::_internal_group_id() const {
  return group_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SetGroupLeaveReq::group_id() const {
  // @@protoc_insertion_point(field_get:onebot.SetGroupLeaveReq.group_id)
  return _internal_group_id();
}
inline void SetGroupLeaveReq::_internal_set_group_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  group_id_ = value;
}
inline void SetGroupLeaveReq::set_group_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:onebot.SetGroupLeaveReq.group_id)
}

// bool is_dismiss = 2;
inline void SetGroupLeaveReq::clear_is_dismiss() {
  is_dismiss_ = false;
}
inline bool SetGroupLeaveReq::_internal_is_dismiss() const {
  return is_dismiss_;
}
inline bool SetGroupLeaveReq::is_dismiss() const {
  // @@protoc_insertion_point(field_get:onebot.SetGroupLeaveReq.is_dismiss)
  return _internal_is_dismiss();
}
inline void SetGroupLeaveReq::_internal_set_is_dismiss(bool value) {
  
  is_dismiss_ = value;
}
inline void SetGroupLeaveReq::set_is_dismiss(bool value) {
  _internal_set_is_dismiss(value);
  // @@protoc_insertion_point(field_set:onebot.SetGroupLeaveReq.is_dismiss)
}

// -------------------------------------------------------------------

// SetGroupLeaveResp

// -------------------------------------------------------------------

// SetGroupSpecialTitleReq

// int64 group_id = 1;
inline void SetGroupSpecialTitleReq::clear_group_id() {
  group_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SetGroupSpecialTitleReq::_internal_group_id() const {
  return group_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SetGroupSpecialTitleReq::group_id() const {
  // @@protoc_insertion_point(field_get:onebot.SetGroupSpecialTitleReq.group_id)
  return _internal_group_id();
}
inline void SetGroupSpecialTitleReq::_internal_set_group_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  group_id_ = value;
}
inline void SetGroupSpecialTitleReq::set_group_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:onebot.SetGroupSpecialTitleReq.group_id)
}

// int64 user_id = 2;
inline void SetGroupSpecialTitleReq::clear_user_id() {
  user_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SetGroupSpecialTitleReq::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SetGroupSpecialTitleReq::user_id() const {
  // @@protoc_insertion_point(field_get:onebot.SetGroupSpecialTitleReq.user_id)
  return _internal_user_id();
}
inline void SetGroupSpecialTitleReq::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  user_id_ = value;
}
inline void SetGroupSpecialTitleReq::set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:onebot.SetGroupSpecialTitleReq.user_id)
}

// string special_title = 3;
inline void SetGroupSpecialTitleReq::clear_special_title() {
  special_title_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SetGroupSpecialTitleReq::special_title() const {
  // @@protoc_insertion_point(field_get:onebot.SetGroupSpecialTitleReq.special_title)
  return _internal_special_title();
}
inline void SetGroupSpecialTitleReq::set_special_title(const std::string& value) {
  _internal_set_special_title(value);
  // @@protoc_insertion_point(field_set:onebot.SetGroupSpecialTitleReq.special_title)
}
inline std::string* SetGroupSpecialTitleReq::mutable_special_title() {
  // @@protoc_insertion_point(field_mutable:onebot.SetGroupSpecialTitleReq.special_title)
  return _internal_mutable_special_title();
}
inline const std::string& SetGroupSpecialTitleReq::_internal_special_title() const {
  return special_title_.Get();
}
inline void SetGroupSpecialTitleReq::_internal_set_special_title(const std::string& value) {
  
  special_title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SetGroupSpecialTitleReq::set_special_title(std::string&& value) {
  
  special_title_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:onebot.SetGroupSpecialTitleReq.special_title)
}
inline void SetGroupSpecialTitleReq::set_special_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  special_title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:onebot.SetGroupSpecialTitleReq.special_title)
}
inline void SetGroupSpecialTitleReq::set_special_title(const char* value,
    size_t size) {
  
  special_title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:onebot.SetGroupSpecialTitleReq.special_title)
}
inline std::string* SetGroupSpecialTitleReq::_internal_mutable_special_title() {
  
  return special_title_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SetGroupSpecialTitleReq::release_special_title() {
  // @@protoc_insertion_point(field_release:onebot.SetGroupSpecialTitleReq.special_title)
  return special_title_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetGroupSpecialTitleReq::set_allocated_special_title(std::string* special_title) {
  if (special_title != nullptr) {
    
  } else {
    
  }
  special_title_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), special_title,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:onebot.SetGroupSpecialTitleReq.special_title)
}

// int64 duration = 4;
inline void SetGroupSpecialTitleReq::clear_duration() {
  duration_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SetGroupSpecialTitleReq::_internal_duration() const {
  return duration_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SetGroupSpecialTitleReq::duration() const {
  // @@protoc_insertion_point(field_get:onebot.SetGroupSpecialTitleReq.duration)
  return _internal_duration();
}
inline void SetGroupSpecialTitleReq::_internal_set_duration(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  duration_ = value;
}
inline void SetGroupSpecialTitleReq::set_duration(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:onebot.SetGroupSpecialTitleReq.duration)
}

// -------------------------------------------------------------------

// SetGroupSpecialTitleResp

// -------------------------------------------------------------------

// SetFriendAddRequestReq

// string flag = 1;
inline void SetFriendAddRequestReq::clear_flag() {
  flag_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SetFriendAddRequestReq::flag() const {
  // @@protoc_insertion_point(field_get:onebot.SetFriendAddRequestReq.flag)
  return _internal_flag();
}
inline void SetFriendAddRequestReq::set_flag(const std::string& value) {
  _internal_set_flag(value);
  // @@protoc_insertion_point(field_set:onebot.SetFriendAddRequestReq.flag)
}
inline std::string* SetFriendAddRequestReq::mutable_flag() {
  // @@protoc_insertion_point(field_mutable:onebot.SetFriendAddRequestReq.flag)
  return _internal_mutable_flag();
}
inline const std::string& SetFriendAddRequestReq::_internal_flag() const {
  return flag_.Get();
}
inline void SetFriendAddRequestReq::_internal_set_flag(const std::string& value) {
  
  flag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SetFriendAddRequestReq::set_flag(std::string&& value) {
  
  flag_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:onebot.SetFriendAddRequestReq.flag)
}
inline void SetFriendAddRequestReq::set_flag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  flag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:onebot.SetFriendAddRequestReq.flag)
}
inline void SetFriendAddRequestReq::set_flag(const char* value,
    size_t size) {
  
  flag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:onebot.SetFriendAddRequestReq.flag)
}
inline std::string* SetFriendAddRequestReq::_internal_mutable_flag() {
  
  return flag_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SetFriendAddRequestReq::release_flag() {
  // @@protoc_insertion_point(field_release:onebot.SetFriendAddRequestReq.flag)
  return flag_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetFriendAddRequestReq::set_allocated_flag(std::string* flag) {
  if (flag != nullptr) {
    
  } else {
    
  }
  flag_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), flag,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:onebot.SetFriendAddRequestReq.flag)
}

// bool approve = 2;
inline void SetFriendAddRequestReq::clear_approve() {
  approve_ = false;
}
inline bool SetFriendAddRequestReq::_internal_approve() const {
  return approve_;
}
inline bool SetFriendAddRequestReq::approve() const {
  // @@protoc_insertion_point(field_get:onebot.SetFriendAddRequestReq.approve)
  return _internal_approve();
}
inline void SetFriendAddRequestReq::_internal_set_approve(bool value) {
  
  approve_ = value;
}
inline void SetFriendAddRequestReq::set_approve(bool value) {
  _internal_set_approve(value);
  // @@protoc_insertion_point(field_set:onebot.SetFriendAddRequestReq.approve)
}

// string remark = 3;
inline void SetFriendAddRequestReq::clear_remark() {
  remark_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SetFriendAddRequestReq::remark() const {
  // @@protoc_insertion_point(field_get:onebot.SetFriendAddRequestReq.remark)
  return _internal_remark();
}
inline void SetFriendAddRequestReq::set_remark(const std::string& value) {
  _internal_set_remark(value);
  // @@protoc_insertion_point(field_set:onebot.SetFriendAddRequestReq.remark)
}
inline std::string* SetFriendAddRequestReq::mutable_remark() {
  // @@protoc_insertion_point(field_mutable:onebot.SetFriendAddRequestReq.remark)
  return _internal_mutable_remark();
}
inline const std::string& SetFriendAddRequestReq::_internal_remark() const {
  return remark_.Get();
}
inline void SetFriendAddRequestReq::_internal_set_remark(const std::string& value) {
  
  remark_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SetFriendAddRequestReq::set_remark(std::string&& value) {
  
  remark_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:onebot.SetFriendAddRequestReq.remark)
}
inline void SetFriendAddRequestReq::set_remark(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  remark_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:onebot.SetFriendAddRequestReq.remark)
}
inline void SetFriendAddRequestReq::set_remark(const char* value,
    size_t size) {
  
  remark_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:onebot.SetFriendAddRequestReq.remark)
}
inline std::string* SetFriendAddRequestReq::_internal_mutable_remark() {
  
  return remark_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SetFriendAddRequestReq::release_remark() {
  // @@protoc_insertion_point(field_release:onebot.SetFriendAddRequestReq.remark)
  return remark_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetFriendAddRequestReq::set_allocated_remark(std::string* remark) {
  if (remark != nullptr) {
    
  } else {
    
  }
  remark_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), remark,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:onebot.SetFriendAddRequestReq.remark)
}

// -------------------------------------------------------------------

// SetFriendAddRequestResp

// -------------------------------------------------------------------

// SetGroupAddRequestReq

// string flag = 1;
inline void SetGroupAddRequestReq::clear_flag() {
  flag_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SetGroupAddRequestReq::flag() const {
  // @@protoc_insertion_point(field_get:onebot.SetGroupAddRequestReq.flag)
  return _internal_flag();
}
inline void SetGroupAddRequestReq::set_flag(const std::string& value) {
  _internal_set_flag(value);
  // @@protoc_insertion_point(field_set:onebot.SetGroupAddRequestReq.flag)
}
inline std::string* SetGroupAddRequestReq::mutable_flag() {
  // @@protoc_insertion_point(field_mutable:onebot.SetGroupAddRequestReq.flag)
  return _internal_mutable_flag();
}
inline const std::string& SetGroupAddRequestReq::_internal_flag() const {
  return flag_.Get();
}
inline void SetGroupAddRequestReq::_internal_set_flag(const std::string& value) {
  
  flag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SetGroupAddRequestReq::set_flag(std::string&& value) {
  
  flag_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:onebot.SetGroupAddRequestReq.flag)
}
inline void SetGroupAddRequestReq::set_flag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  flag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:onebot.SetGroupAddRequestReq.flag)
}
inline void SetGroupAddRequestReq::set_flag(const char* value,
    size_t size) {
  
  flag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:onebot.SetGroupAddRequestReq.flag)
}
inline std::string* SetGroupAddRequestReq::_internal_mutable_flag() {
  
  return flag_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SetGroupAddRequestReq::release_flag() {
  // @@protoc_insertion_point(field_release:onebot.SetGroupAddRequestReq.flag)
  return flag_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetGroupAddRequestReq::set_allocated_flag(std::string* flag) {
  if (flag != nullptr) {
    
  } else {
    
  }
  flag_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), flag,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:onebot.SetGroupAddRequestReq.flag)
}

// string sub_type = 2;
inline void SetGroupAddRequestReq::clear_sub_type() {
  sub_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SetGroupAddRequestReq::sub_type() const {
  // @@protoc_insertion_point(field_get:onebot.SetGroupAddRequestReq.sub_type)
  return _internal_sub_type();
}
inline void SetGroupAddRequestReq::set_sub_type(const std::string& value) {
  _internal_set_sub_type(value);
  // @@protoc_insertion_point(field_set:onebot.SetGroupAddRequestReq.sub_type)
}
inline std::string* SetGroupAddRequestReq::mutable_sub_type() {
  // @@protoc_insertion_point(field_mutable:onebot.SetGroupAddRequestReq.sub_type)
  return _internal_mutable_sub_type();
}
inline const std::string& SetGroupAddRequestReq::_internal_sub_type() const {
  return sub_type_.Get();
}
inline void SetGroupAddRequestReq::_internal_set_sub_type(const std::string& value) {
  
  sub_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SetGroupAddRequestReq::set_sub_type(std::string&& value) {
  
  sub_type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:onebot.SetGroupAddRequestReq.sub_type)
}
inline void SetGroupAddRequestReq::set_sub_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sub_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:onebot.SetGroupAddRequestReq.sub_type)
}
inline void SetGroupAddRequestReq::set_sub_type(const char* value,
    size_t size) {
  
  sub_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:onebot.SetGroupAddRequestReq.sub_type)
}
inline std::string* SetGroupAddRequestReq::_internal_mutable_sub_type() {
  
  return sub_type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SetGroupAddRequestReq::release_sub_type() {
  // @@protoc_insertion_point(field_release:onebot.SetGroupAddRequestReq.sub_type)
  return sub_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetGroupAddRequestReq::set_allocated_sub_type(std::string* sub_type) {
  if (sub_type != nullptr) {
    
  } else {
    
  }
  sub_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sub_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:onebot.SetGroupAddRequestReq.sub_type)
}

// string type = 3;
inline void SetGroupAddRequestReq::clear_type() {
  type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SetGroupAddRequestReq::type() const {
  // @@protoc_insertion_point(field_get:onebot.SetGroupAddRequestReq.type)
  return _internal_type();
}
inline void SetGroupAddRequestReq::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:onebot.SetGroupAddRequestReq.type)
}
inline std::string* SetGroupAddRequestReq::mutable_type() {
  // @@protoc_insertion_point(field_mutable:onebot.SetGroupAddRequestReq.type)
  return _internal_mutable_type();
}
inline const std::string& SetGroupAddRequestReq::_internal_type() const {
  return type_.Get();
}
inline void SetGroupAddRequestReq::_internal_set_type(const std::string& value) {
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SetGroupAddRequestReq::set_type(std::string&& value) {
  
  type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:onebot.SetGroupAddRequestReq.type)
}
inline void SetGroupAddRequestReq::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:onebot.SetGroupAddRequestReq.type)
}
inline void SetGroupAddRequestReq::set_type(const char* value,
    size_t size) {
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:onebot.SetGroupAddRequestReq.type)
}
inline std::string* SetGroupAddRequestReq::_internal_mutable_type() {
  
  return type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SetGroupAddRequestReq::release_type() {
  // @@protoc_insertion_point(field_release:onebot.SetGroupAddRequestReq.type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetGroupAddRequestReq::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:onebot.SetGroupAddRequestReq.type)
}

// bool approve = 4;
inline void SetGroupAddRequestReq::clear_approve() {
  approve_ = false;
}
inline bool SetGroupAddRequestReq::_internal_approve() const {
  return approve_;
}
inline bool SetGroupAddRequestReq::approve() const {
  // @@protoc_insertion_point(field_get:onebot.SetGroupAddRequestReq.approve)
  return _internal_approve();
}
inline void SetGroupAddRequestReq::_internal_set_approve(bool value) {
  
  approve_ = value;
}
inline void SetGroupAddRequestReq::set_approve(bool value) {
  _internal_set_approve(value);
  // @@protoc_insertion_point(field_set:onebot.SetGroupAddRequestReq.approve)
}

// string reason = 5;
inline void SetGroupAddRequestReq::clear_reason() {
  reason_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SetGroupAddRequestReq::reason() const {
  // @@protoc_insertion_point(field_get:onebot.SetGroupAddRequestReq.reason)
  return _internal_reason();
}
inline void SetGroupAddRequestReq::set_reason(const std::string& value) {
  _internal_set_reason(value);
  // @@protoc_insertion_point(field_set:onebot.SetGroupAddRequestReq.reason)
}
inline std::string* SetGroupAddRequestReq::mutable_reason() {
  // @@protoc_insertion_point(field_mutable:onebot.SetGroupAddRequestReq.reason)
  return _internal_mutable_reason();
}
inline const std::string& SetGroupAddRequestReq::_internal_reason() const {
  return reason_.Get();
}
inline void SetGroupAddRequestReq::_internal_set_reason(const std::string& value) {
  
  reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SetGroupAddRequestReq::set_reason(std::string&& value) {
  
  reason_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:onebot.SetGroupAddRequestReq.reason)
}
inline void SetGroupAddRequestReq::set_reason(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:onebot.SetGroupAddRequestReq.reason)
}
inline void SetGroupAddRequestReq::set_reason(const char* value,
    size_t size) {
  
  reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:onebot.SetGroupAddRequestReq.reason)
}
inline std::string* SetGroupAddRequestReq::_internal_mutable_reason() {
  
  return reason_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SetGroupAddRequestReq::release_reason() {
  // @@protoc_insertion_point(field_release:onebot.SetGroupAddRequestReq.reason)
  return reason_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetGroupAddRequestReq::set_allocated_reason(std::string* reason) {
  if (reason != nullptr) {
    
  } else {
    
  }
  reason_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reason,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:onebot.SetGroupAddRequestReq.reason)
}

// -------------------------------------------------------------------

// SetGroupAddRequestResp

// -------------------------------------------------------------------

// GetLoginInfoReq

// -------------------------------------------------------------------

// GetLoginInfoResp

// int64 user_id = 1;
inline void GetLoginInfoResp::clear_user_id() {
  user_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetLoginInfoResp::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetLoginInfoResp::user_id() const {
  // @@protoc_insertion_point(field_get:onebot.GetLoginInfoResp.user_id)
  return _internal_user_id();
}
inline void GetLoginInfoResp::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  user_id_ = value;
}
inline void GetLoginInfoResp::set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:onebot.GetLoginInfoResp.user_id)
}

// string nickname = 2;
inline void GetLoginInfoResp::clear_nickname() {
  nickname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetLoginInfoResp::nickname() const {
  // @@protoc_insertion_point(field_get:onebot.GetLoginInfoResp.nickname)
  return _internal_nickname();
}
inline void GetLoginInfoResp::set_nickname(const std::string& value) {
  _internal_set_nickname(value);
  // @@protoc_insertion_point(field_set:onebot.GetLoginInfoResp.nickname)
}
inline std::string* GetLoginInfoResp::mutable_nickname() {
  // @@protoc_insertion_point(field_mutable:onebot.GetLoginInfoResp.nickname)
  return _internal_mutable_nickname();
}
inline const std::string& GetLoginInfoResp::_internal_nickname() const {
  return nickname_.Get();
}
inline void GetLoginInfoResp::_internal_set_nickname(const std::string& value) {
  
  nickname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetLoginInfoResp::set_nickname(std::string&& value) {
  
  nickname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:onebot.GetLoginInfoResp.nickname)
}
inline void GetLoginInfoResp::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nickname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:onebot.GetLoginInfoResp.nickname)
}
inline void GetLoginInfoResp::set_nickname(const char* value,
    size_t size) {
  
  nickname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:onebot.GetLoginInfoResp.nickname)
}
inline std::string* GetLoginInfoResp::_internal_mutable_nickname() {
  
  return nickname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetLoginInfoResp::release_nickname() {
  // @@protoc_insertion_point(field_release:onebot.GetLoginInfoResp.nickname)
  return nickname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetLoginInfoResp::set_allocated_nickname(std::string* nickname) {
  if (nickname != nullptr) {
    
  } else {
    
  }
  nickname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nickname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:onebot.GetLoginInfoResp.nickname)
}

// -------------------------------------------------------------------

// GetStrangerInfoReq

// int64 user_id = 1;
inline void GetStrangerInfoReq::clear_user_id() {
  user_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetStrangerInfoReq::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetStrangerInfoReq::user_id() const {
  // @@protoc_insertion_point(field_get:onebot.GetStrangerInfoReq.user_id)
  return _internal_user_id();
}
inline void GetStrangerInfoReq::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  user_id_ = value;
}
inline void GetStrangerInfoReq::set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:onebot.GetStrangerInfoReq.user_id)
}

// bool no_cache = 2;
inline void GetStrangerInfoReq::clear_no_cache() {
  no_cache_ = false;
}
inline bool GetStrangerInfoReq::_internal_no_cache() const {
  return no_cache_;
}
inline bool GetStrangerInfoReq::no_cache() const {
  // @@protoc_insertion_point(field_get:onebot.GetStrangerInfoReq.no_cache)
  return _internal_no_cache();
}
inline void GetStrangerInfoReq::_internal_set_no_cache(bool value) {
  
  no_cache_ = value;
}
inline void GetStrangerInfoReq::set_no_cache(bool value) {
  _internal_set_no_cache(value);
  // @@protoc_insertion_point(field_set:onebot.GetStrangerInfoReq.no_cache)
}

// -------------------------------------------------------------------

// GetStrangerInfoResp

// int64 user_id = 1;
inline void GetStrangerInfoResp::clear_user_id() {
  user_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetStrangerInfoResp::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetStrangerInfoResp::user_id() const {
  // @@protoc_insertion_point(field_get:onebot.GetStrangerInfoResp.user_id)
  return _internal_user_id();
}
inline void GetStrangerInfoResp::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  user_id_ = value;
}
inline void GetStrangerInfoResp::set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:onebot.GetStrangerInfoResp.user_id)
}

// string nickname = 2;
inline void GetStrangerInfoResp::clear_nickname() {
  nickname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetStrangerInfoResp::nickname() const {
  // @@protoc_insertion_point(field_get:onebot.GetStrangerInfoResp.nickname)
  return _internal_nickname();
}
inline void GetStrangerInfoResp::set_nickname(const std::string& value) {
  _internal_set_nickname(value);
  // @@protoc_insertion_point(field_set:onebot.GetStrangerInfoResp.nickname)
}
inline std::string* GetStrangerInfoResp::mutable_nickname() {
  // @@protoc_insertion_point(field_mutable:onebot.GetStrangerInfoResp.nickname)
  return _internal_mutable_nickname();
}
inline const std::string& GetStrangerInfoResp::_internal_nickname() const {
  return nickname_.Get();
}
inline void GetStrangerInfoResp::_internal_set_nickname(const std::string& value) {
  
  nickname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetStrangerInfoResp::set_nickname(std::string&& value) {
  
  nickname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:onebot.GetStrangerInfoResp.nickname)
}
inline void GetStrangerInfoResp::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nickname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:onebot.GetStrangerInfoResp.nickname)
}
inline void GetStrangerInfoResp::set_nickname(const char* value,
    size_t size) {
  
  nickname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:onebot.GetStrangerInfoResp.nickname)
}
inline std::string* GetStrangerInfoResp::_internal_mutable_nickname() {
  
  return nickname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetStrangerInfoResp::release_nickname() {
  // @@protoc_insertion_point(field_release:onebot.GetStrangerInfoResp.nickname)
  return nickname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetStrangerInfoResp::set_allocated_nickname(std::string* nickname) {
  if (nickname != nullptr) {
    
  } else {
    
  }
  nickname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nickname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:onebot.GetStrangerInfoResp.nickname)
}

// string sex = 3;
inline void GetStrangerInfoResp::clear_sex() {
  sex_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetStrangerInfoResp::sex() const {
  // @@protoc_insertion_point(field_get:onebot.GetStrangerInfoResp.sex)
  return _internal_sex();
}
inline void GetStrangerInfoResp::set_sex(const std::string& value) {
  _internal_set_sex(value);
  // @@protoc_insertion_point(field_set:onebot.GetStrangerInfoResp.sex)
}
inline std::string* GetStrangerInfoResp::mutable_sex() {
  // @@protoc_insertion_point(field_mutable:onebot.GetStrangerInfoResp.sex)
  return _internal_mutable_sex();
}
inline const std::string& GetStrangerInfoResp::_internal_sex() const {
  return sex_.Get();
}
inline void GetStrangerInfoResp::_internal_set_sex(const std::string& value) {
  
  sex_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetStrangerInfoResp::set_sex(std::string&& value) {
  
  sex_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:onebot.GetStrangerInfoResp.sex)
}
inline void GetStrangerInfoResp::set_sex(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sex_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:onebot.GetStrangerInfoResp.sex)
}
inline void GetStrangerInfoResp::set_sex(const char* value,
    size_t size) {
  
  sex_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:onebot.GetStrangerInfoResp.sex)
}
inline std::string* GetStrangerInfoResp::_internal_mutable_sex() {
  
  return sex_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetStrangerInfoResp::release_sex() {
  // @@protoc_insertion_point(field_release:onebot.GetStrangerInfoResp.sex)
  return sex_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetStrangerInfoResp::set_allocated_sex(std::string* sex) {
  if (sex != nullptr) {
    
  } else {
    
  }
  sex_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sex,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:onebot.GetStrangerInfoResp.sex)
}

// int32 age = 4;
inline void GetStrangerInfoResp::clear_age() {
  age_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetStrangerInfoResp::_internal_age() const {
  return age_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetStrangerInfoResp::age() const {
  // @@protoc_insertion_point(field_get:onebot.GetStrangerInfoResp.age)
  return _internal_age();
}
inline void GetStrangerInfoResp::_internal_set_age(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  age_ = value;
}
inline void GetStrangerInfoResp::set_age(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_age(value);
  // @@protoc_insertion_point(field_set:onebot.GetStrangerInfoResp.age)
}

// -------------------------------------------------------------------

// GetFriendListReq

// -------------------------------------------------------------------

// GetFriendListResp_Friend

// int64 user_id = 1;
inline void GetFriendListResp_Friend::clear_user_id() {
  user_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetFriendListResp_Friend::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetFriendListResp_Friend::user_id() const {
  // @@protoc_insertion_point(field_get:onebot.GetFriendListResp.Friend.user_id)
  return _internal_user_id();
}
inline void GetFriendListResp_Friend::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  user_id_ = value;
}
inline void GetFriendListResp_Friend::set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:onebot.GetFriendListResp.Friend.user_id)
}

// string nickname = 2;
inline void GetFriendListResp_Friend::clear_nickname() {
  nickname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetFriendListResp_Friend::nickname() const {
  // @@protoc_insertion_point(field_get:onebot.GetFriendListResp.Friend.nickname)
  return _internal_nickname();
}
inline void GetFriendListResp_Friend::set_nickname(const std::string& value) {
  _internal_set_nickname(value);
  // @@protoc_insertion_point(field_set:onebot.GetFriendListResp.Friend.nickname)
}
inline std::string* GetFriendListResp_Friend::mutable_nickname() {
  // @@protoc_insertion_point(field_mutable:onebot.GetFriendListResp.Friend.nickname)
  return _internal_mutable_nickname();
}
inline const std::string& GetFriendListResp_Friend::_internal_nickname() const {
  return nickname_.Get();
}
inline void GetFriendListResp_Friend::_internal_set_nickname(const std::string& value) {
  
  nickname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetFriendListResp_Friend::set_nickname(std::string&& value) {
  
  nickname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:onebot.GetFriendListResp.Friend.nickname)
}
inline void GetFriendListResp_Friend::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nickname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:onebot.GetFriendListResp.Friend.nickname)
}
inline void GetFriendListResp_Friend::set_nickname(const char* value,
    size_t size) {
  
  nickname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:onebot.GetFriendListResp.Friend.nickname)
}
inline std::string* GetFriendListResp_Friend::_internal_mutable_nickname() {
  
  return nickname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetFriendListResp_Friend::release_nickname() {
  // @@protoc_insertion_point(field_release:onebot.GetFriendListResp.Friend.nickname)
  return nickname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetFriendListResp_Friend::set_allocated_nickname(std::string* nickname) {
  if (nickname != nullptr) {
    
  } else {
    
  }
  nickname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nickname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:onebot.GetFriendListResp.Friend.nickname)
}

// string remark = 3;
inline void GetFriendListResp_Friend::clear_remark() {
  remark_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetFriendListResp_Friend::remark() const {
  // @@protoc_insertion_point(field_get:onebot.GetFriendListResp.Friend.remark)
  return _internal_remark();
}
inline void GetFriendListResp_Friend::set_remark(const std::string& value) {
  _internal_set_remark(value);
  // @@protoc_insertion_point(field_set:onebot.GetFriendListResp.Friend.remark)
}
inline std::string* GetFriendListResp_Friend::mutable_remark() {
  // @@protoc_insertion_point(field_mutable:onebot.GetFriendListResp.Friend.remark)
  return _internal_mutable_remark();
}
inline const std::string& GetFriendListResp_Friend::_internal_remark() const {
  return remark_.Get();
}
inline void GetFriendListResp_Friend::_internal_set_remark(const std::string& value) {
  
  remark_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetFriendListResp_Friend::set_remark(std::string&& value) {
  
  remark_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:onebot.GetFriendListResp.Friend.remark)
}
inline void GetFriendListResp_Friend::set_remark(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  remark_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:onebot.GetFriendListResp.Friend.remark)
}
inline void GetFriendListResp_Friend::set_remark(const char* value,
    size_t size) {
  
  remark_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:onebot.GetFriendListResp.Friend.remark)
}
inline std::string* GetFriendListResp_Friend::_internal_mutable_remark() {
  
  return remark_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetFriendListResp_Friend::release_remark() {
  // @@protoc_insertion_point(field_release:onebot.GetFriendListResp.Friend.remark)
  return remark_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetFriendListResp_Friend::set_allocated_remark(std::string* remark) {
  if (remark != nullptr) {
    
  } else {
    
  }
  remark_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), remark,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:onebot.GetFriendListResp.Friend.remark)
}

// -------------------------------------------------------------------

// GetFriendListResp

// repeated .onebot.GetFriendListResp.Friend friend_list = 1;
inline int GetFriendListResp::_internal_friend_list_size() const {
  return friend_list_.size();
}
inline int GetFriendListResp::friend_list_size() const {
  return _internal_friend_list_size();
}
inline void GetFriendListResp::clear_friend_list() {
  friend_list_.Clear();
}
inline ::onebot::GetFriendListResp_Friend* GetFriendListResp::mutable_friend_list(int index) {
  // @@protoc_insertion_point(field_mutable:onebot.GetFriendListResp.friend_list)
  return friend_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onebot::GetFriendListResp_Friend >*
GetFriendListResp::mutable_friend_list() {
  // @@protoc_insertion_point(field_mutable_list:onebot.GetFriendListResp.friend_list)
  return &friend_list_;
}
inline const ::onebot::GetFriendListResp_Friend& GetFriendListResp::_internal_friend_list(int index) const {
  return friend_list_.Get(index);
}
inline const ::onebot::GetFriendListResp_Friend& GetFriendListResp::friend_list(int index) const {
  // @@protoc_insertion_point(field_get:onebot.GetFriendListResp.friend_list)
  return _internal_friend_list(index);
}
inline ::onebot::GetFriendListResp_Friend* GetFriendListResp::_internal_add_friend_list() {
  return friend_list_.Add();
}
inline ::onebot::GetFriendListResp_Friend* GetFriendListResp::add_friend_list() {
  // @@protoc_insertion_point(field_add:onebot.GetFriendListResp.friend_list)
  return _internal_add_friend_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onebot::GetFriendListResp_Friend >&
GetFriendListResp::friend_list() const {
  // @@protoc_insertion_point(field_list:onebot.GetFriendListResp.friend_list)
  return friend_list_;
}

// -------------------------------------------------------------------

// GetGroupInfoReq

// int64 group_id = 1;
inline void GetGroupInfoReq::clear_group_id() {
  group_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetGroupInfoReq::_internal_group_id() const {
  return group_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetGroupInfoReq::group_id() const {
  // @@protoc_insertion_point(field_get:onebot.GetGroupInfoReq.group_id)
  return _internal_group_id();
}
inline void GetGroupInfoReq::_internal_set_group_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  group_id_ = value;
}
inline void GetGroupInfoReq::set_group_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:onebot.GetGroupInfoReq.group_id)
}

// bool no_cache = 2;
inline void GetGroupInfoReq::clear_no_cache() {
  no_cache_ = false;
}
inline bool GetGroupInfoReq::_internal_no_cache() const {
  return no_cache_;
}
inline bool GetGroupInfoReq::no_cache() const {
  // @@protoc_insertion_point(field_get:onebot.GetGroupInfoReq.no_cache)
  return _internal_no_cache();
}
inline void GetGroupInfoReq::_internal_set_no_cache(bool value) {
  
  no_cache_ = value;
}
inline void GetGroupInfoReq::set_no_cache(bool value) {
  _internal_set_no_cache(value);
  // @@protoc_insertion_point(field_set:onebot.GetGroupInfoReq.no_cache)
}

// -------------------------------------------------------------------

// GetGroupInfoResp

// int64 group_id = 1;
inline void GetGroupInfoResp::clear_group_id() {
  group_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetGroupInfoResp::_internal_group_id() const {
  return group_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetGroupInfoResp::group_id() const {
  // @@protoc_insertion_point(field_get:onebot.GetGroupInfoResp.group_id)
  return _internal_group_id();
}
inline void GetGroupInfoResp::_internal_set_group_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  group_id_ = value;
}
inline void GetGroupInfoResp::set_group_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:onebot.GetGroupInfoResp.group_id)
}

// string group_name = 2;
inline void GetGroupInfoResp::clear_group_name() {
  group_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetGroupInfoResp::group_name() const {
  // @@protoc_insertion_point(field_get:onebot.GetGroupInfoResp.group_name)
  return _internal_group_name();
}
inline void GetGroupInfoResp::set_group_name(const std::string& value) {
  _internal_set_group_name(value);
  // @@protoc_insertion_point(field_set:onebot.GetGroupInfoResp.group_name)
}
inline std::string* GetGroupInfoResp::mutable_group_name() {
  // @@protoc_insertion_point(field_mutable:onebot.GetGroupInfoResp.group_name)
  return _internal_mutable_group_name();
}
inline const std::string& GetGroupInfoResp::_internal_group_name() const {
  return group_name_.Get();
}
inline void GetGroupInfoResp::_internal_set_group_name(const std::string& value) {
  
  group_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetGroupInfoResp::set_group_name(std::string&& value) {
  
  group_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:onebot.GetGroupInfoResp.group_name)
}
inline void GetGroupInfoResp::set_group_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  group_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:onebot.GetGroupInfoResp.group_name)
}
inline void GetGroupInfoResp::set_group_name(const char* value,
    size_t size) {
  
  group_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:onebot.GetGroupInfoResp.group_name)
}
inline std::string* GetGroupInfoResp::_internal_mutable_group_name() {
  
  return group_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetGroupInfoResp::release_group_name() {
  // @@protoc_insertion_point(field_release:onebot.GetGroupInfoResp.group_name)
  return group_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetGroupInfoResp::set_allocated_group_name(std::string* group_name) {
  if (group_name != nullptr) {
    
  } else {
    
  }
  group_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), group_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:onebot.GetGroupInfoResp.group_name)
}

// int32 member_count = 3;
inline void GetGroupInfoResp::clear_member_count() {
  member_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetGroupInfoResp::_internal_member_count() const {
  return member_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetGroupInfoResp::member_count() const {
  // @@protoc_insertion_point(field_get:onebot.GetGroupInfoResp.member_count)
  return _internal_member_count();
}
inline void GetGroupInfoResp::_internal_set_member_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  member_count_ = value;
}
inline void GetGroupInfoResp::set_member_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_member_count(value);
  // @@protoc_insertion_point(field_set:onebot.GetGroupInfoResp.member_count)
}

// int32 max_member_count = 4;
inline void GetGroupInfoResp::clear_max_member_count() {
  max_member_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetGroupInfoResp::_internal_max_member_count() const {
  return max_member_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetGroupInfoResp::max_member_count() const {
  // @@protoc_insertion_point(field_get:onebot.GetGroupInfoResp.max_member_count)
  return _internal_max_member_count();
}
inline void GetGroupInfoResp::_internal_set_max_member_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  max_member_count_ = value;
}
inline void GetGroupInfoResp::set_max_member_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max_member_count(value);
  // @@protoc_insertion_point(field_set:onebot.GetGroupInfoResp.max_member_count)
}

// -------------------------------------------------------------------

// GetGroupListReq

// -------------------------------------------------------------------

// GetGroupListResp_Group

// int64 group_id = 1;
inline void GetGroupListResp_Group::clear_group_id() {
  group_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetGroupListResp_Group::_internal_group_id() const {
  return group_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetGroupListResp_Group::group_id() const {
  // @@protoc_insertion_point(field_get:onebot.GetGroupListResp.Group.group_id)
  return _internal_group_id();
}
inline void GetGroupListResp_Group::_internal_set_group_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  group_id_ = value;
}
inline void GetGroupListResp_Group::set_group_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:onebot.GetGroupListResp.Group.group_id)
}

// string group_name = 2;
inline void GetGroupListResp_Group::clear_group_name() {
  group_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetGroupListResp_Group::group_name() const {
  // @@protoc_insertion_point(field_get:onebot.GetGroupListResp.Group.group_name)
  return _internal_group_name();
}
inline void GetGroupListResp_Group::set_group_name(const std::string& value) {
  _internal_set_group_name(value);
  // @@protoc_insertion_point(field_set:onebot.GetGroupListResp.Group.group_name)
}
inline std::string* GetGroupListResp_Group::mutable_group_name() {
  // @@protoc_insertion_point(field_mutable:onebot.GetGroupListResp.Group.group_name)
  return _internal_mutable_group_name();
}
inline const std::string& GetGroupListResp_Group::_internal_group_name() const {
  return group_name_.Get();
}
inline void GetGroupListResp_Group::_internal_set_group_name(const std::string& value) {
  
  group_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetGroupListResp_Group::set_group_name(std::string&& value) {
  
  group_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:onebot.GetGroupListResp.Group.group_name)
}
inline void GetGroupListResp_Group::set_group_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  group_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:onebot.GetGroupListResp.Group.group_name)
}
inline void GetGroupListResp_Group::set_group_name(const char* value,
    size_t size) {
  
  group_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:onebot.GetGroupListResp.Group.group_name)
}
inline std::string* GetGroupListResp_Group::_internal_mutable_group_name() {
  
  return group_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetGroupListResp_Group::release_group_name() {
  // @@protoc_insertion_point(field_release:onebot.GetGroupListResp.Group.group_name)
  return group_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetGroupListResp_Group::set_allocated_group_name(std::string* group_name) {
  if (group_name != nullptr) {
    
  } else {
    
  }
  group_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), group_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:onebot.GetGroupListResp.Group.group_name)
}

// int32 member_count = 3;
inline void GetGroupListResp_Group::clear_member_count() {
  member_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetGroupListResp_Group::_internal_member_count() const {
  return member_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetGroupListResp_Group::member_count() const {
  // @@protoc_insertion_point(field_get:onebot.GetGroupListResp.Group.member_count)
  return _internal_member_count();
}
inline void GetGroupListResp_Group::_internal_set_member_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  member_count_ = value;
}
inline void GetGroupListResp_Group::set_member_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_member_count(value);
  // @@protoc_insertion_point(field_set:onebot.GetGroupListResp.Group.member_count)
}

// int32 max_member_count = 4;
inline void GetGroupListResp_Group::clear_max_member_count() {
  max_member_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetGroupListResp_Group::_internal_max_member_count() const {
  return max_member_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetGroupListResp_Group::max_member_count() const {
  // @@protoc_insertion_point(field_get:onebot.GetGroupListResp.Group.max_member_count)
  return _internal_max_member_count();
}
inline void GetGroupListResp_Group::_internal_set_max_member_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  max_member_count_ = value;
}
inline void GetGroupListResp_Group::set_max_member_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max_member_count(value);
  // @@protoc_insertion_point(field_set:onebot.GetGroupListResp.Group.max_member_count)
}

// -------------------------------------------------------------------

// GetGroupListResp

// repeated .onebot.GetGroupListResp.Group group_list = 1;
inline int GetGroupListResp::_internal_group_list_size() const {
  return group_list_.size();
}
inline int GetGroupListResp::group_list_size() const {
  return _internal_group_list_size();
}
inline void GetGroupListResp::clear_group_list() {
  group_list_.Clear();
}
inline ::onebot::GetGroupListResp_Group* GetGroupListResp::mutable_group_list(int index) {
  // @@protoc_insertion_point(field_mutable:onebot.GetGroupListResp.group_list)
  return group_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onebot::GetGroupListResp_Group >*
GetGroupListResp::mutable_group_list() {
  // @@protoc_insertion_point(field_mutable_list:onebot.GetGroupListResp.group_list)
  return &group_list_;
}
inline const ::onebot::GetGroupListResp_Group& GetGroupListResp::_internal_group_list(int index) const {
  return group_list_.Get(index);
}
inline const ::onebot::GetGroupListResp_Group& GetGroupListResp::group_list(int index) const {
  // @@protoc_insertion_point(field_get:onebot.GetGroupListResp.group_list)
  return _internal_group_list(index);
}
inline ::onebot::GetGroupListResp_Group* GetGroupListResp::_internal_add_group_list() {
  return group_list_.Add();
}
inline ::onebot::GetGroupListResp_Group* GetGroupListResp::add_group_list() {
  // @@protoc_insertion_point(field_add:onebot.GetGroupListResp.group_list)
  return _internal_add_group_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onebot::GetGroupListResp_Group >&
GetGroupListResp::group_list() const {
  // @@protoc_insertion_point(field_list:onebot.GetGroupListResp.group_list)
  return group_list_;
}

// -------------------------------------------------------------------

// GetGroupMemberInfoReq

// int64 group_id = 1;
inline void GetGroupMemberInfoReq::clear_group_id() {
  group_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetGroupMemberInfoReq::_internal_group_id() const {
  return group_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetGroupMemberInfoReq::group_id() const {
  // @@protoc_insertion_point(field_get:onebot.GetGroupMemberInfoReq.group_id)
  return _internal_group_id();
}
inline void GetGroupMemberInfoReq::_internal_set_group_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  group_id_ = value;
}
inline void GetGroupMemberInfoReq::set_group_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:onebot.GetGroupMemberInfoReq.group_id)
}

// int64 user_id = 2;
inline void GetGroupMemberInfoReq::clear_user_id() {
  user_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetGroupMemberInfoReq::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetGroupMemberInfoReq::user_id() const {
  // @@protoc_insertion_point(field_get:onebot.GetGroupMemberInfoReq.user_id)
  return _internal_user_id();
}
inline void GetGroupMemberInfoReq::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  user_id_ = value;
}
inline void GetGroupMemberInfoReq::set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:onebot.GetGroupMemberInfoReq.user_id)
}

// bool no_cache = 3;
inline void GetGroupMemberInfoReq::clear_no_cache() {
  no_cache_ = false;
}
inline bool GetGroupMemberInfoReq::_internal_no_cache() const {
  return no_cache_;
}
inline bool GetGroupMemberInfoReq::no_cache() const {
  // @@protoc_insertion_point(field_get:onebot.GetGroupMemberInfoReq.no_cache)
  return _internal_no_cache();
}
inline void GetGroupMemberInfoReq::_internal_set_no_cache(bool value) {
  
  no_cache_ = value;
}
inline void GetGroupMemberInfoReq::set_no_cache(bool value) {
  _internal_set_no_cache(value);
  // @@protoc_insertion_point(field_set:onebot.GetGroupMemberInfoReq.no_cache)
}

// -------------------------------------------------------------------

// GetGroupMemberInfoResp

// int64 group_id = 1;
inline void GetGroupMemberInfoResp::clear_group_id() {
  group_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetGroupMemberInfoResp::_internal_group_id() const {
  return group_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetGroupMemberInfoResp::group_id() const {
  // @@protoc_insertion_point(field_get:onebot.GetGroupMemberInfoResp.group_id)
  return _internal_group_id();
}
inline void GetGroupMemberInfoResp::_internal_set_group_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  group_id_ = value;
}
inline void GetGroupMemberInfoResp::set_group_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:onebot.GetGroupMemberInfoResp.group_id)
}

// int64 user_id = 2;
inline void GetGroupMemberInfoResp::clear_user_id() {
  user_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetGroupMemberInfoResp::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetGroupMemberInfoResp::user_id() const {
  // @@protoc_insertion_point(field_get:onebot.GetGroupMemberInfoResp.user_id)
  return _internal_user_id();
}
inline void GetGroupMemberInfoResp::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  user_id_ = value;
}
inline void GetGroupMemberInfoResp::set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:onebot.GetGroupMemberInfoResp.user_id)
}

// string nickname = 3;
inline void GetGroupMemberInfoResp::clear_nickname() {
  nickname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetGroupMemberInfoResp::nickname() const {
  // @@protoc_insertion_point(field_get:onebot.GetGroupMemberInfoResp.nickname)
  return _internal_nickname();
}
inline void GetGroupMemberInfoResp::set_nickname(const std::string& value) {
  _internal_set_nickname(value);
  // @@protoc_insertion_point(field_set:onebot.GetGroupMemberInfoResp.nickname)
}
inline std::string* GetGroupMemberInfoResp::mutable_nickname() {
  // @@protoc_insertion_point(field_mutable:onebot.GetGroupMemberInfoResp.nickname)
  return _internal_mutable_nickname();
}
inline const std::string& GetGroupMemberInfoResp::_internal_nickname() const {
  return nickname_.Get();
}
inline void GetGroupMemberInfoResp::_internal_set_nickname(const std::string& value) {
  
  nickname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetGroupMemberInfoResp::set_nickname(std::string&& value) {
  
  nickname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:onebot.GetGroupMemberInfoResp.nickname)
}
inline void GetGroupMemberInfoResp::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nickname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:onebot.GetGroupMemberInfoResp.nickname)
}
inline void GetGroupMemberInfoResp::set_nickname(const char* value,
    size_t size) {
  
  nickname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:onebot.GetGroupMemberInfoResp.nickname)
}
inline std::string* GetGroupMemberInfoResp::_internal_mutable_nickname() {
  
  return nickname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetGroupMemberInfoResp::release_nickname() {
  // @@protoc_insertion_point(field_release:onebot.GetGroupMemberInfoResp.nickname)
  return nickname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetGroupMemberInfoResp::set_allocated_nickname(std::string* nickname) {
  if (nickname != nullptr) {
    
  } else {
    
  }
  nickname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nickname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:onebot.GetGroupMemberInfoResp.nickname)
}

// string card = 4;
inline void GetGroupMemberInfoResp::clear_card() {
  card_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetGroupMemberInfoResp::card() const {
  // @@protoc_insertion_point(field_get:onebot.GetGroupMemberInfoResp.card)
  return _internal_card();
}
inline void GetGroupMemberInfoResp::set_card(const std::string& value) {
  _internal_set_card(value);
  // @@protoc_insertion_point(field_set:onebot.GetGroupMemberInfoResp.card)
}
inline std::string* GetGroupMemberInfoResp::mutable_card() {
  // @@protoc_insertion_point(field_mutable:onebot.GetGroupMemberInfoResp.card)
  return _internal_mutable_card();
}
inline const std::string& GetGroupMemberInfoResp::_internal_card() const {
  return card_.Get();
}
inline void GetGroupMemberInfoResp::_internal_set_card(const std::string& value) {
  
  card_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetGroupMemberInfoResp::set_card(std::string&& value) {
  
  card_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:onebot.GetGroupMemberInfoResp.card)
}
inline void GetGroupMemberInfoResp::set_card(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  card_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:onebot.GetGroupMemberInfoResp.card)
}
inline void GetGroupMemberInfoResp::set_card(const char* value,
    size_t size) {
  
  card_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:onebot.GetGroupMemberInfoResp.card)
}
inline std::string* GetGroupMemberInfoResp::_internal_mutable_card() {
  
  return card_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetGroupMemberInfoResp::release_card() {
  // @@protoc_insertion_point(field_release:onebot.GetGroupMemberInfoResp.card)
  return card_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetGroupMemberInfoResp::set_allocated_card(std::string* card) {
  if (card != nullptr) {
    
  } else {
    
  }
  card_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), card,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:onebot.GetGroupMemberInfoResp.card)
}

// string sex = 5;
inline void GetGroupMemberInfoResp::clear_sex() {
  sex_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetGroupMemberInfoResp::sex() const {
  // @@protoc_insertion_point(field_get:onebot.GetGroupMemberInfoResp.sex)
  return _internal_sex();
}
inline void GetGroupMemberInfoResp::set_sex(const std::string& value) {
  _internal_set_sex(value);
  // @@protoc_insertion_point(field_set:onebot.GetGroupMemberInfoResp.sex)
}
inline std::string* GetGroupMemberInfoResp::mutable_sex() {
  // @@protoc_insertion_point(field_mutable:onebot.GetGroupMemberInfoResp.sex)
  return _internal_mutable_sex();
}
inline const std::string& GetGroupMemberInfoResp::_internal_sex() const {
  return sex_.Get();
}
inline void GetGroupMemberInfoResp::_internal_set_sex(const std::string& value) {
  
  sex_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetGroupMemberInfoResp::set_sex(std::string&& value) {
  
  sex_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:onebot.GetGroupMemberInfoResp.sex)
}
inline void GetGroupMemberInfoResp::set_sex(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sex_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:onebot.GetGroupMemberInfoResp.sex)
}
inline void GetGroupMemberInfoResp::set_sex(const char* value,
    size_t size) {
  
  sex_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:onebot.GetGroupMemberInfoResp.sex)
}
inline std::string* GetGroupMemberInfoResp::_internal_mutable_sex() {
  
  return sex_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetGroupMemberInfoResp::release_sex() {
  // @@protoc_insertion_point(field_release:onebot.GetGroupMemberInfoResp.sex)
  return sex_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetGroupMemberInfoResp::set_allocated_sex(std::string* sex) {
  if (sex != nullptr) {
    
  } else {
    
  }
  sex_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sex,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:onebot.GetGroupMemberInfoResp.sex)
}

// int32 age = 6;
inline void GetGroupMemberInfoResp::clear_age() {
  age_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetGroupMemberInfoResp::_internal_age() const {
  return age_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetGroupMemberInfoResp::age() const {
  // @@protoc_insertion_point(field_get:onebot.GetGroupMemberInfoResp.age)
  return _internal_age();
}
inline void GetGroupMemberInfoResp::_internal_set_age(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  age_ = value;
}
inline void GetGroupMemberInfoResp::set_age(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_age(value);
  // @@protoc_insertion_point(field_set:onebot.GetGroupMemberInfoResp.age)
}

// string area = 7;
inline void GetGroupMemberInfoResp::clear_area() {
  area_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetGroupMemberInfoResp::area() const {
  // @@protoc_insertion_point(field_get:onebot.GetGroupMemberInfoResp.area)
  return _internal_area();
}
inline void GetGroupMemberInfoResp::set_area(const std::string& value) {
  _internal_set_area(value);
  // @@protoc_insertion_point(field_set:onebot.GetGroupMemberInfoResp.area)
}
inline std::string* GetGroupMemberInfoResp::mutable_area() {
  // @@protoc_insertion_point(field_mutable:onebot.GetGroupMemberInfoResp.area)
  return _internal_mutable_area();
}
inline const std::string& GetGroupMemberInfoResp::_internal_area() const {
  return area_.Get();
}
inline void GetGroupMemberInfoResp::_internal_set_area(const std::string& value) {
  
  area_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetGroupMemberInfoResp::set_area(std::string&& value) {
  
  area_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:onebot.GetGroupMemberInfoResp.area)
}
inline void GetGroupMemberInfoResp::set_area(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  area_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:onebot.GetGroupMemberInfoResp.area)
}
inline void GetGroupMemberInfoResp::set_area(const char* value,
    size_t size) {
  
  area_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:onebot.GetGroupMemberInfoResp.area)
}
inline std::string* GetGroupMemberInfoResp::_internal_mutable_area() {
  
  return area_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetGroupMemberInfoResp::release_area() {
  // @@protoc_insertion_point(field_release:onebot.GetGroupMemberInfoResp.area)
  return area_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetGroupMemberInfoResp::set_allocated_area(std::string* area) {
  if (area != nullptr) {
    
  } else {
    
  }
  area_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), area,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:onebot.GetGroupMemberInfoResp.area)
}

// int32 join_time = 8;
inline void GetGroupMemberInfoResp::clear_join_time() {
  join_time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetGroupMemberInfoResp::_internal_join_time() const {
  return join_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetGroupMemberInfoResp::join_time() const {
  // @@protoc_insertion_point(field_get:onebot.GetGroupMemberInfoResp.join_time)
  return _internal_join_time();
}
inline void GetGroupMemberInfoResp::_internal_set_join_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  join_time_ = value;
}
inline void GetGroupMemberInfoResp::set_join_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_join_time(value);
  // @@protoc_insertion_point(field_set:onebot.GetGroupMemberInfoResp.join_time)
}

// int32 last_sent_time = 9;
inline void GetGroupMemberInfoResp::clear_last_sent_time() {
  last_sent_time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetGroupMemberInfoResp::_internal_last_sent_time() const {
  return last_sent_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetGroupMemberInfoResp::last_sent_time() const {
  // @@protoc_insertion_point(field_get:onebot.GetGroupMemberInfoResp.last_sent_time)
  return _internal_last_sent_time();
}
inline void GetGroupMemberInfoResp::_internal_set_last_sent_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  last_sent_time_ = value;
}
inline void GetGroupMemberInfoResp::set_last_sent_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_last_sent_time(value);
  // @@protoc_insertion_point(field_set:onebot.GetGroupMemberInfoResp.last_sent_time)
}

// string level = 10;
inline void GetGroupMemberInfoResp::clear_level() {
  level_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetGroupMemberInfoResp::level() const {
  // @@protoc_insertion_point(field_get:onebot.GetGroupMemberInfoResp.level)
  return _internal_level();
}
inline void GetGroupMemberInfoResp::set_level(const std::string& value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:onebot.GetGroupMemberInfoResp.level)
}
inline std::string* GetGroupMemberInfoResp::mutable_level() {
  // @@protoc_insertion_point(field_mutable:onebot.GetGroupMemberInfoResp.level)
  return _internal_mutable_level();
}
inline const std::string& GetGroupMemberInfoResp::_internal_level() const {
  return level_.Get();
}
inline void GetGroupMemberInfoResp::_internal_set_level(const std::string& value) {
  
  level_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetGroupMemberInfoResp::set_level(std::string&& value) {
  
  level_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:onebot.GetGroupMemberInfoResp.level)
}
inline void GetGroupMemberInfoResp::set_level(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  level_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:onebot.GetGroupMemberInfoResp.level)
}
inline void GetGroupMemberInfoResp::set_level(const char* value,
    size_t size) {
  
  level_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:onebot.GetGroupMemberInfoResp.level)
}
inline std::string* GetGroupMemberInfoResp::_internal_mutable_level() {
  
  return level_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetGroupMemberInfoResp::release_level() {
  // @@protoc_insertion_point(field_release:onebot.GetGroupMemberInfoResp.level)
  return level_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetGroupMemberInfoResp::set_allocated_level(std::string* level) {
  if (level != nullptr) {
    
  } else {
    
  }
  level_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), level,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:onebot.GetGroupMemberInfoResp.level)
}

// string role = 11;
inline void GetGroupMemberInfoResp::clear_role() {
  role_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetGroupMemberInfoResp::role() const {
  // @@protoc_insertion_point(field_get:onebot.GetGroupMemberInfoResp.role)
  return _internal_role();
}
inline void GetGroupMemberInfoResp::set_role(const std::string& value) {
  _internal_set_role(value);
  // @@protoc_insertion_point(field_set:onebot.GetGroupMemberInfoResp.role)
}
inline std::string* GetGroupMemberInfoResp::mutable_role() {
  // @@protoc_insertion_point(field_mutable:onebot.GetGroupMemberInfoResp.role)
  return _internal_mutable_role();
}
inline const std::string& GetGroupMemberInfoResp::_internal_role() const {
  return role_.Get();
}
inline void GetGroupMemberInfoResp::_internal_set_role(const std::string& value) {
  
  role_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetGroupMemberInfoResp::set_role(std::string&& value) {
  
  role_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:onebot.GetGroupMemberInfoResp.role)
}
inline void GetGroupMemberInfoResp::set_role(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  role_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:onebot.GetGroupMemberInfoResp.role)
}
inline void GetGroupMemberInfoResp::set_role(const char* value,
    size_t size) {
  
  role_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:onebot.GetGroupMemberInfoResp.role)
}
inline std::string* GetGroupMemberInfoResp::_internal_mutable_role() {
  
  return role_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetGroupMemberInfoResp::release_role() {
  // @@protoc_insertion_point(field_release:onebot.GetGroupMemberInfoResp.role)
  return role_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetGroupMemberInfoResp::set_allocated_role(std::string* role) {
  if (role != nullptr) {
    
  } else {
    
  }
  role_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), role,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:onebot.GetGroupMemberInfoResp.role)
}

// bool unfriendly = 12;
inline void GetGroupMemberInfoResp::clear_unfriendly() {
  unfriendly_ = false;
}
inline bool GetGroupMemberInfoResp::_internal_unfriendly() const {
  return unfriendly_;
}
inline bool GetGroupMemberInfoResp::unfriendly() const {
  // @@protoc_insertion_point(field_get:onebot.GetGroupMemberInfoResp.unfriendly)
  return _internal_unfriendly();
}
inline void GetGroupMemberInfoResp::_internal_set_unfriendly(bool value) {
  
  unfriendly_ = value;
}
inline void GetGroupMemberInfoResp::set_unfriendly(bool value) {
  _internal_set_unfriendly(value);
  // @@protoc_insertion_point(field_set:onebot.GetGroupMemberInfoResp.unfriendly)
}

// string title = 13;
inline void GetGroupMemberInfoResp::clear_title() {
  title_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetGroupMemberInfoResp::title() const {
  // @@protoc_insertion_point(field_get:onebot.GetGroupMemberInfoResp.title)
  return _internal_title();
}
inline void GetGroupMemberInfoResp::set_title(const std::string& value) {
  _internal_set_title(value);
  // @@protoc_insertion_point(field_set:onebot.GetGroupMemberInfoResp.title)
}
inline std::string* GetGroupMemberInfoResp::mutable_title() {
  // @@protoc_insertion_point(field_mutable:onebot.GetGroupMemberInfoResp.title)
  return _internal_mutable_title();
}
inline const std::string& GetGroupMemberInfoResp::_internal_title() const {
  return title_.Get();
}
inline void GetGroupMemberInfoResp::_internal_set_title(const std::string& value) {
  
  title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetGroupMemberInfoResp::set_title(std::string&& value) {
  
  title_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:onebot.GetGroupMemberInfoResp.title)
}
inline void GetGroupMemberInfoResp::set_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:onebot.GetGroupMemberInfoResp.title)
}
inline void GetGroupMemberInfoResp::set_title(const char* value,
    size_t size) {
  
  title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:onebot.GetGroupMemberInfoResp.title)
}
inline std::string* GetGroupMemberInfoResp::_internal_mutable_title() {
  
  return title_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetGroupMemberInfoResp::release_title() {
  // @@protoc_insertion_point(field_release:onebot.GetGroupMemberInfoResp.title)
  return title_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetGroupMemberInfoResp::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  title_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:onebot.GetGroupMemberInfoResp.title)
}

// int32 title_expire_time = 14;
inline void GetGroupMemberInfoResp::clear_title_expire_time() {
  title_expire_time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetGroupMemberInfoResp::_internal_title_expire_time() const {
  return title_expire_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetGroupMemberInfoResp::title_expire_time() const {
  // @@protoc_insertion_point(field_get:onebot.GetGroupMemberInfoResp.title_expire_time)
  return _internal_title_expire_time();
}
inline void GetGroupMemberInfoResp::_internal_set_title_expire_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  title_expire_time_ = value;
}
inline void GetGroupMemberInfoResp::set_title_expire_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_title_expire_time(value);
  // @@protoc_insertion_point(field_set:onebot.GetGroupMemberInfoResp.title_expire_time)
}

// bool card_changeable = 15;
inline void GetGroupMemberInfoResp::clear_card_changeable() {
  card_changeable_ = false;
}
inline bool GetGroupMemberInfoResp::_internal_card_changeable() const {
  return card_changeable_;
}
inline bool GetGroupMemberInfoResp::card_changeable() const {
  // @@protoc_insertion_point(field_get:onebot.GetGroupMemberInfoResp.card_changeable)
  return _internal_card_changeable();
}
inline void GetGroupMemberInfoResp::_internal_set_card_changeable(bool value) {
  
  card_changeable_ = value;
}
inline void GetGroupMemberInfoResp::set_card_changeable(bool value) {
  _internal_set_card_changeable(value);
  // @@protoc_insertion_point(field_set:onebot.GetGroupMemberInfoResp.card_changeable)
}

// -------------------------------------------------------------------

// GetGroupMemberListReq

// int64 group_id = 1;
inline void GetGroupMemberListReq::clear_group_id() {
  group_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetGroupMemberListReq::_internal_group_id() const {
  return group_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetGroupMemberListReq::group_id() const {
  // @@protoc_insertion_point(field_get:onebot.GetGroupMemberListReq.group_id)
  return _internal_group_id();
}
inline void GetGroupMemberListReq::_internal_set_group_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  group_id_ = value;
}
inline void GetGroupMemberListReq::set_group_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:onebot.GetGroupMemberListReq.group_id)
}

// -------------------------------------------------------------------

// GetGroupMemberListResp_GroupMember

// int64 group_id = 1;
inline void GetGroupMemberListResp_GroupMember::clear_group_id() {
  group_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetGroupMemberListResp_GroupMember::_internal_group_id() const {
  return group_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetGroupMemberListResp_GroupMember::group_id() const {
  // @@protoc_insertion_point(field_get:onebot.GetGroupMemberListResp.GroupMember.group_id)
  return _internal_group_id();
}
inline void GetGroupMemberListResp_GroupMember::_internal_set_group_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  group_id_ = value;
}
inline void GetGroupMemberListResp_GroupMember::set_group_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:onebot.GetGroupMemberListResp.GroupMember.group_id)
}

// int64 user_id = 2;
inline void GetGroupMemberListResp_GroupMember::clear_user_id() {
  user_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetGroupMemberListResp_GroupMember::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetGroupMemberListResp_GroupMember::user_id() const {
  // @@protoc_insertion_point(field_get:onebot.GetGroupMemberListResp.GroupMember.user_id)
  return _internal_user_id();
}
inline void GetGroupMemberListResp_GroupMember::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  user_id_ = value;
}
inline void GetGroupMemberListResp_GroupMember::set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:onebot.GetGroupMemberListResp.GroupMember.user_id)
}

// string nickname = 3;
inline void GetGroupMemberListResp_GroupMember::clear_nickname() {
  nickname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetGroupMemberListResp_GroupMember::nickname() const {
  // @@protoc_insertion_point(field_get:onebot.GetGroupMemberListResp.GroupMember.nickname)
  return _internal_nickname();
}
inline void GetGroupMemberListResp_GroupMember::set_nickname(const std::string& value) {
  _internal_set_nickname(value);
  // @@protoc_insertion_point(field_set:onebot.GetGroupMemberListResp.GroupMember.nickname)
}
inline std::string* GetGroupMemberListResp_GroupMember::mutable_nickname() {
  // @@protoc_insertion_point(field_mutable:onebot.GetGroupMemberListResp.GroupMember.nickname)
  return _internal_mutable_nickname();
}
inline const std::string& GetGroupMemberListResp_GroupMember::_internal_nickname() const {
  return nickname_.Get();
}
inline void GetGroupMemberListResp_GroupMember::_internal_set_nickname(const std::string& value) {
  
  nickname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetGroupMemberListResp_GroupMember::set_nickname(std::string&& value) {
  
  nickname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:onebot.GetGroupMemberListResp.GroupMember.nickname)
}
inline void GetGroupMemberListResp_GroupMember::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nickname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:onebot.GetGroupMemberListResp.GroupMember.nickname)
}
inline void GetGroupMemberListResp_GroupMember::set_nickname(const char* value,
    size_t size) {
  
  nickname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:onebot.GetGroupMemberListResp.GroupMember.nickname)
}
inline std::string* GetGroupMemberListResp_GroupMember::_internal_mutable_nickname() {
  
  return nickname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetGroupMemberListResp_GroupMember::release_nickname() {
  // @@protoc_insertion_point(field_release:onebot.GetGroupMemberListResp.GroupMember.nickname)
  return nickname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetGroupMemberListResp_GroupMember::set_allocated_nickname(std::string* nickname) {
  if (nickname != nullptr) {
    
  } else {
    
  }
  nickname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nickname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:onebot.GetGroupMemberListResp.GroupMember.nickname)
}

// string card = 4;
inline void GetGroupMemberListResp_GroupMember::clear_card() {
  card_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetGroupMemberListResp_GroupMember::card() const {
  // @@protoc_insertion_point(field_get:onebot.GetGroupMemberListResp.GroupMember.card)
  return _internal_card();
}
inline void GetGroupMemberListResp_GroupMember::set_card(const std::string& value) {
  _internal_set_card(value);
  // @@protoc_insertion_point(field_set:onebot.GetGroupMemberListResp.GroupMember.card)
}
inline std::string* GetGroupMemberListResp_GroupMember::mutable_card() {
  // @@protoc_insertion_point(field_mutable:onebot.GetGroupMemberListResp.GroupMember.card)
  return _internal_mutable_card();
}
inline const std::string& GetGroupMemberListResp_GroupMember::_internal_card() const {
  return card_.Get();
}
inline void GetGroupMemberListResp_GroupMember::_internal_set_card(const std::string& value) {
  
  card_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetGroupMemberListResp_GroupMember::set_card(std::string&& value) {
  
  card_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:onebot.GetGroupMemberListResp.GroupMember.card)
}
inline void GetGroupMemberListResp_GroupMember::set_card(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  card_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:onebot.GetGroupMemberListResp.GroupMember.card)
}
inline void GetGroupMemberListResp_GroupMember::set_card(const char* value,
    size_t size) {
  
  card_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:onebot.GetGroupMemberListResp.GroupMember.card)
}
inline std::string* GetGroupMemberListResp_GroupMember::_internal_mutable_card() {
  
  return card_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetGroupMemberListResp_GroupMember::release_card() {
  // @@protoc_insertion_point(field_release:onebot.GetGroupMemberListResp.GroupMember.card)
  return card_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetGroupMemberListResp_GroupMember::set_allocated_card(std::string* card) {
  if (card != nullptr) {
    
  } else {
    
  }
  card_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), card,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:onebot.GetGroupMemberListResp.GroupMember.card)
}

// string sex = 5;
inline void GetGroupMemberListResp_GroupMember::clear_sex() {
  sex_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetGroupMemberListResp_GroupMember::sex() const {
  // @@protoc_insertion_point(field_get:onebot.GetGroupMemberListResp.GroupMember.sex)
  return _internal_sex();
}
inline void GetGroupMemberListResp_GroupMember::set_sex(const std::string& value) {
  _internal_set_sex(value);
  // @@protoc_insertion_point(field_set:onebot.GetGroupMemberListResp.GroupMember.sex)
}
inline std::string* GetGroupMemberListResp_GroupMember::mutable_sex() {
  // @@protoc_insertion_point(field_mutable:onebot.GetGroupMemberListResp.GroupMember.sex)
  return _internal_mutable_sex();
}
inline const std::string& GetGroupMemberListResp_GroupMember::_internal_sex() const {
  return sex_.Get();
}
inline void GetGroupMemberListResp_GroupMember::_internal_set_sex(const std::string& value) {
  
  sex_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetGroupMemberListResp_GroupMember::set_sex(std::string&& value) {
  
  sex_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:onebot.GetGroupMemberListResp.GroupMember.sex)
}
inline void GetGroupMemberListResp_GroupMember::set_sex(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sex_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:onebot.GetGroupMemberListResp.GroupMember.sex)
}
inline void GetGroupMemberListResp_GroupMember::set_sex(const char* value,
    size_t size) {
  
  sex_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:onebot.GetGroupMemberListResp.GroupMember.sex)
}
inline std::string* GetGroupMemberListResp_GroupMember::_internal_mutable_sex() {
  
  return sex_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetGroupMemberListResp_GroupMember::release_sex() {
  // @@protoc_insertion_point(field_release:onebot.GetGroupMemberListResp.GroupMember.sex)
  return sex_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetGroupMemberListResp_GroupMember::set_allocated_sex(std::string* sex) {
  if (sex != nullptr) {
    
  } else {
    
  }
  sex_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sex,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:onebot.GetGroupMemberListResp.GroupMember.sex)
}

// int32 age = 6;
inline void GetGroupMemberListResp_GroupMember::clear_age() {
  age_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetGroupMemberListResp_GroupMember::_internal_age() const {
  return age_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetGroupMemberListResp_GroupMember::age() const {
  // @@protoc_insertion_point(field_get:onebot.GetGroupMemberListResp.GroupMember.age)
  return _internal_age();
}
inline void GetGroupMemberListResp_GroupMember::_internal_set_age(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  age_ = value;
}
inline void GetGroupMemberListResp_GroupMember::set_age(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_age(value);
  // @@protoc_insertion_point(field_set:onebot.GetGroupMemberListResp.GroupMember.age)
}

// string area = 7;
inline void GetGroupMemberListResp_GroupMember::clear_area() {
  area_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetGroupMemberListResp_GroupMember::area() const {
  // @@protoc_insertion_point(field_get:onebot.GetGroupMemberListResp.GroupMember.area)
  return _internal_area();
}
inline void GetGroupMemberListResp_GroupMember::set_area(const std::string& value) {
  _internal_set_area(value);
  // @@protoc_insertion_point(field_set:onebot.GetGroupMemberListResp.GroupMember.area)
}
inline std::string* GetGroupMemberListResp_GroupMember::mutable_area() {
  // @@protoc_insertion_point(field_mutable:onebot.GetGroupMemberListResp.GroupMember.area)
  return _internal_mutable_area();
}
inline const std::string& GetGroupMemberListResp_GroupMember::_internal_area() const {
  return area_.Get();
}
inline void GetGroupMemberListResp_GroupMember::_internal_set_area(const std::string& value) {
  
  area_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetGroupMemberListResp_GroupMember::set_area(std::string&& value) {
  
  area_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:onebot.GetGroupMemberListResp.GroupMember.area)
}
inline void GetGroupMemberListResp_GroupMember::set_area(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  area_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:onebot.GetGroupMemberListResp.GroupMember.area)
}
inline void GetGroupMemberListResp_GroupMember::set_area(const char* value,
    size_t size) {
  
  area_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:onebot.GetGroupMemberListResp.GroupMember.area)
}
inline std::string* GetGroupMemberListResp_GroupMember::_internal_mutable_area() {
  
  return area_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetGroupMemberListResp_GroupMember::release_area() {
  // @@protoc_insertion_point(field_release:onebot.GetGroupMemberListResp.GroupMember.area)
  return area_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetGroupMemberListResp_GroupMember::set_allocated_area(std::string* area) {
  if (area != nullptr) {
    
  } else {
    
  }
  area_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), area,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:onebot.GetGroupMemberListResp.GroupMember.area)
}

// int32 join_time = 8;
inline void GetGroupMemberListResp_GroupMember::clear_join_time() {
  join_time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetGroupMemberListResp_GroupMember::_internal_join_time() const {
  return join_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetGroupMemberListResp_GroupMember::join_time() const {
  // @@protoc_insertion_point(field_get:onebot.GetGroupMemberListResp.GroupMember.join_time)
  return _internal_join_time();
}
inline void GetGroupMemberListResp_GroupMember::_internal_set_join_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  join_time_ = value;
}
inline void GetGroupMemberListResp_GroupMember::set_join_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_join_time(value);
  // @@protoc_insertion_point(field_set:onebot.GetGroupMemberListResp.GroupMember.join_time)
}

// int32 last_sent_time = 9;
inline void GetGroupMemberListResp_GroupMember::clear_last_sent_time() {
  last_sent_time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetGroupMemberListResp_GroupMember::_internal_last_sent_time() const {
  return last_sent_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetGroupMemberListResp_GroupMember::last_sent_time() const {
  // @@protoc_insertion_point(field_get:onebot.GetGroupMemberListResp.GroupMember.last_sent_time)
  return _internal_last_sent_time();
}
inline void GetGroupMemberListResp_GroupMember::_internal_set_last_sent_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  last_sent_time_ = value;
}
inline void GetGroupMemberListResp_GroupMember::set_last_sent_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_last_sent_time(value);
  // @@protoc_insertion_point(field_set:onebot.GetGroupMemberListResp.GroupMember.last_sent_time)
}

// string level = 10;
inline void GetGroupMemberListResp_GroupMember::clear_level() {
  level_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetGroupMemberListResp_GroupMember::level() const {
  // @@protoc_insertion_point(field_get:onebot.GetGroupMemberListResp.GroupMember.level)
  return _internal_level();
}
inline void GetGroupMemberListResp_GroupMember::set_level(const std::string& value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:onebot.GetGroupMemberListResp.GroupMember.level)
}
inline std::string* GetGroupMemberListResp_GroupMember::mutable_level() {
  // @@protoc_insertion_point(field_mutable:onebot.GetGroupMemberListResp.GroupMember.level)
  return _internal_mutable_level();
}
inline const std::string& GetGroupMemberListResp_GroupMember::_internal_level() const {
  return level_.Get();
}
inline void GetGroupMemberListResp_GroupMember::_internal_set_level(const std::string& value) {
  
  level_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetGroupMemberListResp_GroupMember::set_level(std::string&& value) {
  
  level_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:onebot.GetGroupMemberListResp.GroupMember.level)
}
inline void GetGroupMemberListResp_GroupMember::set_level(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  level_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:onebot.GetGroupMemberListResp.GroupMember.level)
}
inline void GetGroupMemberListResp_GroupMember::set_level(const char* value,
    size_t size) {
  
  level_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:onebot.GetGroupMemberListResp.GroupMember.level)
}
inline std::string* GetGroupMemberListResp_GroupMember::_internal_mutable_level() {
  
  return level_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetGroupMemberListResp_GroupMember::release_level() {
  // @@protoc_insertion_point(field_release:onebot.GetGroupMemberListResp.GroupMember.level)
  return level_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetGroupMemberListResp_GroupMember::set_allocated_level(std::string* level) {
  if (level != nullptr) {
    
  } else {
    
  }
  level_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), level,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:onebot.GetGroupMemberListResp.GroupMember.level)
}

// string role = 11;
inline void GetGroupMemberListResp_GroupMember::clear_role() {
  role_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetGroupMemberListResp_GroupMember::role() const {
  // @@protoc_insertion_point(field_get:onebot.GetGroupMemberListResp.GroupMember.role)
  return _internal_role();
}
inline void GetGroupMemberListResp_GroupMember::set_role(const std::string& value) {
  _internal_set_role(value);
  // @@protoc_insertion_point(field_set:onebot.GetGroupMemberListResp.GroupMember.role)
}
inline std::string* GetGroupMemberListResp_GroupMember::mutable_role() {
  // @@protoc_insertion_point(field_mutable:onebot.GetGroupMemberListResp.GroupMember.role)
  return _internal_mutable_role();
}
inline const std::string& GetGroupMemberListResp_GroupMember::_internal_role() const {
  return role_.Get();
}
inline void GetGroupMemberListResp_GroupMember::_internal_set_role(const std::string& value) {
  
  role_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetGroupMemberListResp_GroupMember::set_role(std::string&& value) {
  
  role_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:onebot.GetGroupMemberListResp.GroupMember.role)
}
inline void GetGroupMemberListResp_GroupMember::set_role(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  role_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:onebot.GetGroupMemberListResp.GroupMember.role)
}
inline void GetGroupMemberListResp_GroupMember::set_role(const char* value,
    size_t size) {
  
  role_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:onebot.GetGroupMemberListResp.GroupMember.role)
}
inline std::string* GetGroupMemberListResp_GroupMember::_internal_mutable_role() {
  
  return role_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetGroupMemberListResp_GroupMember::release_role() {
  // @@protoc_insertion_point(field_release:onebot.GetGroupMemberListResp.GroupMember.role)
  return role_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetGroupMemberListResp_GroupMember::set_allocated_role(std::string* role) {
  if (role != nullptr) {
    
  } else {
    
  }
  role_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), role,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:onebot.GetGroupMemberListResp.GroupMember.role)
}

// bool unfriendly = 12;
inline void GetGroupMemberListResp_GroupMember::clear_unfriendly() {
  unfriendly_ = false;
}
inline bool GetGroupMemberListResp_GroupMember::_internal_unfriendly() const {
  return unfriendly_;
}
inline bool GetGroupMemberListResp_GroupMember::unfriendly() const {
  // @@protoc_insertion_point(field_get:onebot.GetGroupMemberListResp.GroupMember.unfriendly)
  return _internal_unfriendly();
}
inline void GetGroupMemberListResp_GroupMember::_internal_set_unfriendly(bool value) {
  
  unfriendly_ = value;
}
inline void GetGroupMemberListResp_GroupMember::set_unfriendly(bool value) {
  _internal_set_unfriendly(value);
  // @@protoc_insertion_point(field_set:onebot.GetGroupMemberListResp.GroupMember.unfriendly)
}

// string title = 13;
inline void GetGroupMemberListResp_GroupMember::clear_title() {
  title_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetGroupMemberListResp_GroupMember::title() const {
  // @@protoc_insertion_point(field_get:onebot.GetGroupMemberListResp.GroupMember.title)
  return _internal_title();
}
inline void GetGroupMemberListResp_GroupMember::set_title(const std::string& value) {
  _internal_set_title(value);
  // @@protoc_insertion_point(field_set:onebot.GetGroupMemberListResp.GroupMember.title)
}
inline std::string* GetGroupMemberListResp_GroupMember::mutable_title() {
  // @@protoc_insertion_point(field_mutable:onebot.GetGroupMemberListResp.GroupMember.title)
  return _internal_mutable_title();
}
inline const std::string& GetGroupMemberListResp_GroupMember::_internal_title() const {
  return title_.Get();
}
inline void GetGroupMemberListResp_GroupMember::_internal_set_title(const std::string& value) {
  
  title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetGroupMemberListResp_GroupMember::set_title(std::string&& value) {
  
  title_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:onebot.GetGroupMemberListResp.GroupMember.title)
}
inline void GetGroupMemberListResp_GroupMember::set_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:onebot.GetGroupMemberListResp.GroupMember.title)
}
inline void GetGroupMemberListResp_GroupMember::set_title(const char* value,
    size_t size) {
  
  title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:onebot.GetGroupMemberListResp.GroupMember.title)
}
inline std::string* GetGroupMemberListResp_GroupMember::_internal_mutable_title() {
  
  return title_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetGroupMemberListResp_GroupMember::release_title() {
  // @@protoc_insertion_point(field_release:onebot.GetGroupMemberListResp.GroupMember.title)
  return title_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetGroupMemberListResp_GroupMember::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  title_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:onebot.GetGroupMemberListResp.GroupMember.title)
}

// int32 title_expire_time = 14;
inline void GetGroupMemberListResp_GroupMember::clear_title_expire_time() {
  title_expire_time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetGroupMemberListResp_GroupMember::_internal_title_expire_time() const {
  return title_expire_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetGroupMemberListResp_GroupMember::title_expire_time() const {
  // @@protoc_insertion_point(field_get:onebot.GetGroupMemberListResp.GroupMember.title_expire_time)
  return _internal_title_expire_time();
}
inline void GetGroupMemberListResp_GroupMember::_internal_set_title_expire_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  title_expire_time_ = value;
}
inline void GetGroupMemberListResp_GroupMember::set_title_expire_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_title_expire_time(value);
  // @@protoc_insertion_point(field_set:onebot.GetGroupMemberListResp.GroupMember.title_expire_time)
}

// bool card_changeable = 15;
inline void GetGroupMemberListResp_GroupMember::clear_card_changeable() {
  card_changeable_ = false;
}
inline bool GetGroupMemberListResp_GroupMember::_internal_card_changeable() const {
  return card_changeable_;
}
inline bool GetGroupMemberListResp_GroupMember::card_changeable() const {
  // @@protoc_insertion_point(field_get:onebot.GetGroupMemberListResp.GroupMember.card_changeable)
  return _internal_card_changeable();
}
inline void GetGroupMemberListResp_GroupMember::_internal_set_card_changeable(bool value) {
  
  card_changeable_ = value;
}
inline void GetGroupMemberListResp_GroupMember::set_card_changeable(bool value) {
  _internal_set_card_changeable(value);
  // @@protoc_insertion_point(field_set:onebot.GetGroupMemberListResp.GroupMember.card_changeable)
}

// -------------------------------------------------------------------

// GetGroupMemberListResp

// repeated .onebot.GetGroupMemberListResp.GroupMember group_member_list = 1;
inline int GetGroupMemberListResp::_internal_group_member_list_size() const {
  return group_member_list_.size();
}
inline int GetGroupMemberListResp::group_member_list_size() const {
  return _internal_group_member_list_size();
}
inline void GetGroupMemberListResp::clear_group_member_list() {
  group_member_list_.Clear();
}
inline ::onebot::GetGroupMemberListResp_GroupMember* GetGroupMemberListResp::mutable_group_member_list(int index) {
  // @@protoc_insertion_point(field_mutable:onebot.GetGroupMemberListResp.group_member_list)
  return group_member_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onebot::GetGroupMemberListResp_GroupMember >*
GetGroupMemberListResp::mutable_group_member_list() {
  // @@protoc_insertion_point(field_mutable_list:onebot.GetGroupMemberListResp.group_member_list)
  return &group_member_list_;
}
inline const ::onebot::GetGroupMemberListResp_GroupMember& GetGroupMemberListResp::_internal_group_member_list(int index) const {
  return group_member_list_.Get(index);
}
inline const ::onebot::GetGroupMemberListResp_GroupMember& GetGroupMemberListResp::group_member_list(int index) const {
  // @@protoc_insertion_point(field_get:onebot.GetGroupMemberListResp.group_member_list)
  return _internal_group_member_list(index);
}
inline ::onebot::GetGroupMemberListResp_GroupMember* GetGroupMemberListResp::_internal_add_group_member_list() {
  return group_member_list_.Add();
}
inline ::onebot::GetGroupMemberListResp_GroupMember* GetGroupMemberListResp::add_group_member_list() {
  // @@protoc_insertion_point(field_add:onebot.GetGroupMemberListResp.group_member_list)
  return _internal_add_group_member_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onebot::GetGroupMemberListResp_GroupMember >&
GetGroupMemberListResp::group_member_list() const {
  // @@protoc_insertion_point(field_list:onebot.GetGroupMemberListResp.group_member_list)
  return group_member_list_;
}

// -------------------------------------------------------------------

// GetGroupHonorInfoReq

// int64 group_id = 1;
inline void GetGroupHonorInfoReq::clear_group_id() {
  group_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetGroupHonorInfoReq::_internal_group_id() const {
  return group_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetGroupHonorInfoReq::group_id() const {
  // @@protoc_insertion_point(field_get:onebot.GetGroupHonorInfoReq.group_id)
  return _internal_group_id();
}
inline void GetGroupHonorInfoReq::_internal_set_group_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  group_id_ = value;
}
inline void GetGroupHonorInfoReq::set_group_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:onebot.GetGroupHonorInfoReq.group_id)
}

// string type = 2;
inline void GetGroupHonorInfoReq::clear_type() {
  type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetGroupHonorInfoReq::type() const {
  // @@protoc_insertion_point(field_get:onebot.GetGroupHonorInfoReq.type)
  return _internal_type();
}
inline void GetGroupHonorInfoReq::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:onebot.GetGroupHonorInfoReq.type)
}
inline std::string* GetGroupHonorInfoReq::mutable_type() {
  // @@protoc_insertion_point(field_mutable:onebot.GetGroupHonorInfoReq.type)
  return _internal_mutable_type();
}
inline const std::string& GetGroupHonorInfoReq::_internal_type() const {
  return type_.Get();
}
inline void GetGroupHonorInfoReq::_internal_set_type(const std::string& value) {
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetGroupHonorInfoReq::set_type(std::string&& value) {
  
  type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:onebot.GetGroupHonorInfoReq.type)
}
inline void GetGroupHonorInfoReq::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:onebot.GetGroupHonorInfoReq.type)
}
inline void GetGroupHonorInfoReq::set_type(const char* value,
    size_t size) {
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:onebot.GetGroupHonorInfoReq.type)
}
inline std::string* GetGroupHonorInfoReq::_internal_mutable_type() {
  
  return type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetGroupHonorInfoReq::release_type() {
  // @@protoc_insertion_point(field_release:onebot.GetGroupHonorInfoReq.type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetGroupHonorInfoReq::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:onebot.GetGroupHonorInfoReq.type)
}

// -------------------------------------------------------------------

// GetGroupHonorInfoResp_CurrentTalkative

// int64 user_id = 1;
inline void GetGroupHonorInfoResp_CurrentTalkative::clear_user_id() {
  user_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetGroupHonorInfoResp_CurrentTalkative::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetGroupHonorInfoResp_CurrentTalkative::user_id() const {
  // @@protoc_insertion_point(field_get:onebot.GetGroupHonorInfoResp.CurrentTalkative.user_id)
  return _internal_user_id();
}
inline void GetGroupHonorInfoResp_CurrentTalkative::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  user_id_ = value;
}
inline void GetGroupHonorInfoResp_CurrentTalkative::set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:onebot.GetGroupHonorInfoResp.CurrentTalkative.user_id)
}

// string nickname = 2;
inline void GetGroupHonorInfoResp_CurrentTalkative::clear_nickname() {
  nickname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetGroupHonorInfoResp_CurrentTalkative::nickname() const {
  // @@protoc_insertion_point(field_get:onebot.GetGroupHonorInfoResp.CurrentTalkative.nickname)
  return _internal_nickname();
}
inline void GetGroupHonorInfoResp_CurrentTalkative::set_nickname(const std::string& value) {
  _internal_set_nickname(value);
  // @@protoc_insertion_point(field_set:onebot.GetGroupHonorInfoResp.CurrentTalkative.nickname)
}
inline std::string* GetGroupHonorInfoResp_CurrentTalkative::mutable_nickname() {
  // @@protoc_insertion_point(field_mutable:onebot.GetGroupHonorInfoResp.CurrentTalkative.nickname)
  return _internal_mutable_nickname();
}
inline const std::string& GetGroupHonorInfoResp_CurrentTalkative::_internal_nickname() const {
  return nickname_.Get();
}
inline void GetGroupHonorInfoResp_CurrentTalkative::_internal_set_nickname(const std::string& value) {
  
  nickname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetGroupHonorInfoResp_CurrentTalkative::set_nickname(std::string&& value) {
  
  nickname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:onebot.GetGroupHonorInfoResp.CurrentTalkative.nickname)
}
inline void GetGroupHonorInfoResp_CurrentTalkative::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nickname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:onebot.GetGroupHonorInfoResp.CurrentTalkative.nickname)
}
inline void GetGroupHonorInfoResp_CurrentTalkative::set_nickname(const char* value,
    size_t size) {
  
  nickname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:onebot.GetGroupHonorInfoResp.CurrentTalkative.nickname)
}
inline std::string* GetGroupHonorInfoResp_CurrentTalkative::_internal_mutable_nickname() {
  
  return nickname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetGroupHonorInfoResp_CurrentTalkative::release_nickname() {
  // @@protoc_insertion_point(field_release:onebot.GetGroupHonorInfoResp.CurrentTalkative.nickname)
  return nickname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetGroupHonorInfoResp_CurrentTalkative::set_allocated_nickname(std::string* nickname) {
  if (nickname != nullptr) {
    
  } else {
    
  }
  nickname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nickname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:onebot.GetGroupHonorInfoResp.CurrentTalkative.nickname)
}

// string avatar = 3;
inline void GetGroupHonorInfoResp_CurrentTalkative::clear_avatar() {
  avatar_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetGroupHonorInfoResp_CurrentTalkative::avatar() const {
  // @@protoc_insertion_point(field_get:onebot.GetGroupHonorInfoResp.CurrentTalkative.avatar)
  return _internal_avatar();
}
inline void GetGroupHonorInfoResp_CurrentTalkative::set_avatar(const std::string& value) {
  _internal_set_avatar(value);
  // @@protoc_insertion_point(field_set:onebot.GetGroupHonorInfoResp.CurrentTalkative.avatar)
}
inline std::string* GetGroupHonorInfoResp_CurrentTalkative::mutable_avatar() {
  // @@protoc_insertion_point(field_mutable:onebot.GetGroupHonorInfoResp.CurrentTalkative.avatar)
  return _internal_mutable_avatar();
}
inline const std::string& GetGroupHonorInfoResp_CurrentTalkative::_internal_avatar() const {
  return avatar_.Get();
}
inline void GetGroupHonorInfoResp_CurrentTalkative::_internal_set_avatar(const std::string& value) {
  
  avatar_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetGroupHonorInfoResp_CurrentTalkative::set_avatar(std::string&& value) {
  
  avatar_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:onebot.GetGroupHonorInfoResp.CurrentTalkative.avatar)
}
inline void GetGroupHonorInfoResp_CurrentTalkative::set_avatar(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  avatar_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:onebot.GetGroupHonorInfoResp.CurrentTalkative.avatar)
}
inline void GetGroupHonorInfoResp_CurrentTalkative::set_avatar(const char* value,
    size_t size) {
  
  avatar_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:onebot.GetGroupHonorInfoResp.CurrentTalkative.avatar)
}
inline std::string* GetGroupHonorInfoResp_CurrentTalkative::_internal_mutable_avatar() {
  
  return avatar_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetGroupHonorInfoResp_CurrentTalkative::release_avatar() {
  // @@protoc_insertion_point(field_release:onebot.GetGroupHonorInfoResp.CurrentTalkative.avatar)
  return avatar_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetGroupHonorInfoResp_CurrentTalkative::set_allocated_avatar(std::string* avatar) {
  if (avatar != nullptr) {
    
  } else {
    
  }
  avatar_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), avatar,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:onebot.GetGroupHonorInfoResp.CurrentTalkative.avatar)
}

// int32 day_count = 4;
inline void GetGroupHonorInfoResp_CurrentTalkative::clear_day_count() {
  day_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetGroupHonorInfoResp_CurrentTalkative::_internal_day_count() const {
  return day_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetGroupHonorInfoResp_CurrentTalkative::day_count() const {
  // @@protoc_insertion_point(field_get:onebot.GetGroupHonorInfoResp.CurrentTalkative.day_count)
  return _internal_day_count();
}
inline void GetGroupHonorInfoResp_CurrentTalkative::_internal_set_day_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  day_count_ = value;
}
inline void GetGroupHonorInfoResp_CurrentTalkative::set_day_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_day_count(value);
  // @@protoc_insertion_point(field_set:onebot.GetGroupHonorInfoResp.CurrentTalkative.day_count)
}

// -------------------------------------------------------------------

// GetGroupHonorInfoResp_Honor

// int64 user_id = 1;
inline void GetGroupHonorInfoResp_Honor::clear_user_id() {
  user_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetGroupHonorInfoResp_Honor::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetGroupHonorInfoResp_Honor::user_id() const {
  // @@protoc_insertion_point(field_get:onebot.GetGroupHonorInfoResp.Honor.user_id)
  return _internal_user_id();
}
inline void GetGroupHonorInfoResp_Honor::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  user_id_ = value;
}
inline void GetGroupHonorInfoResp_Honor::set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:onebot.GetGroupHonorInfoResp.Honor.user_id)
}

// string nickname = 2;
inline void GetGroupHonorInfoResp_Honor::clear_nickname() {
  nickname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetGroupHonorInfoResp_Honor::nickname() const {
  // @@protoc_insertion_point(field_get:onebot.GetGroupHonorInfoResp.Honor.nickname)
  return _internal_nickname();
}
inline void GetGroupHonorInfoResp_Honor::set_nickname(const std::string& value) {
  _internal_set_nickname(value);
  // @@protoc_insertion_point(field_set:onebot.GetGroupHonorInfoResp.Honor.nickname)
}
inline std::string* GetGroupHonorInfoResp_Honor::mutable_nickname() {
  // @@protoc_insertion_point(field_mutable:onebot.GetGroupHonorInfoResp.Honor.nickname)
  return _internal_mutable_nickname();
}
inline const std::string& GetGroupHonorInfoResp_Honor::_internal_nickname() const {
  return nickname_.Get();
}
inline void GetGroupHonorInfoResp_Honor::_internal_set_nickname(const std::string& value) {
  
  nickname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetGroupHonorInfoResp_Honor::set_nickname(std::string&& value) {
  
  nickname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:onebot.GetGroupHonorInfoResp.Honor.nickname)
}
inline void GetGroupHonorInfoResp_Honor::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nickname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:onebot.GetGroupHonorInfoResp.Honor.nickname)
}
inline void GetGroupHonorInfoResp_Honor::set_nickname(const char* value,
    size_t size) {
  
  nickname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:onebot.GetGroupHonorInfoResp.Honor.nickname)
}
inline std::string* GetGroupHonorInfoResp_Honor::_internal_mutable_nickname() {
  
  return nickname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetGroupHonorInfoResp_Honor::release_nickname() {
  // @@protoc_insertion_point(field_release:onebot.GetGroupHonorInfoResp.Honor.nickname)
  return nickname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetGroupHonorInfoResp_Honor::set_allocated_nickname(std::string* nickname) {
  if (nickname != nullptr) {
    
  } else {
    
  }
  nickname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nickname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:onebot.GetGroupHonorInfoResp.Honor.nickname)
}

// string avatar = 3;
inline void GetGroupHonorInfoResp_Honor::clear_avatar() {
  avatar_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetGroupHonorInfoResp_Honor::avatar() const {
  // @@protoc_insertion_point(field_get:onebot.GetGroupHonorInfoResp.Honor.avatar)
  return _internal_avatar();
}
inline void GetGroupHonorInfoResp_Honor::set_avatar(const std::string& value) {
  _internal_set_avatar(value);
  // @@protoc_insertion_point(field_set:onebot.GetGroupHonorInfoResp.Honor.avatar)
}
inline std::string* GetGroupHonorInfoResp_Honor::mutable_avatar() {
  // @@protoc_insertion_point(field_mutable:onebot.GetGroupHonorInfoResp.Honor.avatar)
  return _internal_mutable_avatar();
}
inline const std::string& GetGroupHonorInfoResp_Honor::_internal_avatar() const {
  return avatar_.Get();
}
inline void GetGroupHonorInfoResp_Honor::_internal_set_avatar(const std::string& value) {
  
  avatar_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetGroupHonorInfoResp_Honor::set_avatar(std::string&& value) {
  
  avatar_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:onebot.GetGroupHonorInfoResp.Honor.avatar)
}
inline void GetGroupHonorInfoResp_Honor::set_avatar(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  avatar_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:onebot.GetGroupHonorInfoResp.Honor.avatar)
}
inline void GetGroupHonorInfoResp_Honor::set_avatar(const char* value,
    size_t size) {
  
  avatar_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:onebot.GetGroupHonorInfoResp.Honor.avatar)
}
inline std::string* GetGroupHonorInfoResp_Honor::_internal_mutable_avatar() {
  
  return avatar_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetGroupHonorInfoResp_Honor::release_avatar() {
  // @@protoc_insertion_point(field_release:onebot.GetGroupHonorInfoResp.Honor.avatar)
  return avatar_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetGroupHonorInfoResp_Honor::set_allocated_avatar(std::string* avatar) {
  if (avatar != nullptr) {
    
  } else {
    
  }
  avatar_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), avatar,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:onebot.GetGroupHonorInfoResp.Honor.avatar)
}

// string description = 4;
inline void GetGroupHonorInfoResp_Honor::clear_description() {
  description_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetGroupHonorInfoResp_Honor::description() const {
  // @@protoc_insertion_point(field_get:onebot.GetGroupHonorInfoResp.Honor.description)
  return _internal_description();
}
inline void GetGroupHonorInfoResp_Honor::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:onebot.GetGroupHonorInfoResp.Honor.description)
}
inline std::string* GetGroupHonorInfoResp_Honor::mutable_description() {
  // @@protoc_insertion_point(field_mutable:onebot.GetGroupHonorInfoResp.Honor.description)
  return _internal_mutable_description();
}
inline const std::string& GetGroupHonorInfoResp_Honor::_internal_description() const {
  return description_.Get();
}
inline void GetGroupHonorInfoResp_Honor::_internal_set_description(const std::string& value) {
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetGroupHonorInfoResp_Honor::set_description(std::string&& value) {
  
  description_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:onebot.GetGroupHonorInfoResp.Honor.description)
}
inline void GetGroupHonorInfoResp_Honor::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:onebot.GetGroupHonorInfoResp.Honor.description)
}
inline void GetGroupHonorInfoResp_Honor::set_description(const char* value,
    size_t size) {
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:onebot.GetGroupHonorInfoResp.Honor.description)
}
inline std::string* GetGroupHonorInfoResp_Honor::_internal_mutable_description() {
  
  return description_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetGroupHonorInfoResp_Honor::release_description() {
  // @@protoc_insertion_point(field_release:onebot.GetGroupHonorInfoResp.Honor.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetGroupHonorInfoResp_Honor::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:onebot.GetGroupHonorInfoResp.Honor.description)
}

// -------------------------------------------------------------------

// GetGroupHonorInfoResp

// int64 group_id = 1;
inline void GetGroupHonorInfoResp::clear_group_id() {
  group_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetGroupHonorInfoResp::_internal_group_id() const {
  return group_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetGroupHonorInfoResp::group_id() const {
  // @@protoc_insertion_point(field_get:onebot.GetGroupHonorInfoResp.group_id)
  return _internal_group_id();
}
inline void GetGroupHonorInfoResp::_internal_set_group_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  group_id_ = value;
}
inline void GetGroupHonorInfoResp::set_group_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:onebot.GetGroupHonorInfoResp.group_id)
}

// .onebot.GetGroupHonorInfoResp.CurrentTalkative current_talkative = 2;
inline bool GetGroupHonorInfoResp::_internal_has_current_talkative() const {
  return this != internal_default_instance() && current_talkative_ != nullptr;
}
inline bool GetGroupHonorInfoResp::has_current_talkative() const {
  return _internal_has_current_talkative();
}
inline void GetGroupHonorInfoResp::clear_current_talkative() {
  if (GetArena() == nullptr && current_talkative_ != nullptr) {
    delete current_talkative_;
  }
  current_talkative_ = nullptr;
}
inline const ::onebot::GetGroupHonorInfoResp_CurrentTalkative& GetGroupHonorInfoResp::_internal_current_talkative() const {
  const ::onebot::GetGroupHonorInfoResp_CurrentTalkative* p = current_talkative_;
  return p != nullptr ? *p : *reinterpret_cast<const ::onebot::GetGroupHonorInfoResp_CurrentTalkative*>(
      &::onebot::_GetGroupHonorInfoResp_CurrentTalkative_default_instance_);
}
inline const ::onebot::GetGroupHonorInfoResp_CurrentTalkative& GetGroupHonorInfoResp::current_talkative() const {
  // @@protoc_insertion_point(field_get:onebot.GetGroupHonorInfoResp.current_talkative)
  return _internal_current_talkative();
}
inline void GetGroupHonorInfoResp::unsafe_arena_set_allocated_current_talkative(
    ::onebot::GetGroupHonorInfoResp_CurrentTalkative* current_talkative) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(current_talkative_);
  }
  current_talkative_ = current_talkative;
  if (current_talkative) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onebot.GetGroupHonorInfoResp.current_talkative)
}
inline ::onebot::GetGroupHonorInfoResp_CurrentTalkative* GetGroupHonorInfoResp::release_current_talkative() {
  
  ::onebot::GetGroupHonorInfoResp_CurrentTalkative* temp = current_talkative_;
  current_talkative_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::onebot::GetGroupHonorInfoResp_CurrentTalkative* GetGroupHonorInfoResp::unsafe_arena_release_current_talkative() {
  // @@protoc_insertion_point(field_release:onebot.GetGroupHonorInfoResp.current_talkative)
  
  ::onebot::GetGroupHonorInfoResp_CurrentTalkative* temp = current_talkative_;
  current_talkative_ = nullptr;
  return temp;
}
inline ::onebot::GetGroupHonorInfoResp_CurrentTalkative* GetGroupHonorInfoResp::_internal_mutable_current_talkative() {
  
  if (current_talkative_ == nullptr) {
    auto* p = CreateMaybeMessage<::onebot::GetGroupHonorInfoResp_CurrentTalkative>(GetArena());
    current_talkative_ = p;
  }
  return current_talkative_;
}
inline ::onebot::GetGroupHonorInfoResp_CurrentTalkative* GetGroupHonorInfoResp::mutable_current_talkative() {
  // @@protoc_insertion_point(field_mutable:onebot.GetGroupHonorInfoResp.current_talkative)
  return _internal_mutable_current_talkative();
}
inline void GetGroupHonorInfoResp::set_allocated_current_talkative(::onebot::GetGroupHonorInfoResp_CurrentTalkative* current_talkative) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete current_talkative_;
  }
  if (current_talkative) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(current_talkative);
    if (message_arena != submessage_arena) {
      current_talkative = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, current_talkative, submessage_arena);
    }
    
  } else {
    
  }
  current_talkative_ = current_talkative;
  // @@protoc_insertion_point(field_set_allocated:onebot.GetGroupHonorInfoResp.current_talkative)
}

// repeated .onebot.GetGroupHonorInfoResp.Honor talkative_list = 3;
inline int GetGroupHonorInfoResp::_internal_talkative_list_size() const {
  return talkative_list_.size();
}
inline int GetGroupHonorInfoResp::talkative_list_size() const {
  return _internal_talkative_list_size();
}
inline void GetGroupHonorInfoResp::clear_talkative_list() {
  talkative_list_.Clear();
}
inline ::onebot::GetGroupHonorInfoResp_Honor* GetGroupHonorInfoResp::mutable_talkative_list(int index) {
  // @@protoc_insertion_point(field_mutable:onebot.GetGroupHonorInfoResp.talkative_list)
  return talkative_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onebot::GetGroupHonorInfoResp_Honor >*
GetGroupHonorInfoResp::mutable_talkative_list() {
  // @@protoc_insertion_point(field_mutable_list:onebot.GetGroupHonorInfoResp.talkative_list)
  return &talkative_list_;
}
inline const ::onebot::GetGroupHonorInfoResp_Honor& GetGroupHonorInfoResp::_internal_talkative_list(int index) const {
  return talkative_list_.Get(index);
}
inline const ::onebot::GetGroupHonorInfoResp_Honor& GetGroupHonorInfoResp::talkative_list(int index) const {
  // @@protoc_insertion_point(field_get:onebot.GetGroupHonorInfoResp.talkative_list)
  return _internal_talkative_list(index);
}
inline ::onebot::GetGroupHonorInfoResp_Honor* GetGroupHonorInfoResp::_internal_add_talkative_list() {
  return talkative_list_.Add();
}
inline ::onebot::GetGroupHonorInfoResp_Honor* GetGroupHonorInfoResp::add_talkative_list() {
  // @@protoc_insertion_point(field_add:onebot.GetGroupHonorInfoResp.talkative_list)
  return _internal_add_talkative_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onebot::GetGroupHonorInfoResp_Honor >&
GetGroupHonorInfoResp::talkative_list() const {
  // @@protoc_insertion_point(field_list:onebot.GetGroupHonorInfoResp.talkative_list)
  return talkative_list_;
}

// repeated .onebot.GetGroupHonorInfoResp.Honor performer_list = 4;
inline int GetGroupHonorInfoResp::_internal_performer_list_size() const {
  return performer_list_.size();
}
inline int GetGroupHonorInfoResp::performer_list_size() const {
  return _internal_performer_list_size();
}
inline void GetGroupHonorInfoResp::clear_performer_list() {
  performer_list_.Clear();
}
inline ::onebot::GetGroupHonorInfoResp_Honor* GetGroupHonorInfoResp::mutable_performer_list(int index) {
  // @@protoc_insertion_point(field_mutable:onebot.GetGroupHonorInfoResp.performer_list)
  return performer_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onebot::GetGroupHonorInfoResp_Honor >*
GetGroupHonorInfoResp::mutable_performer_list() {
  // @@protoc_insertion_point(field_mutable_list:onebot.GetGroupHonorInfoResp.performer_list)
  return &performer_list_;
}
inline const ::onebot::GetGroupHonorInfoResp_Honor& GetGroupHonorInfoResp::_internal_performer_list(int index) const {
  return performer_list_.Get(index);
}
inline const ::onebot::GetGroupHonorInfoResp_Honor& GetGroupHonorInfoResp::performer_list(int index) const {
  // @@protoc_insertion_point(field_get:onebot.GetGroupHonorInfoResp.performer_list)
  return _internal_performer_list(index);
}
inline ::onebot::GetGroupHonorInfoResp_Honor* GetGroupHonorInfoResp::_internal_add_performer_list() {
  return performer_list_.Add();
}
inline ::onebot::GetGroupHonorInfoResp_Honor* GetGroupHonorInfoResp::add_performer_list() {
  // @@protoc_insertion_point(field_add:onebot.GetGroupHonorInfoResp.performer_list)
  return _internal_add_performer_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onebot::GetGroupHonorInfoResp_Honor >&
GetGroupHonorInfoResp::performer_list() const {
  // @@protoc_insertion_point(field_list:onebot.GetGroupHonorInfoResp.performer_list)
  return performer_list_;
}

// repeated .onebot.GetGroupHonorInfoResp.Honor legend_list = 5;
inline int GetGroupHonorInfoResp::_internal_legend_list_size() const {
  return legend_list_.size();
}
inline int GetGroupHonorInfoResp::legend_list_size() const {
  return _internal_legend_list_size();
}
inline void GetGroupHonorInfoResp::clear_legend_list() {
  legend_list_.Clear();
}
inline ::onebot::GetGroupHonorInfoResp_Honor* GetGroupHonorInfoResp::mutable_legend_list(int index) {
  // @@protoc_insertion_point(field_mutable:onebot.GetGroupHonorInfoResp.legend_list)
  return legend_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onebot::GetGroupHonorInfoResp_Honor >*
GetGroupHonorInfoResp::mutable_legend_list() {
  // @@protoc_insertion_point(field_mutable_list:onebot.GetGroupHonorInfoResp.legend_list)
  return &legend_list_;
}
inline const ::onebot::GetGroupHonorInfoResp_Honor& GetGroupHonorInfoResp::_internal_legend_list(int index) const {
  return legend_list_.Get(index);
}
inline const ::onebot::GetGroupHonorInfoResp_Honor& GetGroupHonorInfoResp::legend_list(int index) const {
  // @@protoc_insertion_point(field_get:onebot.GetGroupHonorInfoResp.legend_list)
  return _internal_legend_list(index);
}
inline ::onebot::GetGroupHonorInfoResp_Honor* GetGroupHonorInfoResp::_internal_add_legend_list() {
  return legend_list_.Add();
}
inline ::onebot::GetGroupHonorInfoResp_Honor* GetGroupHonorInfoResp::add_legend_list() {
  // @@protoc_insertion_point(field_add:onebot.GetGroupHonorInfoResp.legend_list)
  return _internal_add_legend_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onebot::GetGroupHonorInfoResp_Honor >&
GetGroupHonorInfoResp::legend_list() const {
  // @@protoc_insertion_point(field_list:onebot.GetGroupHonorInfoResp.legend_list)
  return legend_list_;
}

// repeated .onebot.GetGroupHonorInfoResp.Honor strong_newbie_list = 6;
inline int GetGroupHonorInfoResp::_internal_strong_newbie_list_size() const {
  return strong_newbie_list_.size();
}
inline int GetGroupHonorInfoResp::strong_newbie_list_size() const {
  return _internal_strong_newbie_list_size();
}
inline void GetGroupHonorInfoResp::clear_strong_newbie_list() {
  strong_newbie_list_.Clear();
}
inline ::onebot::GetGroupHonorInfoResp_Honor* GetGroupHonorInfoResp::mutable_strong_newbie_list(int index) {
  // @@protoc_insertion_point(field_mutable:onebot.GetGroupHonorInfoResp.strong_newbie_list)
  return strong_newbie_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onebot::GetGroupHonorInfoResp_Honor >*
GetGroupHonorInfoResp::mutable_strong_newbie_list() {
  // @@protoc_insertion_point(field_mutable_list:onebot.GetGroupHonorInfoResp.strong_newbie_list)
  return &strong_newbie_list_;
}
inline const ::onebot::GetGroupHonorInfoResp_Honor& GetGroupHonorInfoResp::_internal_strong_newbie_list(int index) const {
  return strong_newbie_list_.Get(index);
}
inline const ::onebot::GetGroupHonorInfoResp_Honor& GetGroupHonorInfoResp::strong_newbie_list(int index) const {
  // @@protoc_insertion_point(field_get:onebot.GetGroupHonorInfoResp.strong_newbie_list)
  return _internal_strong_newbie_list(index);
}
inline ::onebot::GetGroupHonorInfoResp_Honor* GetGroupHonorInfoResp::_internal_add_strong_newbie_list() {
  return strong_newbie_list_.Add();
}
inline ::onebot::GetGroupHonorInfoResp_Honor* GetGroupHonorInfoResp::add_strong_newbie_list() {
  // @@protoc_insertion_point(field_add:onebot.GetGroupHonorInfoResp.strong_newbie_list)
  return _internal_add_strong_newbie_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onebot::GetGroupHonorInfoResp_Honor >&
GetGroupHonorInfoResp::strong_newbie_list() const {
  // @@protoc_insertion_point(field_list:onebot.GetGroupHonorInfoResp.strong_newbie_list)
  return strong_newbie_list_;
}

// repeated .onebot.GetGroupHonorInfoResp.Honor emotion_list = 7;
inline int GetGroupHonorInfoResp::_internal_emotion_list_size() const {
  return emotion_list_.size();
}
inline int GetGroupHonorInfoResp::emotion_list_size() const {
  return _internal_emotion_list_size();
}
inline void GetGroupHonorInfoResp::clear_emotion_list() {
  emotion_list_.Clear();
}
inline ::onebot::GetGroupHonorInfoResp_Honor* GetGroupHonorInfoResp::mutable_emotion_list(int index) {
  // @@protoc_insertion_point(field_mutable:onebot.GetGroupHonorInfoResp.emotion_list)
  return emotion_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onebot::GetGroupHonorInfoResp_Honor >*
GetGroupHonorInfoResp::mutable_emotion_list() {
  // @@protoc_insertion_point(field_mutable_list:onebot.GetGroupHonorInfoResp.emotion_list)
  return &emotion_list_;
}
inline const ::onebot::GetGroupHonorInfoResp_Honor& GetGroupHonorInfoResp::_internal_emotion_list(int index) const {
  return emotion_list_.Get(index);
}
inline const ::onebot::GetGroupHonorInfoResp_Honor& GetGroupHonorInfoResp::emotion_list(int index) const {
  // @@protoc_insertion_point(field_get:onebot.GetGroupHonorInfoResp.emotion_list)
  return _internal_emotion_list(index);
}
inline ::onebot::GetGroupHonorInfoResp_Honor* GetGroupHonorInfoResp::_internal_add_emotion_list() {
  return emotion_list_.Add();
}
inline ::onebot::GetGroupHonorInfoResp_Honor* GetGroupHonorInfoResp::add_emotion_list() {
  // @@protoc_insertion_point(field_add:onebot.GetGroupHonorInfoResp.emotion_list)
  return _internal_add_emotion_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onebot::GetGroupHonorInfoResp_Honor >&
GetGroupHonorInfoResp::emotion_list() const {
  // @@protoc_insertion_point(field_list:onebot.GetGroupHonorInfoResp.emotion_list)
  return emotion_list_;
}

// -------------------------------------------------------------------

// GetCookiesReq

// string domain = 1;
inline void GetCookiesReq::clear_domain() {
  domain_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetCookiesReq::domain() const {
  // @@protoc_insertion_point(field_get:onebot.GetCookiesReq.domain)
  return _internal_domain();
}
inline void GetCookiesReq::set_domain(const std::string& value) {
  _internal_set_domain(value);
  // @@protoc_insertion_point(field_set:onebot.GetCookiesReq.domain)
}
inline std::string* GetCookiesReq::mutable_domain() {
  // @@protoc_insertion_point(field_mutable:onebot.GetCookiesReq.domain)
  return _internal_mutable_domain();
}
inline const std::string& GetCookiesReq::_internal_domain() const {
  return domain_.Get();
}
inline void GetCookiesReq::_internal_set_domain(const std::string& value) {
  
  domain_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetCookiesReq::set_domain(std::string&& value) {
  
  domain_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:onebot.GetCookiesReq.domain)
}
inline void GetCookiesReq::set_domain(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  domain_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:onebot.GetCookiesReq.domain)
}
inline void GetCookiesReq::set_domain(const char* value,
    size_t size) {
  
  domain_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:onebot.GetCookiesReq.domain)
}
inline std::string* GetCookiesReq::_internal_mutable_domain() {
  
  return domain_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetCookiesReq::release_domain() {
  // @@protoc_insertion_point(field_release:onebot.GetCookiesReq.domain)
  return domain_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetCookiesReq::set_allocated_domain(std::string* domain) {
  if (domain != nullptr) {
    
  } else {
    
  }
  domain_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), domain,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:onebot.GetCookiesReq.domain)
}

// -------------------------------------------------------------------

// GetCookiesResp

// string cookies = 1;
inline void GetCookiesResp::clear_cookies() {
  cookies_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetCookiesResp::cookies() const {
  // @@protoc_insertion_point(field_get:onebot.GetCookiesResp.cookies)
  return _internal_cookies();
}
inline void GetCookiesResp::set_cookies(const std::string& value) {
  _internal_set_cookies(value);
  // @@protoc_insertion_point(field_set:onebot.GetCookiesResp.cookies)
}
inline std::string* GetCookiesResp::mutable_cookies() {
  // @@protoc_insertion_point(field_mutable:onebot.GetCookiesResp.cookies)
  return _internal_mutable_cookies();
}
inline const std::string& GetCookiesResp::_internal_cookies() const {
  return cookies_.Get();
}
inline void GetCookiesResp::_internal_set_cookies(const std::string& value) {
  
  cookies_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetCookiesResp::set_cookies(std::string&& value) {
  
  cookies_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:onebot.GetCookiesResp.cookies)
}
inline void GetCookiesResp::set_cookies(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cookies_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:onebot.GetCookiesResp.cookies)
}
inline void GetCookiesResp::set_cookies(const char* value,
    size_t size) {
  
  cookies_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:onebot.GetCookiesResp.cookies)
}
inline std::string* GetCookiesResp::_internal_mutable_cookies() {
  
  return cookies_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetCookiesResp::release_cookies() {
  // @@protoc_insertion_point(field_release:onebot.GetCookiesResp.cookies)
  return cookies_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetCookiesResp::set_allocated_cookies(std::string* cookies) {
  if (cookies != nullptr) {
    
  } else {
    
  }
  cookies_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cookies,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:onebot.GetCookiesResp.cookies)
}

// -------------------------------------------------------------------

// GetCsrfTokenReq

// -------------------------------------------------------------------

// GetCsrfTokenResp

// int32 token = 1;
inline void GetCsrfTokenResp::clear_token() {
  token_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetCsrfTokenResp::_internal_token() const {
  return token_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetCsrfTokenResp::token() const {
  // @@protoc_insertion_point(field_get:onebot.GetCsrfTokenResp.token)
  return _internal_token();
}
inline void GetCsrfTokenResp::_internal_set_token(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  token_ = value;
}
inline void GetCsrfTokenResp::set_token(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:onebot.GetCsrfTokenResp.token)
}

// -------------------------------------------------------------------

// GetCredentialsReq

// string domain = 1;
inline void GetCredentialsReq::clear_domain() {
  domain_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetCredentialsReq::domain() const {
  // @@protoc_insertion_point(field_get:onebot.GetCredentialsReq.domain)
  return _internal_domain();
}
inline void GetCredentialsReq::set_domain(const std::string& value) {
  _internal_set_domain(value);
  // @@protoc_insertion_point(field_set:onebot.GetCredentialsReq.domain)
}
inline std::string* GetCredentialsReq::mutable_domain() {
  // @@protoc_insertion_point(field_mutable:onebot.GetCredentialsReq.domain)
  return _internal_mutable_domain();
}
inline const std::string& GetCredentialsReq::_internal_domain() const {
  return domain_.Get();
}
inline void GetCredentialsReq::_internal_set_domain(const std::string& value) {
  
  domain_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetCredentialsReq::set_domain(std::string&& value) {
  
  domain_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:onebot.GetCredentialsReq.domain)
}
inline void GetCredentialsReq::set_domain(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  domain_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:onebot.GetCredentialsReq.domain)
}
inline void GetCredentialsReq::set_domain(const char* value,
    size_t size) {
  
  domain_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:onebot.GetCredentialsReq.domain)
}
inline std::string* GetCredentialsReq::_internal_mutable_domain() {
  
  return domain_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetCredentialsReq::release_domain() {
  // @@protoc_insertion_point(field_release:onebot.GetCredentialsReq.domain)
  return domain_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetCredentialsReq::set_allocated_domain(std::string* domain) {
  if (domain != nullptr) {
    
  } else {
    
  }
  domain_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), domain,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:onebot.GetCredentialsReq.domain)
}

// -------------------------------------------------------------------

// GetCredentialsResp

// string cookies = 1;
inline void GetCredentialsResp::clear_cookies() {
  cookies_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetCredentialsResp::cookies() const {
  // @@protoc_insertion_point(field_get:onebot.GetCredentialsResp.cookies)
  return _internal_cookies();
}
inline void GetCredentialsResp::set_cookies(const std::string& value) {
  _internal_set_cookies(value);
  // @@protoc_insertion_point(field_set:onebot.GetCredentialsResp.cookies)
}
inline std::string* GetCredentialsResp::mutable_cookies() {
  // @@protoc_insertion_point(field_mutable:onebot.GetCredentialsResp.cookies)
  return _internal_mutable_cookies();
}
inline const std::string& GetCredentialsResp::_internal_cookies() const {
  return cookies_.Get();
}
inline void GetCredentialsResp::_internal_set_cookies(const std::string& value) {
  
  cookies_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetCredentialsResp::set_cookies(std::string&& value) {
  
  cookies_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:onebot.GetCredentialsResp.cookies)
}
inline void GetCredentialsResp::set_cookies(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cookies_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:onebot.GetCredentialsResp.cookies)
}
inline void GetCredentialsResp::set_cookies(const char* value,
    size_t size) {
  
  cookies_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:onebot.GetCredentialsResp.cookies)
}
inline std::string* GetCredentialsResp::_internal_mutable_cookies() {
  
  return cookies_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetCredentialsResp::release_cookies() {
  // @@protoc_insertion_point(field_release:onebot.GetCredentialsResp.cookies)
  return cookies_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetCredentialsResp::set_allocated_cookies(std::string* cookies) {
  if (cookies != nullptr) {
    
  } else {
    
  }
  cookies_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cookies,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:onebot.GetCredentialsResp.cookies)
}

// int32 csrf_token = 2;
inline void GetCredentialsResp::clear_csrf_token() {
  csrf_token_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetCredentialsResp::_internal_csrf_token() const {
  return csrf_token_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetCredentialsResp::csrf_token() const {
  // @@protoc_insertion_point(field_get:onebot.GetCredentialsResp.csrf_token)
  return _internal_csrf_token();
}
inline void GetCredentialsResp::_internal_set_csrf_token(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  csrf_token_ = value;
}
inline void GetCredentialsResp::set_csrf_token(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_csrf_token(value);
  // @@protoc_insertion_point(field_set:onebot.GetCredentialsResp.csrf_token)
}

// -------------------------------------------------------------------

// GetRecordReq

// string file = 1;
inline void GetRecordReq::clear_file() {
  file_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetRecordReq::file() const {
  // @@protoc_insertion_point(field_get:onebot.GetRecordReq.file)
  return _internal_file();
}
inline void GetRecordReq::set_file(const std::string& value) {
  _internal_set_file(value);
  // @@protoc_insertion_point(field_set:onebot.GetRecordReq.file)
}
inline std::string* GetRecordReq::mutable_file() {
  // @@protoc_insertion_point(field_mutable:onebot.GetRecordReq.file)
  return _internal_mutable_file();
}
inline const std::string& GetRecordReq::_internal_file() const {
  return file_.Get();
}
inline void GetRecordReq::_internal_set_file(const std::string& value) {
  
  file_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetRecordReq::set_file(std::string&& value) {
  
  file_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:onebot.GetRecordReq.file)
}
inline void GetRecordReq::set_file(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  file_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:onebot.GetRecordReq.file)
}
inline void GetRecordReq::set_file(const char* value,
    size_t size) {
  
  file_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:onebot.GetRecordReq.file)
}
inline std::string* GetRecordReq::_internal_mutable_file() {
  
  return file_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetRecordReq::release_file() {
  // @@protoc_insertion_point(field_release:onebot.GetRecordReq.file)
  return file_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetRecordReq::set_allocated_file(std::string* file) {
  if (file != nullptr) {
    
  } else {
    
  }
  file_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:onebot.GetRecordReq.file)
}

// string out_format = 2;
inline void GetRecordReq::clear_out_format() {
  out_format_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetRecordReq::out_format() const {
  // @@protoc_insertion_point(field_get:onebot.GetRecordReq.out_format)
  return _internal_out_format();
}
inline void GetRecordReq::set_out_format(const std::string& value) {
  _internal_set_out_format(value);
  // @@protoc_insertion_point(field_set:onebot.GetRecordReq.out_format)
}
inline std::string* GetRecordReq::mutable_out_format() {
  // @@protoc_insertion_point(field_mutable:onebot.GetRecordReq.out_format)
  return _internal_mutable_out_format();
}
inline const std::string& GetRecordReq::_internal_out_format() const {
  return out_format_.Get();
}
inline void GetRecordReq::_internal_set_out_format(const std::string& value) {
  
  out_format_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetRecordReq::set_out_format(std::string&& value) {
  
  out_format_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:onebot.GetRecordReq.out_format)
}
inline void GetRecordReq::set_out_format(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  out_format_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:onebot.GetRecordReq.out_format)
}
inline void GetRecordReq::set_out_format(const char* value,
    size_t size) {
  
  out_format_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:onebot.GetRecordReq.out_format)
}
inline std::string* GetRecordReq::_internal_mutable_out_format() {
  
  return out_format_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetRecordReq::release_out_format() {
  // @@protoc_insertion_point(field_release:onebot.GetRecordReq.out_format)
  return out_format_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetRecordReq::set_allocated_out_format(std::string* out_format) {
  if (out_format != nullptr) {
    
  } else {
    
  }
  out_format_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), out_format,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:onebot.GetRecordReq.out_format)
}

// -------------------------------------------------------------------

// GetRecordResp

// string file = 1;
inline void GetRecordResp::clear_file() {
  file_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetRecordResp::file() const {
  // @@protoc_insertion_point(field_get:onebot.GetRecordResp.file)
  return _internal_file();
}
inline void GetRecordResp::set_file(const std::string& value) {
  _internal_set_file(value);
  // @@protoc_insertion_point(field_set:onebot.GetRecordResp.file)
}
inline std::string* GetRecordResp::mutable_file() {
  // @@protoc_insertion_point(field_mutable:onebot.GetRecordResp.file)
  return _internal_mutable_file();
}
inline const std::string& GetRecordResp::_internal_file() const {
  return file_.Get();
}
inline void GetRecordResp::_internal_set_file(const std::string& value) {
  
  file_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetRecordResp::set_file(std::string&& value) {
  
  file_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:onebot.GetRecordResp.file)
}
inline void GetRecordResp::set_file(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  file_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:onebot.GetRecordResp.file)
}
inline void GetRecordResp::set_file(const char* value,
    size_t size) {
  
  file_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:onebot.GetRecordResp.file)
}
inline std::string* GetRecordResp::_internal_mutable_file() {
  
  return file_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetRecordResp::release_file() {
  // @@protoc_insertion_point(field_release:onebot.GetRecordResp.file)
  return file_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetRecordResp::set_allocated_file(std::string* file) {
  if (file != nullptr) {
    
  } else {
    
  }
  file_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:onebot.GetRecordResp.file)
}

// -------------------------------------------------------------------

// GetImageReq

// string file = 1;
inline void GetImageReq::clear_file() {
  file_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetImageReq::file() const {
  // @@protoc_insertion_point(field_get:onebot.GetImageReq.file)
  return _internal_file();
}
inline void GetImageReq::set_file(const std::string& value) {
  _internal_set_file(value);
  // @@protoc_insertion_point(field_set:onebot.GetImageReq.file)
}
inline std::string* GetImageReq::mutable_file() {
  // @@protoc_insertion_point(field_mutable:onebot.GetImageReq.file)
  return _internal_mutable_file();
}
inline const std::string& GetImageReq::_internal_file() const {
  return file_.Get();
}
inline void GetImageReq::_internal_set_file(const std::string& value) {
  
  file_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetImageReq::set_file(std::string&& value) {
  
  file_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:onebot.GetImageReq.file)
}
inline void GetImageReq::set_file(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  file_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:onebot.GetImageReq.file)
}
inline void GetImageReq::set_file(const char* value,
    size_t size) {
  
  file_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:onebot.GetImageReq.file)
}
inline std::string* GetImageReq::_internal_mutable_file() {
  
  return file_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetImageReq::release_file() {
  // @@protoc_insertion_point(field_release:onebot.GetImageReq.file)
  return file_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetImageReq::set_allocated_file(std::string* file) {
  if (file != nullptr) {
    
  } else {
    
  }
  file_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:onebot.GetImageReq.file)
}

// -------------------------------------------------------------------

// GetImageResp

// string file = 1;
inline void GetImageResp::clear_file() {
  file_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetImageResp::file() const {
  // @@protoc_insertion_point(field_get:onebot.GetImageResp.file)
  return _internal_file();
}
inline void GetImageResp::set_file(const std::string& value) {
  _internal_set_file(value);
  // @@protoc_insertion_point(field_set:onebot.GetImageResp.file)
}
inline std::string* GetImageResp::mutable_file() {
  // @@protoc_insertion_point(field_mutable:onebot.GetImageResp.file)
  return _internal_mutable_file();
}
inline const std::string& GetImageResp::_internal_file() const {
  return file_.Get();
}
inline void GetImageResp::_internal_set_file(const std::string& value) {
  
  file_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetImageResp::set_file(std::string&& value) {
  
  file_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:onebot.GetImageResp.file)
}
inline void GetImageResp::set_file(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  file_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:onebot.GetImageResp.file)
}
inline void GetImageResp::set_file(const char* value,
    size_t size) {
  
  file_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:onebot.GetImageResp.file)
}
inline std::string* GetImageResp::_internal_mutable_file() {
  
  return file_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetImageResp::release_file() {
  // @@protoc_insertion_point(field_release:onebot.GetImageResp.file)
  return file_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetImageResp::set_allocated_file(std::string* file) {
  if (file != nullptr) {
    
  } else {
    
  }
  file_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:onebot.GetImageResp.file)
}

// -------------------------------------------------------------------

// CanSendImageReq

// -------------------------------------------------------------------

// CanSendImageResp

// bool yes = 1;
inline void CanSendImageResp::clear_yes() {
  yes_ = false;
}
inline bool CanSendImageResp::_internal_yes() const {
  return yes_;
}
inline bool CanSendImageResp::yes() const {
  // @@protoc_insertion_point(field_get:onebot.CanSendImageResp.yes)
  return _internal_yes();
}
inline void CanSendImageResp::_internal_set_yes(bool value) {
  
  yes_ = value;
}
inline void CanSendImageResp::set_yes(bool value) {
  _internal_set_yes(value);
  // @@protoc_insertion_point(field_set:onebot.CanSendImageResp.yes)
}

// -------------------------------------------------------------------

// CanSendRecordReq

// -------------------------------------------------------------------

// CanSendRecordResp

// bool yes = 1;
inline void CanSendRecordResp::clear_yes() {
  yes_ = false;
}
inline bool CanSendRecordResp::_internal_yes() const {
  return yes_;
}
inline bool CanSendRecordResp::yes() const {
  // @@protoc_insertion_point(field_get:onebot.CanSendRecordResp.yes)
  return _internal_yes();
}
inline void CanSendRecordResp::_internal_set_yes(bool value) {
  
  yes_ = value;
}
inline void CanSendRecordResp::set_yes(bool value) {
  _internal_set_yes(value);
  // @@protoc_insertion_point(field_set:onebot.CanSendRecordResp.yes)
}

// -------------------------------------------------------------------

// GetStatusReq

// -------------------------------------------------------------------

// GetStatusResp

// bool online = 1;
inline void GetStatusResp::clear_online() {
  online_ = false;
}
inline bool GetStatusResp::_internal_online() const {
  return online_;
}
inline bool GetStatusResp::online() const {
  // @@protoc_insertion_point(field_get:onebot.GetStatusResp.online)
  return _internal_online();
}
inline void GetStatusResp::_internal_set_online(bool value) {
  
  online_ = value;
}
inline void GetStatusResp::set_online(bool value) {
  _internal_set_online(value);
  // @@protoc_insertion_point(field_set:onebot.GetStatusResp.online)
}

// bool good = 2;
inline void GetStatusResp::clear_good() {
  good_ = false;
}
inline bool GetStatusResp::_internal_good() const {
  return good_;
}
inline bool GetStatusResp::good() const {
  // @@protoc_insertion_point(field_get:onebot.GetStatusResp.good)
  return _internal_good();
}
inline void GetStatusResp::_internal_set_good(bool value) {
  
  good_ = value;
}
inline void GetStatusResp::set_good(bool value) {
  _internal_set_good(value);
  // @@protoc_insertion_point(field_set:onebot.GetStatusResp.good)
}

// -------------------------------------------------------------------

// GetVersionInfoReq

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// GetVersionInfoResp

// string app_name = 1;
inline void GetVersionInfoResp::clear_app_name() {
  app_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetVersionInfoResp::app_name() const {
  // @@protoc_insertion_point(field_get:onebot.GetVersionInfoResp.app_name)
  return _internal_app_name();
}
inline void GetVersionInfoResp::set_app_name(const std::string& value) {
  _internal_set_app_name(value);
  // @@protoc_insertion_point(field_set:onebot.GetVersionInfoResp.app_name)
}
inline std::string* GetVersionInfoResp::mutable_app_name() {
  // @@protoc_insertion_point(field_mutable:onebot.GetVersionInfoResp.app_name)
  return _internal_mutable_app_name();
}
inline const std::string& GetVersionInfoResp::_internal_app_name() const {
  return app_name_.Get();
}
inline void GetVersionInfoResp::_internal_set_app_name(const std::string& value) {
  
  app_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetVersionInfoResp::set_app_name(std::string&& value) {
  
  app_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:onebot.GetVersionInfoResp.app_name)
}
inline void GetVersionInfoResp::set_app_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  app_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:onebot.GetVersionInfoResp.app_name)
}
inline void GetVersionInfoResp::set_app_name(const char* value,
    size_t size) {
  
  app_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:onebot.GetVersionInfoResp.app_name)
}
inline std::string* GetVersionInfoResp::_internal_mutable_app_name() {
  
  return app_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetVersionInfoResp::release_app_name() {
  // @@protoc_insertion_point(field_release:onebot.GetVersionInfoResp.app_name)
  return app_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetVersionInfoResp::set_allocated_app_name(std::string* app_name) {
  if (app_name != nullptr) {
    
  } else {
    
  }
  app_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), app_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:onebot.GetVersionInfoResp.app_name)
}

// string app_version = 2;
inline void GetVersionInfoResp::clear_app_version() {
  app_version_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetVersionInfoResp::app_version() const {
  // @@protoc_insertion_point(field_get:onebot.GetVersionInfoResp.app_version)
  return _internal_app_version();
}
inline void GetVersionInfoResp::set_app_version(const std::string& value) {
  _internal_set_app_version(value);
  // @@protoc_insertion_point(field_set:onebot.GetVersionInfoResp.app_version)
}
inline std::string* GetVersionInfoResp::mutable_app_version() {
  // @@protoc_insertion_point(field_mutable:onebot.GetVersionInfoResp.app_version)
  return _internal_mutable_app_version();
}
inline const std::string& GetVersionInfoResp::_internal_app_version() const {
  return app_version_.Get();
}
inline void GetVersionInfoResp::_internal_set_app_version(const std::string& value) {
  
  app_version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetVersionInfoResp::set_app_version(std::string&& value) {
  
  app_version_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:onebot.GetVersionInfoResp.app_version)
}
inline void GetVersionInfoResp::set_app_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  app_version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:onebot.GetVersionInfoResp.app_version)
}
inline void GetVersionInfoResp::set_app_version(const char* value,
    size_t size) {
  
  app_version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:onebot.GetVersionInfoResp.app_version)
}
inline std::string* GetVersionInfoResp::_internal_mutable_app_version() {
  
  return app_version_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetVersionInfoResp::release_app_version() {
  // @@protoc_insertion_point(field_release:onebot.GetVersionInfoResp.app_version)
  return app_version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetVersionInfoResp::set_allocated_app_version(std::string* app_version) {
  if (app_version != nullptr) {
    
  } else {
    
  }
  app_version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), app_version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:onebot.GetVersionInfoResp.app_version)
}

// string protocol_version = 3;
inline void GetVersionInfoResp::clear_protocol_version() {
  protocol_version_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetVersionInfoResp::protocol_version() const {
  // @@protoc_insertion_point(field_get:onebot.GetVersionInfoResp.protocol_version)
  return _internal_protocol_version();
}
inline void GetVersionInfoResp::set_protocol_version(const std::string& value) {
  _internal_set_protocol_version(value);
  // @@protoc_insertion_point(field_set:onebot.GetVersionInfoResp.protocol_version)
}
inline std::string* GetVersionInfoResp::mutable_protocol_version() {
  // @@protoc_insertion_point(field_mutable:onebot.GetVersionInfoResp.protocol_version)
  return _internal_mutable_protocol_version();
}
inline const std::string& GetVersionInfoResp::_internal_protocol_version() const {
  return protocol_version_.Get();
}
inline void GetVersionInfoResp::_internal_set_protocol_version(const std::string& value) {
  
  protocol_version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetVersionInfoResp::set_protocol_version(std::string&& value) {
  
  protocol_version_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:onebot.GetVersionInfoResp.protocol_version)
}
inline void GetVersionInfoResp::set_protocol_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  protocol_version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:onebot.GetVersionInfoResp.protocol_version)
}
inline void GetVersionInfoResp::set_protocol_version(const char* value,
    size_t size) {
  
  protocol_version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:onebot.GetVersionInfoResp.protocol_version)
}
inline std::string* GetVersionInfoResp::_internal_mutable_protocol_version() {
  
  return protocol_version_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetVersionInfoResp::release_protocol_version() {
  // @@protoc_insertion_point(field_release:onebot.GetVersionInfoResp.protocol_version)
  return protocol_version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetVersionInfoResp::set_allocated_protocol_version(std::string* protocol_version) {
  if (protocol_version != nullptr) {
    
  } else {
    
  }
  protocol_version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), protocol_version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:onebot.GetVersionInfoResp.protocol_version)
}

// map<string, string> extra = 4;
inline int GetVersionInfoResp::_internal_extra_size() const {
  return extra_.size();
}
inline int GetVersionInfoResp::extra_size() const {
  return _internal_extra_size();
}
inline void GetVersionInfoResp::clear_extra() {
  extra_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
GetVersionInfoResp::_internal_extra() const {
  return extra_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
GetVersionInfoResp::extra() const {
  // @@protoc_insertion_point(field_map:onebot.GetVersionInfoResp.extra)
  return _internal_extra();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
GetVersionInfoResp::_internal_mutable_extra() {
  return extra_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
GetVersionInfoResp::mutable_extra() {
  // @@protoc_insertion_point(field_mutable_map:onebot.GetVersionInfoResp.extra)
  return _internal_mutable_extra();
}

// -------------------------------------------------------------------

// SetRestartReq

// int32 delay = 1;
inline void SetRestartReq::clear_delay() {
  delay_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SetRestartReq::_internal_delay() const {
  return delay_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SetRestartReq::delay() const {
  // @@protoc_insertion_point(field_get:onebot.SetRestartReq.delay)
  return _internal_delay();
}
inline void SetRestartReq::_internal_set_delay(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  delay_ = value;
}
inline void SetRestartReq::set_delay(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_delay(value);
  // @@protoc_insertion_point(field_set:onebot.SetRestartReq.delay)
}

// -------------------------------------------------------------------

// SetRestartResp

// -------------------------------------------------------------------

// CleanCacheReq

// -------------------------------------------------------------------

// CleanCacheResp

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace onebot

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_api_2eproto
