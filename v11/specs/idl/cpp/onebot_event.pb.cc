// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: onebot_event.proto

#include "onebot_event.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_onebot_5fevent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GroupMessageEvent_Anonymous_onebot_5fevent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_onebot_5fevent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GroupMessageEvent_Sender_onebot_5fevent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_onebot_5fevent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GroupUploadNoticeEvent_File_onebot_5fevent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_onebot_5fbase_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Message_onebot_5fbase_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_onebot_5fevent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PrivateMessageEvent_Sender_onebot_5fevent_2eproto;
namespace onebot {
class BaseEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BaseEvent> _instance;
} _BaseEvent_default_instance_;
class BaseMessageEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BaseMessageEvent> _instance;
} _BaseMessageEvent_default_instance_;
class BaseNoticeEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BaseNoticeEvent> _instance;
} _BaseNoticeEvent_default_instance_;
class BaseRequestEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BaseRequestEvent> _instance;
} _BaseRequestEvent_default_instance_;
class PrivateMessageEvent_SenderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PrivateMessageEvent_Sender> _instance;
} _PrivateMessageEvent_Sender_default_instance_;
class PrivateMessageEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PrivateMessageEvent> _instance;
} _PrivateMessageEvent_default_instance_;
class GroupMessageEvent_AnonymousDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GroupMessageEvent_Anonymous> _instance;
} _GroupMessageEvent_Anonymous_default_instance_;
class GroupMessageEvent_SenderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GroupMessageEvent_Sender> _instance;
} _GroupMessageEvent_Sender_default_instance_;
class GroupMessageEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GroupMessageEvent> _instance;
} _GroupMessageEvent_default_instance_;
class GroupUploadNoticeEvent_FileDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GroupUploadNoticeEvent_File> _instance;
} _GroupUploadNoticeEvent_File_default_instance_;
class GroupUploadNoticeEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GroupUploadNoticeEvent> _instance;
} _GroupUploadNoticeEvent_default_instance_;
class GroupAdminNoticeEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GroupAdminNoticeEvent> _instance;
} _GroupAdminNoticeEvent_default_instance_;
class GroupDecreaseNoticeEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GroupDecreaseNoticeEvent> _instance;
} _GroupDecreaseNoticeEvent_default_instance_;
class GroupIncreaseNoticeEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GroupIncreaseNoticeEvent> _instance;
} _GroupIncreaseNoticeEvent_default_instance_;
class GroupBanNoticeEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GroupBanNoticeEvent> _instance;
} _GroupBanNoticeEvent_default_instance_;
class FriendAddNoticeEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FriendAddNoticeEvent> _instance;
} _FriendAddNoticeEvent_default_instance_;
class GroupRecallNoticeEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GroupRecallNoticeEvent> _instance;
} _GroupRecallNoticeEvent_default_instance_;
class FriendRecallNoticeEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FriendRecallNoticeEvent> _instance;
} _FriendRecallNoticeEvent_default_instance_;
class FriendRequestEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FriendRequestEvent> _instance;
} _FriendRequestEvent_default_instance_;
class GroupRequestEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GroupRequestEvent> _instance;
} _GroupRequestEvent_default_instance_;
}  // namespace onebot
static void InitDefaultsscc_info_BaseEvent_onebot_5fevent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::onebot::_BaseEvent_default_instance_;
    new (ptr) ::onebot::BaseEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::onebot::BaseEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BaseEvent_onebot_5fevent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BaseEvent_onebot_5fevent_2eproto}, {}};

static void InitDefaultsscc_info_BaseMessageEvent_onebot_5fevent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::onebot::_BaseMessageEvent_default_instance_;
    new (ptr) ::onebot::BaseMessageEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::onebot::BaseMessageEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BaseMessageEvent_onebot_5fevent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BaseMessageEvent_onebot_5fevent_2eproto}, {}};

static void InitDefaultsscc_info_BaseNoticeEvent_onebot_5fevent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::onebot::_BaseNoticeEvent_default_instance_;
    new (ptr) ::onebot::BaseNoticeEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::onebot::BaseNoticeEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BaseNoticeEvent_onebot_5fevent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BaseNoticeEvent_onebot_5fevent_2eproto}, {}};

static void InitDefaultsscc_info_BaseRequestEvent_onebot_5fevent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::onebot::_BaseRequestEvent_default_instance_;
    new (ptr) ::onebot::BaseRequestEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::onebot::BaseRequestEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BaseRequestEvent_onebot_5fevent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BaseRequestEvent_onebot_5fevent_2eproto}, {}};

static void InitDefaultsscc_info_FriendAddNoticeEvent_onebot_5fevent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::onebot::_FriendAddNoticeEvent_default_instance_;
    new (ptr) ::onebot::FriendAddNoticeEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::onebot::FriendAddNoticeEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FriendAddNoticeEvent_onebot_5fevent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FriendAddNoticeEvent_onebot_5fevent_2eproto}, {}};

static void InitDefaultsscc_info_FriendRecallNoticeEvent_onebot_5fevent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::onebot::_FriendRecallNoticeEvent_default_instance_;
    new (ptr) ::onebot::FriendRecallNoticeEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::onebot::FriendRecallNoticeEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FriendRecallNoticeEvent_onebot_5fevent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FriendRecallNoticeEvent_onebot_5fevent_2eproto}, {}};

static void InitDefaultsscc_info_FriendRequestEvent_onebot_5fevent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::onebot::_FriendRequestEvent_default_instance_;
    new (ptr) ::onebot::FriendRequestEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::onebot::FriendRequestEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FriendRequestEvent_onebot_5fevent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FriendRequestEvent_onebot_5fevent_2eproto}, {}};

static void InitDefaultsscc_info_GroupAdminNoticeEvent_onebot_5fevent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::onebot::_GroupAdminNoticeEvent_default_instance_;
    new (ptr) ::onebot::GroupAdminNoticeEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::onebot::GroupAdminNoticeEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GroupAdminNoticeEvent_onebot_5fevent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GroupAdminNoticeEvent_onebot_5fevent_2eproto}, {}};

static void InitDefaultsscc_info_GroupBanNoticeEvent_onebot_5fevent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::onebot::_GroupBanNoticeEvent_default_instance_;
    new (ptr) ::onebot::GroupBanNoticeEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::onebot::GroupBanNoticeEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GroupBanNoticeEvent_onebot_5fevent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GroupBanNoticeEvent_onebot_5fevent_2eproto}, {}};

static void InitDefaultsscc_info_GroupDecreaseNoticeEvent_onebot_5fevent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::onebot::_GroupDecreaseNoticeEvent_default_instance_;
    new (ptr) ::onebot::GroupDecreaseNoticeEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::onebot::GroupDecreaseNoticeEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GroupDecreaseNoticeEvent_onebot_5fevent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GroupDecreaseNoticeEvent_onebot_5fevent_2eproto}, {}};

static void InitDefaultsscc_info_GroupIncreaseNoticeEvent_onebot_5fevent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::onebot::_GroupIncreaseNoticeEvent_default_instance_;
    new (ptr) ::onebot::GroupIncreaseNoticeEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::onebot::GroupIncreaseNoticeEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GroupIncreaseNoticeEvent_onebot_5fevent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GroupIncreaseNoticeEvent_onebot_5fevent_2eproto}, {}};

static void InitDefaultsscc_info_GroupMessageEvent_onebot_5fevent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::onebot::_GroupMessageEvent_default_instance_;
    new (ptr) ::onebot::GroupMessageEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::onebot::GroupMessageEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_GroupMessageEvent_onebot_5fevent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_GroupMessageEvent_onebot_5fevent_2eproto}, {
      &scc_info_GroupMessageEvent_Anonymous_onebot_5fevent_2eproto.base,
      &scc_info_Message_onebot_5fbase_2eproto.base,
      &scc_info_GroupMessageEvent_Sender_onebot_5fevent_2eproto.base,}};

static void InitDefaultsscc_info_GroupMessageEvent_Anonymous_onebot_5fevent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::onebot::_GroupMessageEvent_Anonymous_default_instance_;
    new (ptr) ::onebot::GroupMessageEvent_Anonymous();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::onebot::GroupMessageEvent_Anonymous::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GroupMessageEvent_Anonymous_onebot_5fevent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GroupMessageEvent_Anonymous_onebot_5fevent_2eproto}, {}};

static void InitDefaultsscc_info_GroupMessageEvent_Sender_onebot_5fevent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::onebot::_GroupMessageEvent_Sender_default_instance_;
    new (ptr) ::onebot::GroupMessageEvent_Sender();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::onebot::GroupMessageEvent_Sender::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GroupMessageEvent_Sender_onebot_5fevent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GroupMessageEvent_Sender_onebot_5fevent_2eproto}, {}};

static void InitDefaultsscc_info_GroupRecallNoticeEvent_onebot_5fevent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::onebot::_GroupRecallNoticeEvent_default_instance_;
    new (ptr) ::onebot::GroupRecallNoticeEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::onebot::GroupRecallNoticeEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GroupRecallNoticeEvent_onebot_5fevent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GroupRecallNoticeEvent_onebot_5fevent_2eproto}, {}};

static void InitDefaultsscc_info_GroupRequestEvent_onebot_5fevent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::onebot::_GroupRequestEvent_default_instance_;
    new (ptr) ::onebot::GroupRequestEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::onebot::GroupRequestEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GroupRequestEvent_onebot_5fevent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GroupRequestEvent_onebot_5fevent_2eproto}, {}};

static void InitDefaultsscc_info_GroupUploadNoticeEvent_onebot_5fevent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::onebot::_GroupUploadNoticeEvent_default_instance_;
    new (ptr) ::onebot::GroupUploadNoticeEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::onebot::GroupUploadNoticeEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GroupUploadNoticeEvent_onebot_5fevent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GroupUploadNoticeEvent_onebot_5fevent_2eproto}, {
      &scc_info_GroupUploadNoticeEvent_File_onebot_5fevent_2eproto.base,}};

static void InitDefaultsscc_info_GroupUploadNoticeEvent_File_onebot_5fevent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::onebot::_GroupUploadNoticeEvent_File_default_instance_;
    new (ptr) ::onebot::GroupUploadNoticeEvent_File();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::onebot::GroupUploadNoticeEvent_File::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GroupUploadNoticeEvent_File_onebot_5fevent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GroupUploadNoticeEvent_File_onebot_5fevent_2eproto}, {}};

static void InitDefaultsscc_info_PrivateMessageEvent_onebot_5fevent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::onebot::_PrivateMessageEvent_default_instance_;
    new (ptr) ::onebot::PrivateMessageEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::onebot::PrivateMessageEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PrivateMessageEvent_onebot_5fevent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PrivateMessageEvent_onebot_5fevent_2eproto}, {
      &scc_info_Message_onebot_5fbase_2eproto.base,
      &scc_info_PrivateMessageEvent_Sender_onebot_5fevent_2eproto.base,}};

static void InitDefaultsscc_info_PrivateMessageEvent_Sender_onebot_5fevent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::onebot::_PrivateMessageEvent_Sender_default_instance_;
    new (ptr) ::onebot::PrivateMessageEvent_Sender();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::onebot::PrivateMessageEvent_Sender::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PrivateMessageEvent_Sender_onebot_5fevent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PrivateMessageEvent_Sender_onebot_5fevent_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_onebot_5fevent_2eproto[20];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_onebot_5fevent_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_onebot_5fevent_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_onebot_5fevent_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onebot::BaseEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::onebot::BaseEvent, time_),
  PROTOBUF_FIELD_OFFSET(::onebot::BaseEvent, self_id_),
  PROTOBUF_FIELD_OFFSET(::onebot::BaseEvent, post_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onebot::BaseMessageEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::onebot::BaseMessageEvent, time_),
  PROTOBUF_FIELD_OFFSET(::onebot::BaseMessageEvent, self_id_),
  PROTOBUF_FIELD_OFFSET(::onebot::BaseMessageEvent, post_type_),
  PROTOBUF_FIELD_OFFSET(::onebot::BaseMessageEvent, message_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onebot::BaseNoticeEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::onebot::BaseNoticeEvent, time_),
  PROTOBUF_FIELD_OFFSET(::onebot::BaseNoticeEvent, self_id_),
  PROTOBUF_FIELD_OFFSET(::onebot::BaseNoticeEvent, post_type_),
  PROTOBUF_FIELD_OFFSET(::onebot::BaseNoticeEvent, notice_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onebot::BaseRequestEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::onebot::BaseRequestEvent, time_),
  PROTOBUF_FIELD_OFFSET(::onebot::BaseRequestEvent, self_id_),
  PROTOBUF_FIELD_OFFSET(::onebot::BaseRequestEvent, post_type_),
  PROTOBUF_FIELD_OFFSET(::onebot::BaseRequestEvent, notice_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onebot::PrivateMessageEvent_Sender, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::onebot::PrivateMessageEvent_Sender, user_id_),
  PROTOBUF_FIELD_OFFSET(::onebot::PrivateMessageEvent_Sender, nickname_),
  PROTOBUF_FIELD_OFFSET(::onebot::PrivateMessageEvent_Sender, sex_),
  PROTOBUF_FIELD_OFFSET(::onebot::PrivateMessageEvent_Sender, age_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onebot::PrivateMessageEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::onebot::PrivateMessageEvent, time_),
  PROTOBUF_FIELD_OFFSET(::onebot::PrivateMessageEvent, self_id_),
  PROTOBUF_FIELD_OFFSET(::onebot::PrivateMessageEvent, post_type_),
  PROTOBUF_FIELD_OFFSET(::onebot::PrivateMessageEvent, message_type_),
  PROTOBUF_FIELD_OFFSET(::onebot::PrivateMessageEvent, sub_type_),
  PROTOBUF_FIELD_OFFSET(::onebot::PrivateMessageEvent, message_id_),
  PROTOBUF_FIELD_OFFSET(::onebot::PrivateMessageEvent, user_id_),
  PROTOBUF_FIELD_OFFSET(::onebot::PrivateMessageEvent, message_),
  PROTOBUF_FIELD_OFFSET(::onebot::PrivateMessageEvent, raw_message_),
  PROTOBUF_FIELD_OFFSET(::onebot::PrivateMessageEvent, font_),
  PROTOBUF_FIELD_OFFSET(::onebot::PrivateMessageEvent, sender_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onebot::GroupMessageEvent_Anonymous, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::onebot::GroupMessageEvent_Anonymous, id_),
  PROTOBUF_FIELD_OFFSET(::onebot::GroupMessageEvent_Anonymous, name_),
  PROTOBUF_FIELD_OFFSET(::onebot::GroupMessageEvent_Anonymous, flag_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onebot::GroupMessageEvent_Sender, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::onebot::GroupMessageEvent_Sender, user_id_),
  PROTOBUF_FIELD_OFFSET(::onebot::GroupMessageEvent_Sender, nickname_),
  PROTOBUF_FIELD_OFFSET(::onebot::GroupMessageEvent_Sender, card_),
  PROTOBUF_FIELD_OFFSET(::onebot::GroupMessageEvent_Sender, sex_),
  PROTOBUF_FIELD_OFFSET(::onebot::GroupMessageEvent_Sender, age_),
  PROTOBUF_FIELD_OFFSET(::onebot::GroupMessageEvent_Sender, area_),
  PROTOBUF_FIELD_OFFSET(::onebot::GroupMessageEvent_Sender, level_),
  PROTOBUF_FIELD_OFFSET(::onebot::GroupMessageEvent_Sender, role_),
  PROTOBUF_FIELD_OFFSET(::onebot::GroupMessageEvent_Sender, title_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onebot::GroupMessageEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::onebot::GroupMessageEvent, time_),
  PROTOBUF_FIELD_OFFSET(::onebot::GroupMessageEvent, self_id_),
  PROTOBUF_FIELD_OFFSET(::onebot::GroupMessageEvent, post_type_),
  PROTOBUF_FIELD_OFFSET(::onebot::GroupMessageEvent, message_type_),
  PROTOBUF_FIELD_OFFSET(::onebot::GroupMessageEvent, sub_type_),
  PROTOBUF_FIELD_OFFSET(::onebot::GroupMessageEvent, message_id_),
  PROTOBUF_FIELD_OFFSET(::onebot::GroupMessageEvent, group_id_),
  PROTOBUF_FIELD_OFFSET(::onebot::GroupMessageEvent, user_id_),
  PROTOBUF_FIELD_OFFSET(::onebot::GroupMessageEvent, anonymous_),
  PROTOBUF_FIELD_OFFSET(::onebot::GroupMessageEvent, message_),
  PROTOBUF_FIELD_OFFSET(::onebot::GroupMessageEvent, raw_message_),
  PROTOBUF_FIELD_OFFSET(::onebot::GroupMessageEvent, font_),
  PROTOBUF_FIELD_OFFSET(::onebot::GroupMessageEvent, sender_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onebot::GroupUploadNoticeEvent_File, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::onebot::GroupUploadNoticeEvent_File, id_),
  PROTOBUF_FIELD_OFFSET(::onebot::GroupUploadNoticeEvent_File, name_),
  PROTOBUF_FIELD_OFFSET(::onebot::GroupUploadNoticeEvent_File, size_),
  PROTOBUF_FIELD_OFFSET(::onebot::GroupUploadNoticeEvent_File, busid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onebot::GroupUploadNoticeEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::onebot::GroupUploadNoticeEvent, time_),
  PROTOBUF_FIELD_OFFSET(::onebot::GroupUploadNoticeEvent, self_id_),
  PROTOBUF_FIELD_OFFSET(::onebot::GroupUploadNoticeEvent, post_type_),
  PROTOBUF_FIELD_OFFSET(::onebot::GroupUploadNoticeEvent, notice_type_),
  PROTOBUF_FIELD_OFFSET(::onebot::GroupUploadNoticeEvent, group_id_),
  PROTOBUF_FIELD_OFFSET(::onebot::GroupUploadNoticeEvent, user_id_),
  PROTOBUF_FIELD_OFFSET(::onebot::GroupUploadNoticeEvent, file_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onebot::GroupAdminNoticeEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::onebot::GroupAdminNoticeEvent, time_),
  PROTOBUF_FIELD_OFFSET(::onebot::GroupAdminNoticeEvent, self_id_),
  PROTOBUF_FIELD_OFFSET(::onebot::GroupAdminNoticeEvent, post_type_),
  PROTOBUF_FIELD_OFFSET(::onebot::GroupAdminNoticeEvent, notice_type_),
  PROTOBUF_FIELD_OFFSET(::onebot::GroupAdminNoticeEvent, sub_type_),
  PROTOBUF_FIELD_OFFSET(::onebot::GroupAdminNoticeEvent, group_id_),
  PROTOBUF_FIELD_OFFSET(::onebot::GroupAdminNoticeEvent, user_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onebot::GroupDecreaseNoticeEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::onebot::GroupDecreaseNoticeEvent, time_),
  PROTOBUF_FIELD_OFFSET(::onebot::GroupDecreaseNoticeEvent, self_id_),
  PROTOBUF_FIELD_OFFSET(::onebot::GroupDecreaseNoticeEvent, post_type_),
  PROTOBUF_FIELD_OFFSET(::onebot::GroupDecreaseNoticeEvent, notice_type_),
  PROTOBUF_FIELD_OFFSET(::onebot::GroupDecreaseNoticeEvent, sub_type_),
  PROTOBUF_FIELD_OFFSET(::onebot::GroupDecreaseNoticeEvent, group_id_),
  PROTOBUF_FIELD_OFFSET(::onebot::GroupDecreaseNoticeEvent, operator_id_),
  PROTOBUF_FIELD_OFFSET(::onebot::GroupDecreaseNoticeEvent, user_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onebot::GroupIncreaseNoticeEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::onebot::GroupIncreaseNoticeEvent, time_),
  PROTOBUF_FIELD_OFFSET(::onebot::GroupIncreaseNoticeEvent, self_id_),
  PROTOBUF_FIELD_OFFSET(::onebot::GroupIncreaseNoticeEvent, post_type_),
  PROTOBUF_FIELD_OFFSET(::onebot::GroupIncreaseNoticeEvent, notice_type_),
  PROTOBUF_FIELD_OFFSET(::onebot::GroupIncreaseNoticeEvent, sub_type_),
  PROTOBUF_FIELD_OFFSET(::onebot::GroupIncreaseNoticeEvent, group_id_),
  PROTOBUF_FIELD_OFFSET(::onebot::GroupIncreaseNoticeEvent, operator_id_),
  PROTOBUF_FIELD_OFFSET(::onebot::GroupIncreaseNoticeEvent, user_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onebot::GroupBanNoticeEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::onebot::GroupBanNoticeEvent, time_),
  PROTOBUF_FIELD_OFFSET(::onebot::GroupBanNoticeEvent, self_id_),
  PROTOBUF_FIELD_OFFSET(::onebot::GroupBanNoticeEvent, post_type_),
  PROTOBUF_FIELD_OFFSET(::onebot::GroupBanNoticeEvent, notice_type_),
  PROTOBUF_FIELD_OFFSET(::onebot::GroupBanNoticeEvent, sub_type_),
  PROTOBUF_FIELD_OFFSET(::onebot::GroupBanNoticeEvent, group_id_),
  PROTOBUF_FIELD_OFFSET(::onebot::GroupBanNoticeEvent, operator_id_),
  PROTOBUF_FIELD_OFFSET(::onebot::GroupBanNoticeEvent, user_id_),
  PROTOBUF_FIELD_OFFSET(::onebot::GroupBanNoticeEvent, duration_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onebot::FriendAddNoticeEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::onebot::FriendAddNoticeEvent, time_),
  PROTOBUF_FIELD_OFFSET(::onebot::FriendAddNoticeEvent, self_id_),
  PROTOBUF_FIELD_OFFSET(::onebot::FriendAddNoticeEvent, post_type_),
  PROTOBUF_FIELD_OFFSET(::onebot::FriendAddNoticeEvent, notice_type_),
  PROTOBUF_FIELD_OFFSET(::onebot::FriendAddNoticeEvent, user_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onebot::GroupRecallNoticeEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::onebot::GroupRecallNoticeEvent, time_),
  PROTOBUF_FIELD_OFFSET(::onebot::GroupRecallNoticeEvent, self_id_),
  PROTOBUF_FIELD_OFFSET(::onebot::GroupRecallNoticeEvent, post_type_),
  PROTOBUF_FIELD_OFFSET(::onebot::GroupRecallNoticeEvent, notice_type_),
  PROTOBUF_FIELD_OFFSET(::onebot::GroupRecallNoticeEvent, group_id_),
  PROTOBUF_FIELD_OFFSET(::onebot::GroupRecallNoticeEvent, user_id_),
  PROTOBUF_FIELD_OFFSET(::onebot::GroupRecallNoticeEvent, operator_id_),
  PROTOBUF_FIELD_OFFSET(::onebot::GroupRecallNoticeEvent, message_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onebot::FriendRecallNoticeEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::onebot::FriendRecallNoticeEvent, time_),
  PROTOBUF_FIELD_OFFSET(::onebot::FriendRecallNoticeEvent, self_id_),
  PROTOBUF_FIELD_OFFSET(::onebot::FriendRecallNoticeEvent, post_type_),
  PROTOBUF_FIELD_OFFSET(::onebot::FriendRecallNoticeEvent, notice_type_),
  PROTOBUF_FIELD_OFFSET(::onebot::FriendRecallNoticeEvent, user_id_),
  PROTOBUF_FIELD_OFFSET(::onebot::FriendRecallNoticeEvent, message_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onebot::FriendRequestEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::onebot::FriendRequestEvent, time_),
  PROTOBUF_FIELD_OFFSET(::onebot::FriendRequestEvent, self_id_),
  PROTOBUF_FIELD_OFFSET(::onebot::FriendRequestEvent, post_type_),
  PROTOBUF_FIELD_OFFSET(::onebot::FriendRequestEvent, request_type_),
  PROTOBUF_FIELD_OFFSET(::onebot::FriendRequestEvent, user_id_),
  PROTOBUF_FIELD_OFFSET(::onebot::FriendRequestEvent, comment_),
  PROTOBUF_FIELD_OFFSET(::onebot::FriendRequestEvent, flag_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onebot::GroupRequestEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::onebot::GroupRequestEvent, time_),
  PROTOBUF_FIELD_OFFSET(::onebot::GroupRequestEvent, self_id_),
  PROTOBUF_FIELD_OFFSET(::onebot::GroupRequestEvent, post_type_),
  PROTOBUF_FIELD_OFFSET(::onebot::GroupRequestEvent, request_type_),
  PROTOBUF_FIELD_OFFSET(::onebot::GroupRequestEvent, sub_type_),
  PROTOBUF_FIELD_OFFSET(::onebot::GroupRequestEvent, group_id_),
  PROTOBUF_FIELD_OFFSET(::onebot::GroupRequestEvent, user_id_),
  PROTOBUF_FIELD_OFFSET(::onebot::GroupRequestEvent, comment_),
  PROTOBUF_FIELD_OFFSET(::onebot::GroupRequestEvent, flag_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::onebot::BaseEvent)},
  { 8, -1, sizeof(::onebot::BaseMessageEvent)},
  { 17, -1, sizeof(::onebot::BaseNoticeEvent)},
  { 26, -1, sizeof(::onebot::BaseRequestEvent)},
  { 35, -1, sizeof(::onebot::PrivateMessageEvent_Sender)},
  { 44, -1, sizeof(::onebot::PrivateMessageEvent)},
  { 60, -1, sizeof(::onebot::GroupMessageEvent_Anonymous)},
  { 68, -1, sizeof(::onebot::GroupMessageEvent_Sender)},
  { 82, -1, sizeof(::onebot::GroupMessageEvent)},
  { 100, -1, sizeof(::onebot::GroupUploadNoticeEvent_File)},
  { 109, -1, sizeof(::onebot::GroupUploadNoticeEvent)},
  { 121, -1, sizeof(::onebot::GroupAdminNoticeEvent)},
  { 133, -1, sizeof(::onebot::GroupDecreaseNoticeEvent)},
  { 146, -1, sizeof(::onebot::GroupIncreaseNoticeEvent)},
  { 159, -1, sizeof(::onebot::GroupBanNoticeEvent)},
  { 173, -1, sizeof(::onebot::FriendAddNoticeEvent)},
  { 183, -1, sizeof(::onebot::GroupRecallNoticeEvent)},
  { 196, -1, sizeof(::onebot::FriendRecallNoticeEvent)},
  { 207, -1, sizeof(::onebot::FriendRequestEvent)},
  { 219, -1, sizeof(::onebot::GroupRequestEvent)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onebot::_BaseEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onebot::_BaseMessageEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onebot::_BaseNoticeEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onebot::_BaseRequestEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onebot::_PrivateMessageEvent_Sender_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onebot::_PrivateMessageEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onebot::_GroupMessageEvent_Anonymous_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onebot::_GroupMessageEvent_Sender_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onebot::_GroupMessageEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onebot::_GroupUploadNoticeEvent_File_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onebot::_GroupUploadNoticeEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onebot::_GroupAdminNoticeEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onebot::_GroupDecreaseNoticeEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onebot::_GroupIncreaseNoticeEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onebot::_GroupBanNoticeEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onebot::_FriendAddNoticeEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onebot::_GroupRecallNoticeEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onebot::_FriendRecallNoticeEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onebot::_FriendRequestEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onebot::_GroupRequestEvent_default_instance_),
};

const char descriptor_table_protodef_onebot_5fevent_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022onebot_event.proto\022\006onebot\032\021onebot_bas"
  "e.proto\"=\n\tBaseEvent\022\014\n\004time\030\001 \001(\003\022\017\n\007se"
  "lf_id\030\002 \001(\003\022\021\n\tpost_type\030\003 \001(\t\"Z\n\020BaseMe"
  "ssageEvent\022\014\n\004time\030\001 \001(\003\022\017\n\007self_id\030\002 \001("
  "\003\022\021\n\tpost_type\030\003 \001(\t\022\024\n\014message_type\030\004 \001"
  "(\t\"X\n\017BaseNoticeEvent\022\014\n\004time\030\001 \001(\003\022\017\n\007s"
  "elf_id\030\002 \001(\003\022\021\n\tpost_type\030\003 \001(\t\022\023\n\013notic"
  "e_type\030\004 \001(\t\"Y\n\020BaseRequestEvent\022\014\n\004time"
  "\030\001 \001(\003\022\017\n\007self_id\030\002 \001(\003\022\021\n\tpost_type\030\003 \001"
  "(\t\022\023\n\013notice_type\030\004 \001(\t\"\324\002\n\023PrivateMessa"
  "geEvent\022\014\n\004time\030\001 \001(\003\022\017\n\007self_id\030\002 \001(\003\022\021"
  "\n\tpost_type\030\003 \001(\t\022\024\n\014message_type\030\004 \001(\t\022"
  "\020\n\010sub_type\030\005 \001(\t\022\022\n\nmessage_id\030\006 \001(\005\022\017\n"
  "\007user_id\030\007 \001(\003\022 \n\007message\030\010 \003(\0132\017.onebot"
  ".Message\022\023\n\013raw_message\030\t \001(\t\022\014\n\004font\030\n "
  "\001(\005\0222\n\006sender\030\013 \001(\0132\".onebot.PrivateMess"
  "ageEvent.Sender\032E\n\006Sender\022\017\n\007user_id\030\001 \001"
  "(\003\022\020\n\010nickname\030\002 \001(\t\022\013\n\003sex\030\003 \001(\t\022\013\n\003age"
  "\030\004 \001(\005\"\230\004\n\021GroupMessageEvent\022\014\n\004time\030\001 \001"
  "(\003\022\017\n\007self_id\030\002 \001(\003\022\021\n\tpost_type\030\003 \001(\t\022\024"
  "\n\014message_type\030\004 \001(\t\022\020\n\010sub_type\030\005 \001(\t\022\022"
  "\n\nmessage_id\030\006 \001(\005\022\020\n\010group_id\030\007 \001(\003\022\017\n\007"
  "user_id\030\010 \001(\003\0226\n\tanonymous\030\t \001(\0132#.onebo"
  "t.GroupMessageEvent.Anonymous\022 \n\007message"
  "\030\n \003(\0132\017.onebot.Message\022\023\n\013raw_message\030\013"
  " \001(\t\022\014\n\004font\030\014 \001(\005\0220\n\006sender\030\r \001(\0132 .one"
  "bot.GroupMessageEvent.Sender\0323\n\tAnonymou"
  "s\022\n\n\002id\030\001 \001(\003\022\014\n\004name\030\002 \001(\t\022\014\n\004flag\030\003 \001("
  "\t\032\215\001\n\006Sender\022\017\n\007user_id\030\001 \001(\003\022\020\n\010nicknam"
  "e\030\002 \001(\t\022\014\n\004card\030\003 \001(\t\022\013\n\003sex\030\004 \001(\t\022\013\n\003ag"
  "e\030\005 \001(\005\022\014\n\004area\030\006 \001(\t\022\r\n\005level\030\007 \001(\t\022\014\n\004"
  "role\030\010 \001(\t\022\r\n\005title\030\t \001(\t\"\364\001\n\026GroupUploa"
  "dNoticeEvent\022\014\n\004time\030\001 \001(\003\022\017\n\007self_id\030\002 "
  "\001(\003\022\021\n\tpost_type\030\003 \001(\t\022\023\n\013notice_type\030\004 "
  "\001(\t\022\020\n\010group_id\030\005 \001(\003\022\017\n\007user_id\030\006 \001(\003\0221"
  "\n\004file\030\007 \001(\0132#.onebot.GroupUploadNoticeE"
  "vent.File\032=\n\004File\022\n\n\002id\030\001 \001(\t\022\014\n\004name\030\002 "
  "\001(\t\022\014\n\004size\030\003 \001(\003\022\r\n\005busid\030\004 \001(\003\"\223\001\n\025Gro"
  "upAdminNoticeEvent\022\014\n\004time\030\001 \001(\003\022\017\n\007self"
  "_id\030\002 \001(\003\022\021\n\tpost_type\030\003 \001(\t\022\023\n\013notice_t"
  "ype\030\004 \001(\t\022\020\n\010sub_type\030\005 \001(\t\022\020\n\010group_id\030"
  "\006 \001(\003\022\017\n\007user_id\030\007 \001(\003\"\253\001\n\030GroupDecrease"
  "NoticeEvent\022\014\n\004time\030\001 \001(\003\022\017\n\007self_id\030\002 \001"
  "(\003\022\021\n\tpost_type\030\003 \001(\t\022\023\n\013notice_type\030\004 \001"
  "(\t\022\020\n\010sub_type\030\005 \001(\t\022\020\n\010group_id\030\006 \001(\003\022\023"
  "\n\013operator_id\030\007 \001(\003\022\017\n\007user_id\030\010 \001(\003\"\253\001\n"
  "\030GroupIncreaseNoticeEvent\022\014\n\004time\030\001 \001(\003\022"
  "\017\n\007self_id\030\002 \001(\003\022\021\n\tpost_type\030\003 \001(\t\022\023\n\013n"
  "otice_type\030\004 \001(\t\022\020\n\010sub_type\030\005 \001(\t\022\020\n\010gr"
  "oup_id\030\006 \001(\003\022\023\n\013operator_id\030\007 \001(\003\022\017\n\007use"
  "r_id\030\010 \001(\003\"\270\001\n\023GroupBanNoticeEvent\022\014\n\004ti"
  "me\030\001 \001(\003\022\017\n\007self_id\030\002 \001(\003\022\021\n\tpost_type\030\003"
  " \001(\t\022\023\n\013notice_type\030\004 \001(\t\022\020\n\010sub_type\030\005 "
  "\001(\t\022\020\n\010group_id\030\006 \001(\003\022\023\n\013operator_id\030\007 \001"
  "(\003\022\017\n\007user_id\030\010 \001(\003\022\020\n\010duration\030\t \001(\003\"n\n"
  "\024FriendAddNoticeEvent\022\014\n\004time\030\001 \001(\003\022\017\n\007s"
  "elf_id\030\002 \001(\003\022\021\n\tpost_type\030\003 \001(\t\022\023\n\013notic"
  "e_type\030\004 \001(\t\022\017\n\007user_id\030\005 \001(\003\"\253\001\n\026GroupR"
  "ecallNoticeEvent\022\014\n\004time\030\001 \001(\003\022\017\n\007self_i"
  "d\030\002 \001(\003\022\021\n\tpost_type\030\003 \001(\t\022\023\n\013notice_typ"
  "e\030\004 \001(\t\022\020\n\010group_id\030\005 \001(\003\022\017\n\007user_id\030\006 \001"
  "(\003\022\023\n\013operator_id\030\007 \001(\003\022\022\n\nmessage_id\030\010 "
  "\001(\003\"\205\001\n\027FriendRecallNoticeEvent\022\014\n\004time\030"
  "\001 \001(\003\022\017\n\007self_id\030\002 \001(\003\022\021\n\tpost_type\030\003 \001("
  "\t\022\023\n\013notice_type\030\004 \001(\t\022\017\n\007user_id\030\005 \001(\003\022"
  "\022\n\nmessage_id\030\006 \001(\003\"\214\001\n\022FriendRequestEve"
  "nt\022\014\n\004time\030\001 \001(\003\022\017\n\007self_id\030\002 \001(\003\022\021\n\tpos"
  "t_type\030\003 \001(\t\022\024\n\014request_type\030\004 \001(\t\022\017\n\007us"
  "er_id\030\005 \001(\003\022\017\n\007comment\030\006 \001(\t\022\014\n\004flag\030\007 \001"
  "(\t\"\257\001\n\021GroupRequestEvent\022\014\n\004time\030\001 \001(\003\022\017"
  "\n\007self_id\030\002 \001(\003\022\021\n\tpost_type\030\003 \001(\t\022\024\n\014re"
  "quest_type\030\004 \001(\t\022\020\n\010sub_type\030\005 \001(\t\022\020\n\010gr"
  "oup_id\030\006 \001(\003\022\017\n\007user_id\030\007 \001(\003\022\017\n\007comment"
  "\030\010 \001(\t\022\014\n\004flag\030\t \001(\tb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_onebot_5fevent_2eproto_deps[1] = {
  &::descriptor_table_onebot_5fbase_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_onebot_5fevent_2eproto_sccs[20] = {
  &scc_info_BaseEvent_onebot_5fevent_2eproto.base,
  &scc_info_BaseMessageEvent_onebot_5fevent_2eproto.base,
  &scc_info_BaseNoticeEvent_onebot_5fevent_2eproto.base,
  &scc_info_BaseRequestEvent_onebot_5fevent_2eproto.base,
  &scc_info_FriendAddNoticeEvent_onebot_5fevent_2eproto.base,
  &scc_info_FriendRecallNoticeEvent_onebot_5fevent_2eproto.base,
  &scc_info_FriendRequestEvent_onebot_5fevent_2eproto.base,
  &scc_info_GroupAdminNoticeEvent_onebot_5fevent_2eproto.base,
  &scc_info_GroupBanNoticeEvent_onebot_5fevent_2eproto.base,
  &scc_info_GroupDecreaseNoticeEvent_onebot_5fevent_2eproto.base,
  &scc_info_GroupIncreaseNoticeEvent_onebot_5fevent_2eproto.base,
  &scc_info_GroupMessageEvent_onebot_5fevent_2eproto.base,
  &scc_info_GroupMessageEvent_Anonymous_onebot_5fevent_2eproto.base,
  &scc_info_GroupMessageEvent_Sender_onebot_5fevent_2eproto.base,
  &scc_info_GroupRecallNoticeEvent_onebot_5fevent_2eproto.base,
  &scc_info_GroupRequestEvent_onebot_5fevent_2eproto.base,
  &scc_info_GroupUploadNoticeEvent_onebot_5fevent_2eproto.base,
  &scc_info_GroupUploadNoticeEvent_File_onebot_5fevent_2eproto.base,
  &scc_info_PrivateMessageEvent_onebot_5fevent_2eproto.base,
  &scc_info_PrivateMessageEvent_Sender_onebot_5fevent_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_onebot_5fevent_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_onebot_5fevent_2eproto = {
  false, false, descriptor_table_protodef_onebot_5fevent_2eproto, "onebot_event.proto", 2948,
  &descriptor_table_onebot_5fevent_2eproto_once, descriptor_table_onebot_5fevent_2eproto_sccs, descriptor_table_onebot_5fevent_2eproto_deps, 20, 1,
  schemas, file_default_instances, TableStruct_onebot_5fevent_2eproto::offsets,
  file_level_metadata_onebot_5fevent_2eproto, 20, file_level_enum_descriptors_onebot_5fevent_2eproto, file_level_service_descriptors_onebot_5fevent_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_onebot_5fevent_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_onebot_5fevent_2eproto)), true);
namespace onebot {

// ===================================================================

void BaseEvent::InitAsDefaultInstance() {
}
class BaseEvent::_Internal {
 public:
};

BaseEvent::BaseEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:onebot.BaseEvent)
}
BaseEvent::BaseEvent(const BaseEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  post_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_post_type().empty()) {
    post_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_post_type(),
      GetArena());
  }
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&self_id_) -
    reinterpret_cast<char*>(&time_)) + sizeof(self_id_));
  // @@protoc_insertion_point(copy_constructor:onebot.BaseEvent)
}

void BaseEvent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BaseEvent_onebot_5fevent_2eproto.base);
  post_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&self_id_) -
      reinterpret_cast<char*>(&time_)) + sizeof(self_id_));
}

BaseEvent::~BaseEvent() {
  // @@protoc_insertion_point(destructor:onebot.BaseEvent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BaseEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  post_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BaseEvent::ArenaDtor(void* object) {
  BaseEvent* _this = reinterpret_cast< BaseEvent* >(object);
  (void)_this;
}
void BaseEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BaseEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BaseEvent& BaseEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BaseEvent_onebot_5fevent_2eproto.base);
  return *internal_default_instance();
}


void BaseEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:onebot.BaseEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  post_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&self_id_) -
      reinterpret_cast<char*>(&time_)) + sizeof(self_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BaseEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 self_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          self_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string post_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_post_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onebot.BaseEvent.post_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BaseEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onebot.BaseEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 time = 1;
  if (this->time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_time(), target);
  }

  // int64 self_id = 2;
  if (this->self_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_self_id(), target);
  }

  // string post_type = 3;
  if (this->post_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_post_type().data(), static_cast<int>(this->_internal_post_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onebot.BaseEvent.post_type");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_post_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onebot.BaseEvent)
  return target;
}

size_t BaseEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onebot.BaseEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string post_type = 3;
  if (this->post_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_post_type());
  }

  // int64 time = 1;
  if (this->time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_time());
  }

  // int64 self_id = 2;
  if (this->self_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_self_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BaseEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:onebot.BaseEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const BaseEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BaseEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:onebot.BaseEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:onebot.BaseEvent)
    MergeFrom(*source);
  }
}

void BaseEvent::MergeFrom(const BaseEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onebot.BaseEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.post_type().size() > 0) {
    _internal_set_post_type(from._internal_post_type());
  }
  if (from.time() != 0) {
    _internal_set_time(from._internal_time());
  }
  if (from.self_id() != 0) {
    _internal_set_self_id(from._internal_self_id());
  }
}

void BaseEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:onebot.BaseEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BaseEvent::CopyFrom(const BaseEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onebot.BaseEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BaseEvent::IsInitialized() const {
  return true;
}

void BaseEvent::InternalSwap(BaseEvent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  post_type_.Swap(&other->post_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BaseEvent, self_id_)
      + sizeof(BaseEvent::self_id_)
      - PROTOBUF_FIELD_OFFSET(BaseEvent, time_)>(
          reinterpret_cast<char*>(&time_),
          reinterpret_cast<char*>(&other->time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BaseEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BaseMessageEvent::InitAsDefaultInstance() {
}
class BaseMessageEvent::_Internal {
 public:
};

BaseMessageEvent::BaseMessageEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:onebot.BaseMessageEvent)
}
BaseMessageEvent::BaseMessageEvent(const BaseMessageEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  post_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_post_type().empty()) {
    post_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_post_type(),
      GetArena());
  }
  message_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message_type().empty()) {
    message_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_message_type(),
      GetArena());
  }
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&self_id_) -
    reinterpret_cast<char*>(&time_)) + sizeof(self_id_));
  // @@protoc_insertion_point(copy_constructor:onebot.BaseMessageEvent)
}

void BaseMessageEvent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BaseMessageEvent_onebot_5fevent_2eproto.base);
  post_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&self_id_) -
      reinterpret_cast<char*>(&time_)) + sizeof(self_id_));
}

BaseMessageEvent::~BaseMessageEvent() {
  // @@protoc_insertion_point(destructor:onebot.BaseMessageEvent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BaseMessageEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  post_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BaseMessageEvent::ArenaDtor(void* object) {
  BaseMessageEvent* _this = reinterpret_cast< BaseMessageEvent* >(object);
  (void)_this;
}
void BaseMessageEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BaseMessageEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BaseMessageEvent& BaseMessageEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BaseMessageEvent_onebot_5fevent_2eproto.base);
  return *internal_default_instance();
}


void BaseMessageEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:onebot.BaseMessageEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  post_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  message_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&self_id_) -
      reinterpret_cast<char*>(&time_)) + sizeof(self_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BaseMessageEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 self_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          self_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string post_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_post_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onebot.BaseMessageEvent.post_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string message_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_message_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onebot.BaseMessageEvent.message_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BaseMessageEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onebot.BaseMessageEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 time = 1;
  if (this->time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_time(), target);
  }

  // int64 self_id = 2;
  if (this->self_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_self_id(), target);
  }

  // string post_type = 3;
  if (this->post_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_post_type().data(), static_cast<int>(this->_internal_post_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onebot.BaseMessageEvent.post_type");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_post_type(), target);
  }

  // string message_type = 4;
  if (this->message_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message_type().data(), static_cast<int>(this->_internal_message_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onebot.BaseMessageEvent.message_type");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_message_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onebot.BaseMessageEvent)
  return target;
}

size_t BaseMessageEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onebot.BaseMessageEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string post_type = 3;
  if (this->post_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_post_type());
  }

  // string message_type = 4;
  if (this->message_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message_type());
  }

  // int64 time = 1;
  if (this->time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_time());
  }

  // int64 self_id = 2;
  if (this->self_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_self_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BaseMessageEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:onebot.BaseMessageEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const BaseMessageEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BaseMessageEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:onebot.BaseMessageEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:onebot.BaseMessageEvent)
    MergeFrom(*source);
  }
}

void BaseMessageEvent::MergeFrom(const BaseMessageEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onebot.BaseMessageEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.post_type().size() > 0) {
    _internal_set_post_type(from._internal_post_type());
  }
  if (from.message_type().size() > 0) {
    _internal_set_message_type(from._internal_message_type());
  }
  if (from.time() != 0) {
    _internal_set_time(from._internal_time());
  }
  if (from.self_id() != 0) {
    _internal_set_self_id(from._internal_self_id());
  }
}

void BaseMessageEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:onebot.BaseMessageEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BaseMessageEvent::CopyFrom(const BaseMessageEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onebot.BaseMessageEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BaseMessageEvent::IsInitialized() const {
  return true;
}

void BaseMessageEvent::InternalSwap(BaseMessageEvent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  post_type_.Swap(&other->post_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  message_type_.Swap(&other->message_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BaseMessageEvent, self_id_)
      + sizeof(BaseMessageEvent::self_id_)
      - PROTOBUF_FIELD_OFFSET(BaseMessageEvent, time_)>(
          reinterpret_cast<char*>(&time_),
          reinterpret_cast<char*>(&other->time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BaseMessageEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BaseNoticeEvent::InitAsDefaultInstance() {
}
class BaseNoticeEvent::_Internal {
 public:
};

BaseNoticeEvent::BaseNoticeEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:onebot.BaseNoticeEvent)
}
BaseNoticeEvent::BaseNoticeEvent(const BaseNoticeEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  post_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_post_type().empty()) {
    post_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_post_type(),
      GetArena());
  }
  notice_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_notice_type().empty()) {
    notice_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_notice_type(),
      GetArena());
  }
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&self_id_) -
    reinterpret_cast<char*>(&time_)) + sizeof(self_id_));
  // @@protoc_insertion_point(copy_constructor:onebot.BaseNoticeEvent)
}

void BaseNoticeEvent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BaseNoticeEvent_onebot_5fevent_2eproto.base);
  post_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  notice_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&self_id_) -
      reinterpret_cast<char*>(&time_)) + sizeof(self_id_));
}

BaseNoticeEvent::~BaseNoticeEvent() {
  // @@protoc_insertion_point(destructor:onebot.BaseNoticeEvent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BaseNoticeEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  post_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  notice_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BaseNoticeEvent::ArenaDtor(void* object) {
  BaseNoticeEvent* _this = reinterpret_cast< BaseNoticeEvent* >(object);
  (void)_this;
}
void BaseNoticeEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BaseNoticeEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BaseNoticeEvent& BaseNoticeEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BaseNoticeEvent_onebot_5fevent_2eproto.base);
  return *internal_default_instance();
}


void BaseNoticeEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:onebot.BaseNoticeEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  post_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  notice_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&self_id_) -
      reinterpret_cast<char*>(&time_)) + sizeof(self_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BaseNoticeEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 self_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          self_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string post_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_post_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onebot.BaseNoticeEvent.post_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string notice_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_notice_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onebot.BaseNoticeEvent.notice_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BaseNoticeEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onebot.BaseNoticeEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 time = 1;
  if (this->time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_time(), target);
  }

  // int64 self_id = 2;
  if (this->self_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_self_id(), target);
  }

  // string post_type = 3;
  if (this->post_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_post_type().data(), static_cast<int>(this->_internal_post_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onebot.BaseNoticeEvent.post_type");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_post_type(), target);
  }

  // string notice_type = 4;
  if (this->notice_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_notice_type().data(), static_cast<int>(this->_internal_notice_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onebot.BaseNoticeEvent.notice_type");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_notice_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onebot.BaseNoticeEvent)
  return target;
}

size_t BaseNoticeEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onebot.BaseNoticeEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string post_type = 3;
  if (this->post_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_post_type());
  }

  // string notice_type = 4;
  if (this->notice_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_notice_type());
  }

  // int64 time = 1;
  if (this->time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_time());
  }

  // int64 self_id = 2;
  if (this->self_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_self_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BaseNoticeEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:onebot.BaseNoticeEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const BaseNoticeEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BaseNoticeEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:onebot.BaseNoticeEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:onebot.BaseNoticeEvent)
    MergeFrom(*source);
  }
}

void BaseNoticeEvent::MergeFrom(const BaseNoticeEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onebot.BaseNoticeEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.post_type().size() > 0) {
    _internal_set_post_type(from._internal_post_type());
  }
  if (from.notice_type().size() > 0) {
    _internal_set_notice_type(from._internal_notice_type());
  }
  if (from.time() != 0) {
    _internal_set_time(from._internal_time());
  }
  if (from.self_id() != 0) {
    _internal_set_self_id(from._internal_self_id());
  }
}

void BaseNoticeEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:onebot.BaseNoticeEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BaseNoticeEvent::CopyFrom(const BaseNoticeEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onebot.BaseNoticeEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BaseNoticeEvent::IsInitialized() const {
  return true;
}

void BaseNoticeEvent::InternalSwap(BaseNoticeEvent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  post_type_.Swap(&other->post_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  notice_type_.Swap(&other->notice_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BaseNoticeEvent, self_id_)
      + sizeof(BaseNoticeEvent::self_id_)
      - PROTOBUF_FIELD_OFFSET(BaseNoticeEvent, time_)>(
          reinterpret_cast<char*>(&time_),
          reinterpret_cast<char*>(&other->time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BaseNoticeEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BaseRequestEvent::InitAsDefaultInstance() {
}
class BaseRequestEvent::_Internal {
 public:
};

BaseRequestEvent::BaseRequestEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:onebot.BaseRequestEvent)
}
BaseRequestEvent::BaseRequestEvent(const BaseRequestEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  post_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_post_type().empty()) {
    post_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_post_type(),
      GetArena());
  }
  notice_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_notice_type().empty()) {
    notice_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_notice_type(),
      GetArena());
  }
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&self_id_) -
    reinterpret_cast<char*>(&time_)) + sizeof(self_id_));
  // @@protoc_insertion_point(copy_constructor:onebot.BaseRequestEvent)
}

void BaseRequestEvent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BaseRequestEvent_onebot_5fevent_2eproto.base);
  post_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  notice_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&self_id_) -
      reinterpret_cast<char*>(&time_)) + sizeof(self_id_));
}

BaseRequestEvent::~BaseRequestEvent() {
  // @@protoc_insertion_point(destructor:onebot.BaseRequestEvent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BaseRequestEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  post_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  notice_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BaseRequestEvent::ArenaDtor(void* object) {
  BaseRequestEvent* _this = reinterpret_cast< BaseRequestEvent* >(object);
  (void)_this;
}
void BaseRequestEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BaseRequestEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BaseRequestEvent& BaseRequestEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BaseRequestEvent_onebot_5fevent_2eproto.base);
  return *internal_default_instance();
}


void BaseRequestEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:onebot.BaseRequestEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  post_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  notice_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&self_id_) -
      reinterpret_cast<char*>(&time_)) + sizeof(self_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BaseRequestEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 self_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          self_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string post_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_post_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onebot.BaseRequestEvent.post_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string notice_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_notice_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onebot.BaseRequestEvent.notice_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BaseRequestEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onebot.BaseRequestEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 time = 1;
  if (this->time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_time(), target);
  }

  // int64 self_id = 2;
  if (this->self_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_self_id(), target);
  }

  // string post_type = 3;
  if (this->post_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_post_type().data(), static_cast<int>(this->_internal_post_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onebot.BaseRequestEvent.post_type");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_post_type(), target);
  }

  // string notice_type = 4;
  if (this->notice_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_notice_type().data(), static_cast<int>(this->_internal_notice_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onebot.BaseRequestEvent.notice_type");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_notice_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onebot.BaseRequestEvent)
  return target;
}

size_t BaseRequestEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onebot.BaseRequestEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string post_type = 3;
  if (this->post_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_post_type());
  }

  // string notice_type = 4;
  if (this->notice_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_notice_type());
  }

  // int64 time = 1;
  if (this->time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_time());
  }

  // int64 self_id = 2;
  if (this->self_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_self_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BaseRequestEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:onebot.BaseRequestEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const BaseRequestEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BaseRequestEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:onebot.BaseRequestEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:onebot.BaseRequestEvent)
    MergeFrom(*source);
  }
}

void BaseRequestEvent::MergeFrom(const BaseRequestEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onebot.BaseRequestEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.post_type().size() > 0) {
    _internal_set_post_type(from._internal_post_type());
  }
  if (from.notice_type().size() > 0) {
    _internal_set_notice_type(from._internal_notice_type());
  }
  if (from.time() != 0) {
    _internal_set_time(from._internal_time());
  }
  if (from.self_id() != 0) {
    _internal_set_self_id(from._internal_self_id());
  }
}

void BaseRequestEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:onebot.BaseRequestEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BaseRequestEvent::CopyFrom(const BaseRequestEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onebot.BaseRequestEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BaseRequestEvent::IsInitialized() const {
  return true;
}

void BaseRequestEvent::InternalSwap(BaseRequestEvent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  post_type_.Swap(&other->post_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  notice_type_.Swap(&other->notice_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BaseRequestEvent, self_id_)
      + sizeof(BaseRequestEvent::self_id_)
      - PROTOBUF_FIELD_OFFSET(BaseRequestEvent, time_)>(
          reinterpret_cast<char*>(&time_),
          reinterpret_cast<char*>(&other->time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BaseRequestEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PrivateMessageEvent_Sender::InitAsDefaultInstance() {
}
class PrivateMessageEvent_Sender::_Internal {
 public:
};

PrivateMessageEvent_Sender::PrivateMessageEvent_Sender(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:onebot.PrivateMessageEvent.Sender)
}
PrivateMessageEvent_Sender::PrivateMessageEvent_Sender(const PrivateMessageEvent_Sender& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  nickname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nickname().empty()) {
    nickname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_nickname(),
      GetArena());
  }
  sex_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sex().empty()) {
    sex_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_sex(),
      GetArena());
  }
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&age_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(age_));
  // @@protoc_insertion_point(copy_constructor:onebot.PrivateMessageEvent.Sender)
}

void PrivateMessageEvent_Sender::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PrivateMessageEvent_Sender_onebot_5fevent_2eproto.base);
  nickname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sex_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&age_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(age_));
}

PrivateMessageEvent_Sender::~PrivateMessageEvent_Sender() {
  // @@protoc_insertion_point(destructor:onebot.PrivateMessageEvent.Sender)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PrivateMessageEvent_Sender::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  nickname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sex_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PrivateMessageEvent_Sender::ArenaDtor(void* object) {
  PrivateMessageEvent_Sender* _this = reinterpret_cast< PrivateMessageEvent_Sender* >(object);
  (void)_this;
}
void PrivateMessageEvent_Sender::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PrivateMessageEvent_Sender::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PrivateMessageEvent_Sender& PrivateMessageEvent_Sender::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PrivateMessageEvent_Sender_onebot_5fevent_2eproto.base);
  return *internal_default_instance();
}


void PrivateMessageEvent_Sender::Clear() {
// @@protoc_insertion_point(message_clear_start:onebot.PrivateMessageEvent.Sender)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nickname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sex_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&age_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(age_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PrivateMessageEvent_Sender::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string nickname = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_nickname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onebot.PrivateMessageEvent.Sender.nickname"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sex = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_sex();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onebot.PrivateMessageEvent.Sender.sex"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 age = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          age_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PrivateMessageEvent_Sender::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onebot.PrivateMessageEvent.Sender)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 user_id = 1;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_user_id(), target);
  }

  // string nickname = 2;
  if (this->nickname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nickname().data(), static_cast<int>(this->_internal_nickname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onebot.PrivateMessageEvent.Sender.nickname");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_nickname(), target);
  }

  // string sex = 3;
  if (this->sex().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sex().data(), static_cast<int>(this->_internal_sex().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onebot.PrivateMessageEvent.Sender.sex");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_sex(), target);
  }

  // int32 age = 4;
  if (this->age() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_age(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onebot.PrivateMessageEvent.Sender)
  return target;
}

size_t PrivateMessageEvent_Sender::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onebot.PrivateMessageEvent.Sender)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string nickname = 2;
  if (this->nickname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nickname());
  }

  // string sex = 3;
  if (this->sex().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sex());
  }

  // int64 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_user_id());
  }

  // int32 age = 4;
  if (this->age() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_age());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PrivateMessageEvent_Sender::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:onebot.PrivateMessageEvent.Sender)
  GOOGLE_DCHECK_NE(&from, this);
  const PrivateMessageEvent_Sender* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PrivateMessageEvent_Sender>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:onebot.PrivateMessageEvent.Sender)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:onebot.PrivateMessageEvent.Sender)
    MergeFrom(*source);
  }
}

void PrivateMessageEvent_Sender::MergeFrom(const PrivateMessageEvent_Sender& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onebot.PrivateMessageEvent.Sender)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.nickname().size() > 0) {
    _internal_set_nickname(from._internal_nickname());
  }
  if (from.sex().size() > 0) {
    _internal_set_sex(from._internal_sex());
  }
  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.age() != 0) {
    _internal_set_age(from._internal_age());
  }
}

void PrivateMessageEvent_Sender::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:onebot.PrivateMessageEvent.Sender)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrivateMessageEvent_Sender::CopyFrom(const PrivateMessageEvent_Sender& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onebot.PrivateMessageEvent.Sender)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrivateMessageEvent_Sender::IsInitialized() const {
  return true;
}

void PrivateMessageEvent_Sender::InternalSwap(PrivateMessageEvent_Sender* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  nickname_.Swap(&other->nickname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sex_.Swap(&other->sex_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PrivateMessageEvent_Sender, age_)
      + sizeof(PrivateMessageEvent_Sender::age_)
      - PROTOBUF_FIELD_OFFSET(PrivateMessageEvent_Sender, user_id_)>(
          reinterpret_cast<char*>(&user_id_),
          reinterpret_cast<char*>(&other->user_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PrivateMessageEvent_Sender::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PrivateMessageEvent::InitAsDefaultInstance() {
  ::onebot::_PrivateMessageEvent_default_instance_._instance.get_mutable()->sender_ = const_cast< ::onebot::PrivateMessageEvent_Sender*>(
      ::onebot::PrivateMessageEvent_Sender::internal_default_instance());
}
class PrivateMessageEvent::_Internal {
 public:
  static const ::onebot::PrivateMessageEvent_Sender& sender(const PrivateMessageEvent* msg);
};

const ::onebot::PrivateMessageEvent_Sender&
PrivateMessageEvent::_Internal::sender(const PrivateMessageEvent* msg) {
  return *msg->sender_;
}
void PrivateMessageEvent::clear_message() {
  message_.Clear();
}
PrivateMessageEvent::PrivateMessageEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  message_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:onebot.PrivateMessageEvent)
}
PrivateMessageEvent::PrivateMessageEvent(const PrivateMessageEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      message_(from.message_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  post_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_post_type().empty()) {
    post_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_post_type(),
      GetArena());
  }
  message_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message_type().empty()) {
    message_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_message_type(),
      GetArena());
  }
  sub_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sub_type().empty()) {
    sub_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_sub_type(),
      GetArena());
  }
  raw_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_raw_message().empty()) {
    raw_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_raw_message(),
      GetArena());
  }
  if (from._internal_has_sender()) {
    sender_ = new ::onebot::PrivateMessageEvent_Sender(*from.sender_);
  } else {
    sender_ = nullptr;
  }
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&font_) -
    reinterpret_cast<char*>(&time_)) + sizeof(font_));
  // @@protoc_insertion_point(copy_constructor:onebot.PrivateMessageEvent)
}

void PrivateMessageEvent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PrivateMessageEvent_onebot_5fevent_2eproto.base);
  post_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sub_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  raw_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&sender_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&font_) -
      reinterpret_cast<char*>(&sender_)) + sizeof(font_));
}

PrivateMessageEvent::~PrivateMessageEvent() {
  // @@protoc_insertion_point(destructor:onebot.PrivateMessageEvent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PrivateMessageEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  post_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sub_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  raw_message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete sender_;
}

void PrivateMessageEvent::ArenaDtor(void* object) {
  PrivateMessageEvent* _this = reinterpret_cast< PrivateMessageEvent* >(object);
  (void)_this;
}
void PrivateMessageEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PrivateMessageEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PrivateMessageEvent& PrivateMessageEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PrivateMessageEvent_onebot_5fevent_2eproto.base);
  return *internal_default_instance();
}


void PrivateMessageEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:onebot.PrivateMessageEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.Clear();
  post_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  message_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sub_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  raw_message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && sender_ != nullptr) {
    delete sender_;
  }
  sender_ = nullptr;
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&font_) -
      reinterpret_cast<char*>(&time_)) + sizeof(font_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PrivateMessageEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 self_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          self_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string post_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_post_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onebot.PrivateMessageEvent.post_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string message_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_message_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onebot.PrivateMessageEvent.message_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sub_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_sub_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onebot.PrivateMessageEvent.sub_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 message_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          message_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 user_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .onebot.Message message = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_message(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // string raw_message = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_raw_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onebot.PrivateMessageEvent.raw_message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 font = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          font_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .onebot.PrivateMessageEvent.Sender sender = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_sender(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PrivateMessageEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onebot.PrivateMessageEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 time = 1;
  if (this->time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_time(), target);
  }

  // int64 self_id = 2;
  if (this->self_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_self_id(), target);
  }

  // string post_type = 3;
  if (this->post_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_post_type().data(), static_cast<int>(this->_internal_post_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onebot.PrivateMessageEvent.post_type");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_post_type(), target);
  }

  // string message_type = 4;
  if (this->message_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message_type().data(), static_cast<int>(this->_internal_message_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onebot.PrivateMessageEvent.message_type");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_message_type(), target);
  }

  // string sub_type = 5;
  if (this->sub_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sub_type().data(), static_cast<int>(this->_internal_sub_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onebot.PrivateMessageEvent.sub_type");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_sub_type(), target);
  }

  // int32 message_id = 6;
  if (this->message_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_message_id(), target);
  }

  // int64 user_id = 7;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_user_id(), target);
  }

  // repeated .onebot.Message message = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_message_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_message(i), target, stream);
  }

  // string raw_message = 9;
  if (this->raw_message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_raw_message().data(), static_cast<int>(this->_internal_raw_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onebot.PrivateMessageEvent.raw_message");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_raw_message(), target);
  }

  // int32 font = 10;
  if (this->font() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_font(), target);
  }

  // .onebot.PrivateMessageEvent.Sender sender = 11;
  if (this->has_sender()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::sender(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onebot.PrivateMessageEvent)
  return target;
}

size_t PrivateMessageEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onebot.PrivateMessageEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .onebot.Message message = 8;
  total_size += 1UL * this->_internal_message_size();
  for (const auto& msg : this->message_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string post_type = 3;
  if (this->post_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_post_type());
  }

  // string message_type = 4;
  if (this->message_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message_type());
  }

  // string sub_type = 5;
  if (this->sub_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sub_type());
  }

  // string raw_message = 9;
  if (this->raw_message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_raw_message());
  }

  // .onebot.PrivateMessageEvent.Sender sender = 11;
  if (this->has_sender()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sender_);
  }

  // int64 time = 1;
  if (this->time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_time());
  }

  // int64 self_id = 2;
  if (this->self_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_self_id());
  }

  // int64 user_id = 7;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_user_id());
  }

  // int32 message_id = 6;
  if (this->message_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_message_id());
  }

  // int32 font = 10;
  if (this->font() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_font());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PrivateMessageEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:onebot.PrivateMessageEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const PrivateMessageEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PrivateMessageEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:onebot.PrivateMessageEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:onebot.PrivateMessageEvent)
    MergeFrom(*source);
  }
}

void PrivateMessageEvent::MergeFrom(const PrivateMessageEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onebot.PrivateMessageEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  message_.MergeFrom(from.message_);
  if (from.post_type().size() > 0) {
    _internal_set_post_type(from._internal_post_type());
  }
  if (from.message_type().size() > 0) {
    _internal_set_message_type(from._internal_message_type());
  }
  if (from.sub_type().size() > 0) {
    _internal_set_sub_type(from._internal_sub_type());
  }
  if (from.raw_message().size() > 0) {
    _internal_set_raw_message(from._internal_raw_message());
  }
  if (from.has_sender()) {
    _internal_mutable_sender()->::onebot::PrivateMessageEvent_Sender::MergeFrom(from._internal_sender());
  }
  if (from.time() != 0) {
    _internal_set_time(from._internal_time());
  }
  if (from.self_id() != 0) {
    _internal_set_self_id(from._internal_self_id());
  }
  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.message_id() != 0) {
    _internal_set_message_id(from._internal_message_id());
  }
  if (from.font() != 0) {
    _internal_set_font(from._internal_font());
  }
}

void PrivateMessageEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:onebot.PrivateMessageEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrivateMessageEvent::CopyFrom(const PrivateMessageEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onebot.PrivateMessageEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrivateMessageEvent::IsInitialized() const {
  return true;
}

void PrivateMessageEvent::InternalSwap(PrivateMessageEvent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  message_.InternalSwap(&other->message_);
  post_type_.Swap(&other->post_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  message_type_.Swap(&other->message_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sub_type_.Swap(&other->sub_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  raw_message_.Swap(&other->raw_message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PrivateMessageEvent, font_)
      + sizeof(PrivateMessageEvent::font_)
      - PROTOBUF_FIELD_OFFSET(PrivateMessageEvent, sender_)>(
          reinterpret_cast<char*>(&sender_),
          reinterpret_cast<char*>(&other->sender_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PrivateMessageEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GroupMessageEvent_Anonymous::InitAsDefaultInstance() {
}
class GroupMessageEvent_Anonymous::_Internal {
 public:
};

GroupMessageEvent_Anonymous::GroupMessageEvent_Anonymous(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:onebot.GroupMessageEvent.Anonymous)
}
GroupMessageEvent_Anonymous::GroupMessageEvent_Anonymous(const GroupMessageEvent_Anonymous& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  flag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_flag().empty()) {
    flag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_flag(),
      GetArena());
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:onebot.GroupMessageEvent.Anonymous)
}

void GroupMessageEvent_Anonymous::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GroupMessageEvent_Anonymous_onebot_5fevent_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  flag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_ = PROTOBUF_LONGLONG(0);
}

GroupMessageEvent_Anonymous::~GroupMessageEvent_Anonymous() {
  // @@protoc_insertion_point(destructor:onebot.GroupMessageEvent.Anonymous)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GroupMessageEvent_Anonymous::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  flag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GroupMessageEvent_Anonymous::ArenaDtor(void* object) {
  GroupMessageEvent_Anonymous* _this = reinterpret_cast< GroupMessageEvent_Anonymous* >(object);
  (void)_this;
}
void GroupMessageEvent_Anonymous::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GroupMessageEvent_Anonymous::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GroupMessageEvent_Anonymous& GroupMessageEvent_Anonymous::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GroupMessageEvent_Anonymous_onebot_5fevent_2eproto.base);
  return *internal_default_instance();
}


void GroupMessageEvent_Anonymous::Clear() {
// @@protoc_insertion_point(message_clear_start:onebot.GroupMessageEvent.Anonymous)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  flag_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  id_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GroupMessageEvent_Anonymous::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onebot.GroupMessageEvent.Anonymous.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string flag = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_flag();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onebot.GroupMessageEvent.Anonymous.flag"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GroupMessageEvent_Anonymous::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onebot.GroupMessageEvent.Anonymous)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onebot.GroupMessageEvent.Anonymous.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // string flag = 3;
  if (this->flag().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_flag().data(), static_cast<int>(this->_internal_flag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onebot.GroupMessageEvent.Anonymous.flag");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_flag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onebot.GroupMessageEvent.Anonymous)
  return target;
}

size_t GroupMessageEvent_Anonymous::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onebot.GroupMessageEvent.Anonymous)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string flag = 3;
  if (this->flag().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_flag());
  }

  // int64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GroupMessageEvent_Anonymous::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:onebot.GroupMessageEvent.Anonymous)
  GOOGLE_DCHECK_NE(&from, this);
  const GroupMessageEvent_Anonymous* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GroupMessageEvent_Anonymous>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:onebot.GroupMessageEvent.Anonymous)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:onebot.GroupMessageEvent.Anonymous)
    MergeFrom(*source);
  }
}

void GroupMessageEvent_Anonymous::MergeFrom(const GroupMessageEvent_Anonymous& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onebot.GroupMessageEvent.Anonymous)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.flag().size() > 0) {
    _internal_set_flag(from._internal_flag());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void GroupMessageEvent_Anonymous::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:onebot.GroupMessageEvent.Anonymous)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupMessageEvent_Anonymous::CopyFrom(const GroupMessageEvent_Anonymous& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onebot.GroupMessageEvent.Anonymous)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupMessageEvent_Anonymous::IsInitialized() const {
  return true;
}

void GroupMessageEvent_Anonymous::InternalSwap(GroupMessageEvent_Anonymous* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  flag_.Swap(&other->flag_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GroupMessageEvent_Anonymous::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GroupMessageEvent_Sender::InitAsDefaultInstance() {
}
class GroupMessageEvent_Sender::_Internal {
 public:
};

GroupMessageEvent_Sender::GroupMessageEvent_Sender(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:onebot.GroupMessageEvent.Sender)
}
GroupMessageEvent_Sender::GroupMessageEvent_Sender(const GroupMessageEvent_Sender& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  nickname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nickname().empty()) {
    nickname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_nickname(),
      GetArena());
  }
  card_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_card().empty()) {
    card_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_card(),
      GetArena());
  }
  sex_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sex().empty()) {
    sex_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_sex(),
      GetArena());
  }
  area_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_area().empty()) {
    area_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_area(),
      GetArena());
  }
  level_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_level().empty()) {
    level_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_level(),
      GetArena());
  }
  role_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_role().empty()) {
    role_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_role(),
      GetArena());
  }
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_title().empty()) {
    title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_title(),
      GetArena());
  }
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&age_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(age_));
  // @@protoc_insertion_point(copy_constructor:onebot.GroupMessageEvent.Sender)
}

void GroupMessageEvent_Sender::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GroupMessageEvent_Sender_onebot_5fevent_2eproto.base);
  nickname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  card_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sex_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  area_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  level_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  role_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&age_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(age_));
}

GroupMessageEvent_Sender::~GroupMessageEvent_Sender() {
  // @@protoc_insertion_point(destructor:onebot.GroupMessageEvent.Sender)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GroupMessageEvent_Sender::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  nickname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  card_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sex_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  area_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  level_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  role_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GroupMessageEvent_Sender::ArenaDtor(void* object) {
  GroupMessageEvent_Sender* _this = reinterpret_cast< GroupMessageEvent_Sender* >(object);
  (void)_this;
}
void GroupMessageEvent_Sender::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GroupMessageEvent_Sender::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GroupMessageEvent_Sender& GroupMessageEvent_Sender::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GroupMessageEvent_Sender_onebot_5fevent_2eproto.base);
  return *internal_default_instance();
}


void GroupMessageEvent_Sender::Clear() {
// @@protoc_insertion_point(message_clear_start:onebot.GroupMessageEvent.Sender)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nickname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  card_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sex_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  area_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  level_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  role_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  title_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&age_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(age_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GroupMessageEvent_Sender::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string nickname = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_nickname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onebot.GroupMessageEvent.Sender.nickname"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string card = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_card();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onebot.GroupMessageEvent.Sender.card"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sex = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_sex();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onebot.GroupMessageEvent.Sender.sex"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 age = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          age_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string area = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_area();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onebot.GroupMessageEvent.Sender.area"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string level = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_level();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onebot.GroupMessageEvent.Sender.level"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string role = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_role();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onebot.GroupMessageEvent.Sender.role"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string title = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onebot.GroupMessageEvent.Sender.title"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GroupMessageEvent_Sender::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onebot.GroupMessageEvent.Sender)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 user_id = 1;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_user_id(), target);
  }

  // string nickname = 2;
  if (this->nickname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nickname().data(), static_cast<int>(this->_internal_nickname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onebot.GroupMessageEvent.Sender.nickname");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_nickname(), target);
  }

  // string card = 3;
  if (this->card().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_card().data(), static_cast<int>(this->_internal_card().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onebot.GroupMessageEvent.Sender.card");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_card(), target);
  }

  // string sex = 4;
  if (this->sex().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sex().data(), static_cast<int>(this->_internal_sex().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onebot.GroupMessageEvent.Sender.sex");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_sex(), target);
  }

  // int32 age = 5;
  if (this->age() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_age(), target);
  }

  // string area = 6;
  if (this->area().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_area().data(), static_cast<int>(this->_internal_area().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onebot.GroupMessageEvent.Sender.area");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_area(), target);
  }

  // string level = 7;
  if (this->level().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_level().data(), static_cast<int>(this->_internal_level().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onebot.GroupMessageEvent.Sender.level");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_level(), target);
  }

  // string role = 8;
  if (this->role().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_role().data(), static_cast<int>(this->_internal_role().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onebot.GroupMessageEvent.Sender.role");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_role(), target);
  }

  // string title = 9;
  if (this->title().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onebot.GroupMessageEvent.Sender.title");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_title(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onebot.GroupMessageEvent.Sender)
  return target;
}

size_t GroupMessageEvent_Sender::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onebot.GroupMessageEvent.Sender)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string nickname = 2;
  if (this->nickname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nickname());
  }

  // string card = 3;
  if (this->card().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_card());
  }

  // string sex = 4;
  if (this->sex().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sex());
  }

  // string area = 6;
  if (this->area().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_area());
  }

  // string level = 7;
  if (this->level().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_level());
  }

  // string role = 8;
  if (this->role().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_role());
  }

  // string title = 9;
  if (this->title().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  // int64 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_user_id());
  }

  // int32 age = 5;
  if (this->age() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_age());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GroupMessageEvent_Sender::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:onebot.GroupMessageEvent.Sender)
  GOOGLE_DCHECK_NE(&from, this);
  const GroupMessageEvent_Sender* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GroupMessageEvent_Sender>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:onebot.GroupMessageEvent.Sender)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:onebot.GroupMessageEvent.Sender)
    MergeFrom(*source);
  }
}

void GroupMessageEvent_Sender::MergeFrom(const GroupMessageEvent_Sender& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onebot.GroupMessageEvent.Sender)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.nickname().size() > 0) {
    _internal_set_nickname(from._internal_nickname());
  }
  if (from.card().size() > 0) {
    _internal_set_card(from._internal_card());
  }
  if (from.sex().size() > 0) {
    _internal_set_sex(from._internal_sex());
  }
  if (from.area().size() > 0) {
    _internal_set_area(from._internal_area());
  }
  if (from.level().size() > 0) {
    _internal_set_level(from._internal_level());
  }
  if (from.role().size() > 0) {
    _internal_set_role(from._internal_role());
  }
  if (from.title().size() > 0) {
    _internal_set_title(from._internal_title());
  }
  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.age() != 0) {
    _internal_set_age(from._internal_age());
  }
}

void GroupMessageEvent_Sender::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:onebot.GroupMessageEvent.Sender)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupMessageEvent_Sender::CopyFrom(const GroupMessageEvent_Sender& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onebot.GroupMessageEvent.Sender)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupMessageEvent_Sender::IsInitialized() const {
  return true;
}

void GroupMessageEvent_Sender::InternalSwap(GroupMessageEvent_Sender* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  nickname_.Swap(&other->nickname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  card_.Swap(&other->card_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sex_.Swap(&other->sex_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  area_.Swap(&other->area_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  level_.Swap(&other->level_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  role_.Swap(&other->role_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  title_.Swap(&other->title_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GroupMessageEvent_Sender, age_)
      + sizeof(GroupMessageEvent_Sender::age_)
      - PROTOBUF_FIELD_OFFSET(GroupMessageEvent_Sender, user_id_)>(
          reinterpret_cast<char*>(&user_id_),
          reinterpret_cast<char*>(&other->user_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GroupMessageEvent_Sender::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GroupMessageEvent::InitAsDefaultInstance() {
  ::onebot::_GroupMessageEvent_default_instance_._instance.get_mutable()->anonymous_ = const_cast< ::onebot::GroupMessageEvent_Anonymous*>(
      ::onebot::GroupMessageEvent_Anonymous::internal_default_instance());
  ::onebot::_GroupMessageEvent_default_instance_._instance.get_mutable()->sender_ = const_cast< ::onebot::GroupMessageEvent_Sender*>(
      ::onebot::GroupMessageEvent_Sender::internal_default_instance());
}
class GroupMessageEvent::_Internal {
 public:
  static const ::onebot::GroupMessageEvent_Anonymous& anonymous(const GroupMessageEvent* msg);
  static const ::onebot::GroupMessageEvent_Sender& sender(const GroupMessageEvent* msg);
};

const ::onebot::GroupMessageEvent_Anonymous&
GroupMessageEvent::_Internal::anonymous(const GroupMessageEvent* msg) {
  return *msg->anonymous_;
}
const ::onebot::GroupMessageEvent_Sender&
GroupMessageEvent::_Internal::sender(const GroupMessageEvent* msg) {
  return *msg->sender_;
}
void GroupMessageEvent::clear_message() {
  message_.Clear();
}
GroupMessageEvent::GroupMessageEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  message_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:onebot.GroupMessageEvent)
}
GroupMessageEvent::GroupMessageEvent(const GroupMessageEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      message_(from.message_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  post_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_post_type().empty()) {
    post_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_post_type(),
      GetArena());
  }
  message_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message_type().empty()) {
    message_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_message_type(),
      GetArena());
  }
  sub_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sub_type().empty()) {
    sub_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_sub_type(),
      GetArena());
  }
  raw_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_raw_message().empty()) {
    raw_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_raw_message(),
      GetArena());
  }
  if (from._internal_has_anonymous()) {
    anonymous_ = new ::onebot::GroupMessageEvent_Anonymous(*from.anonymous_);
  } else {
    anonymous_ = nullptr;
  }
  if (from._internal_has_sender()) {
    sender_ = new ::onebot::GroupMessageEvent_Sender(*from.sender_);
  } else {
    sender_ = nullptr;
  }
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&font_) -
    reinterpret_cast<char*>(&time_)) + sizeof(font_));
  // @@protoc_insertion_point(copy_constructor:onebot.GroupMessageEvent)
}

void GroupMessageEvent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GroupMessageEvent_onebot_5fevent_2eproto.base);
  post_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sub_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  raw_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&anonymous_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&font_) -
      reinterpret_cast<char*>(&anonymous_)) + sizeof(font_));
}

GroupMessageEvent::~GroupMessageEvent() {
  // @@protoc_insertion_point(destructor:onebot.GroupMessageEvent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GroupMessageEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  post_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sub_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  raw_message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete anonymous_;
  if (this != internal_default_instance()) delete sender_;
}

void GroupMessageEvent::ArenaDtor(void* object) {
  GroupMessageEvent* _this = reinterpret_cast< GroupMessageEvent* >(object);
  (void)_this;
}
void GroupMessageEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GroupMessageEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GroupMessageEvent& GroupMessageEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GroupMessageEvent_onebot_5fevent_2eproto.base);
  return *internal_default_instance();
}


void GroupMessageEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:onebot.GroupMessageEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.Clear();
  post_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  message_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sub_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  raw_message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && anonymous_ != nullptr) {
    delete anonymous_;
  }
  anonymous_ = nullptr;
  if (GetArena() == nullptr && sender_ != nullptr) {
    delete sender_;
  }
  sender_ = nullptr;
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&font_) -
      reinterpret_cast<char*>(&time_)) + sizeof(font_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GroupMessageEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 self_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          self_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string post_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_post_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onebot.GroupMessageEvent.post_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string message_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_message_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onebot.GroupMessageEvent.message_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sub_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_sub_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onebot.GroupMessageEvent.sub_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 message_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          message_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 group_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 user_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .onebot.GroupMessageEvent.Anonymous anonymous = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_anonymous(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .onebot.Message message = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_message(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      // string raw_message = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_raw_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onebot.GroupMessageEvent.raw_message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 font = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          font_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .onebot.GroupMessageEvent.Sender sender = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_sender(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GroupMessageEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onebot.GroupMessageEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 time = 1;
  if (this->time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_time(), target);
  }

  // int64 self_id = 2;
  if (this->self_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_self_id(), target);
  }

  // string post_type = 3;
  if (this->post_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_post_type().data(), static_cast<int>(this->_internal_post_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onebot.GroupMessageEvent.post_type");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_post_type(), target);
  }

  // string message_type = 4;
  if (this->message_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message_type().data(), static_cast<int>(this->_internal_message_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onebot.GroupMessageEvent.message_type");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_message_type(), target);
  }

  // string sub_type = 5;
  if (this->sub_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sub_type().data(), static_cast<int>(this->_internal_sub_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onebot.GroupMessageEvent.sub_type");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_sub_type(), target);
  }

  // int32 message_id = 6;
  if (this->message_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_message_id(), target);
  }

  // int64 group_id = 7;
  if (this->group_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_group_id(), target);
  }

  // int64 user_id = 8;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_user_id(), target);
  }

  // .onebot.GroupMessageEvent.Anonymous anonymous = 9;
  if (this->has_anonymous()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::anonymous(this), target, stream);
  }

  // repeated .onebot.Message message = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_message_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_message(i), target, stream);
  }

  // string raw_message = 11;
  if (this->raw_message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_raw_message().data(), static_cast<int>(this->_internal_raw_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onebot.GroupMessageEvent.raw_message");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_raw_message(), target);
  }

  // int32 font = 12;
  if (this->font() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_font(), target);
  }

  // .onebot.GroupMessageEvent.Sender sender = 13;
  if (this->has_sender()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::sender(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onebot.GroupMessageEvent)
  return target;
}

size_t GroupMessageEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onebot.GroupMessageEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .onebot.Message message = 10;
  total_size += 1UL * this->_internal_message_size();
  for (const auto& msg : this->message_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string post_type = 3;
  if (this->post_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_post_type());
  }

  // string message_type = 4;
  if (this->message_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message_type());
  }

  // string sub_type = 5;
  if (this->sub_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sub_type());
  }

  // string raw_message = 11;
  if (this->raw_message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_raw_message());
  }

  // .onebot.GroupMessageEvent.Anonymous anonymous = 9;
  if (this->has_anonymous()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *anonymous_);
  }

  // .onebot.GroupMessageEvent.Sender sender = 13;
  if (this->has_sender()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sender_);
  }

  // int64 time = 1;
  if (this->time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_time());
  }

  // int64 self_id = 2;
  if (this->self_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_self_id());
  }

  // int64 group_id = 7;
  if (this->group_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_group_id());
  }

  // int64 user_id = 8;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_user_id());
  }

  // int32 message_id = 6;
  if (this->message_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_message_id());
  }

  // int32 font = 12;
  if (this->font() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_font());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GroupMessageEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:onebot.GroupMessageEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const GroupMessageEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GroupMessageEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:onebot.GroupMessageEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:onebot.GroupMessageEvent)
    MergeFrom(*source);
  }
}

void GroupMessageEvent::MergeFrom(const GroupMessageEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onebot.GroupMessageEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  message_.MergeFrom(from.message_);
  if (from.post_type().size() > 0) {
    _internal_set_post_type(from._internal_post_type());
  }
  if (from.message_type().size() > 0) {
    _internal_set_message_type(from._internal_message_type());
  }
  if (from.sub_type().size() > 0) {
    _internal_set_sub_type(from._internal_sub_type());
  }
  if (from.raw_message().size() > 0) {
    _internal_set_raw_message(from._internal_raw_message());
  }
  if (from.has_anonymous()) {
    _internal_mutable_anonymous()->::onebot::GroupMessageEvent_Anonymous::MergeFrom(from._internal_anonymous());
  }
  if (from.has_sender()) {
    _internal_mutable_sender()->::onebot::GroupMessageEvent_Sender::MergeFrom(from._internal_sender());
  }
  if (from.time() != 0) {
    _internal_set_time(from._internal_time());
  }
  if (from.self_id() != 0) {
    _internal_set_self_id(from._internal_self_id());
  }
  if (from.group_id() != 0) {
    _internal_set_group_id(from._internal_group_id());
  }
  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.message_id() != 0) {
    _internal_set_message_id(from._internal_message_id());
  }
  if (from.font() != 0) {
    _internal_set_font(from._internal_font());
  }
}

void GroupMessageEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:onebot.GroupMessageEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupMessageEvent::CopyFrom(const GroupMessageEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onebot.GroupMessageEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupMessageEvent::IsInitialized() const {
  return true;
}

void GroupMessageEvent::InternalSwap(GroupMessageEvent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  message_.InternalSwap(&other->message_);
  post_type_.Swap(&other->post_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  message_type_.Swap(&other->message_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sub_type_.Swap(&other->sub_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  raw_message_.Swap(&other->raw_message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GroupMessageEvent, font_)
      + sizeof(GroupMessageEvent::font_)
      - PROTOBUF_FIELD_OFFSET(GroupMessageEvent, anonymous_)>(
          reinterpret_cast<char*>(&anonymous_),
          reinterpret_cast<char*>(&other->anonymous_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GroupMessageEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GroupUploadNoticeEvent_File::InitAsDefaultInstance() {
}
class GroupUploadNoticeEvent_File::_Internal {
 public:
};

GroupUploadNoticeEvent_File::GroupUploadNoticeEvent_File(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:onebot.GroupUploadNoticeEvent.File)
}
GroupUploadNoticeEvent_File::GroupUploadNoticeEvent_File(const GroupUploadNoticeEvent_File& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  ::memcpy(&size_, &from.size_,
    static_cast<size_t>(reinterpret_cast<char*>(&busid_) -
    reinterpret_cast<char*>(&size_)) + sizeof(busid_));
  // @@protoc_insertion_point(copy_constructor:onebot.GroupUploadNoticeEvent.File)
}

void GroupUploadNoticeEvent_File::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GroupUploadNoticeEvent_File_onebot_5fevent_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&busid_) -
      reinterpret_cast<char*>(&size_)) + sizeof(busid_));
}

GroupUploadNoticeEvent_File::~GroupUploadNoticeEvent_File() {
  // @@protoc_insertion_point(destructor:onebot.GroupUploadNoticeEvent.File)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GroupUploadNoticeEvent_File::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GroupUploadNoticeEvent_File::ArenaDtor(void* object) {
  GroupUploadNoticeEvent_File* _this = reinterpret_cast< GroupUploadNoticeEvent_File* >(object);
  (void)_this;
}
void GroupUploadNoticeEvent_File::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GroupUploadNoticeEvent_File::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GroupUploadNoticeEvent_File& GroupUploadNoticeEvent_File::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GroupUploadNoticeEvent_File_onebot_5fevent_2eproto.base);
  return *internal_default_instance();
}


void GroupUploadNoticeEvent_File::Clear() {
// @@protoc_insertion_point(message_clear_start:onebot.GroupUploadNoticeEvent.File)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&busid_) -
      reinterpret_cast<char*>(&size_)) + sizeof(busid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GroupUploadNoticeEvent_File::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onebot.GroupUploadNoticeEvent.File.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onebot.GroupUploadNoticeEvent.File.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 busid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          busid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GroupUploadNoticeEvent_File::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onebot.GroupUploadNoticeEvent.File)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onebot.GroupUploadNoticeEvent.File.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onebot.GroupUploadNoticeEvent.File.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // int64 size = 3;
  if (this->size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_size(), target);
  }

  // int64 busid = 4;
  if (this->busid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_busid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onebot.GroupUploadNoticeEvent.File)
  return target;
}

size_t GroupUploadNoticeEvent_File::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onebot.GroupUploadNoticeEvent.File)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int64 size = 3;
  if (this->size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_size());
  }

  // int64 busid = 4;
  if (this->busid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_busid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GroupUploadNoticeEvent_File::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:onebot.GroupUploadNoticeEvent.File)
  GOOGLE_DCHECK_NE(&from, this);
  const GroupUploadNoticeEvent_File* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GroupUploadNoticeEvent_File>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:onebot.GroupUploadNoticeEvent.File)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:onebot.GroupUploadNoticeEvent.File)
    MergeFrom(*source);
  }
}

void GroupUploadNoticeEvent_File::MergeFrom(const GroupUploadNoticeEvent_File& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onebot.GroupUploadNoticeEvent.File)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.size() != 0) {
    _internal_set_size(from._internal_size());
  }
  if (from.busid() != 0) {
    _internal_set_busid(from._internal_busid());
  }
}

void GroupUploadNoticeEvent_File::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:onebot.GroupUploadNoticeEvent.File)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupUploadNoticeEvent_File::CopyFrom(const GroupUploadNoticeEvent_File& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onebot.GroupUploadNoticeEvent.File)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupUploadNoticeEvent_File::IsInitialized() const {
  return true;
}

void GroupUploadNoticeEvent_File::InternalSwap(GroupUploadNoticeEvent_File* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GroupUploadNoticeEvent_File, busid_)
      + sizeof(GroupUploadNoticeEvent_File::busid_)
      - PROTOBUF_FIELD_OFFSET(GroupUploadNoticeEvent_File, size_)>(
          reinterpret_cast<char*>(&size_),
          reinterpret_cast<char*>(&other->size_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GroupUploadNoticeEvent_File::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GroupUploadNoticeEvent::InitAsDefaultInstance() {
  ::onebot::_GroupUploadNoticeEvent_default_instance_._instance.get_mutable()->file_ = const_cast< ::onebot::GroupUploadNoticeEvent_File*>(
      ::onebot::GroupUploadNoticeEvent_File::internal_default_instance());
}
class GroupUploadNoticeEvent::_Internal {
 public:
  static const ::onebot::GroupUploadNoticeEvent_File& file(const GroupUploadNoticeEvent* msg);
};

const ::onebot::GroupUploadNoticeEvent_File&
GroupUploadNoticeEvent::_Internal::file(const GroupUploadNoticeEvent* msg) {
  return *msg->file_;
}
GroupUploadNoticeEvent::GroupUploadNoticeEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:onebot.GroupUploadNoticeEvent)
}
GroupUploadNoticeEvent::GroupUploadNoticeEvent(const GroupUploadNoticeEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  post_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_post_type().empty()) {
    post_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_post_type(),
      GetArena());
  }
  notice_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_notice_type().empty()) {
    notice_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_notice_type(),
      GetArena());
  }
  if (from._internal_has_file()) {
    file_ = new ::onebot::GroupUploadNoticeEvent_File(*from.file_);
  } else {
    file_ = nullptr;
  }
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&user_id_) -
    reinterpret_cast<char*>(&time_)) + sizeof(user_id_));
  // @@protoc_insertion_point(copy_constructor:onebot.GroupUploadNoticeEvent)
}

void GroupUploadNoticeEvent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GroupUploadNoticeEvent_onebot_5fevent_2eproto.base);
  post_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  notice_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&file_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&user_id_) -
      reinterpret_cast<char*>(&file_)) + sizeof(user_id_));
}

GroupUploadNoticeEvent::~GroupUploadNoticeEvent() {
  // @@protoc_insertion_point(destructor:onebot.GroupUploadNoticeEvent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GroupUploadNoticeEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  post_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  notice_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete file_;
}

void GroupUploadNoticeEvent::ArenaDtor(void* object) {
  GroupUploadNoticeEvent* _this = reinterpret_cast< GroupUploadNoticeEvent* >(object);
  (void)_this;
}
void GroupUploadNoticeEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GroupUploadNoticeEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GroupUploadNoticeEvent& GroupUploadNoticeEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GroupUploadNoticeEvent_onebot_5fevent_2eproto.base);
  return *internal_default_instance();
}


void GroupUploadNoticeEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:onebot.GroupUploadNoticeEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  post_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  notice_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && file_ != nullptr) {
    delete file_;
  }
  file_ = nullptr;
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&user_id_) -
      reinterpret_cast<char*>(&time_)) + sizeof(user_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GroupUploadNoticeEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 self_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          self_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string post_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_post_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onebot.GroupUploadNoticeEvent.post_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string notice_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_notice_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onebot.GroupUploadNoticeEvent.notice_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 group_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 user_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .onebot.GroupUploadNoticeEvent.File file = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_file(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GroupUploadNoticeEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onebot.GroupUploadNoticeEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 time = 1;
  if (this->time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_time(), target);
  }

  // int64 self_id = 2;
  if (this->self_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_self_id(), target);
  }

  // string post_type = 3;
  if (this->post_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_post_type().data(), static_cast<int>(this->_internal_post_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onebot.GroupUploadNoticeEvent.post_type");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_post_type(), target);
  }

  // string notice_type = 4;
  if (this->notice_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_notice_type().data(), static_cast<int>(this->_internal_notice_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onebot.GroupUploadNoticeEvent.notice_type");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_notice_type(), target);
  }

  // int64 group_id = 5;
  if (this->group_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_group_id(), target);
  }

  // int64 user_id = 6;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_user_id(), target);
  }

  // .onebot.GroupUploadNoticeEvent.File file = 7;
  if (this->has_file()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::file(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onebot.GroupUploadNoticeEvent)
  return target;
}

size_t GroupUploadNoticeEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onebot.GroupUploadNoticeEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string post_type = 3;
  if (this->post_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_post_type());
  }

  // string notice_type = 4;
  if (this->notice_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_notice_type());
  }

  // .onebot.GroupUploadNoticeEvent.File file = 7;
  if (this->has_file()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *file_);
  }

  // int64 time = 1;
  if (this->time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_time());
  }

  // int64 self_id = 2;
  if (this->self_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_self_id());
  }

  // int64 group_id = 5;
  if (this->group_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_group_id());
  }

  // int64 user_id = 6;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_user_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GroupUploadNoticeEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:onebot.GroupUploadNoticeEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const GroupUploadNoticeEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GroupUploadNoticeEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:onebot.GroupUploadNoticeEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:onebot.GroupUploadNoticeEvent)
    MergeFrom(*source);
  }
}

void GroupUploadNoticeEvent::MergeFrom(const GroupUploadNoticeEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onebot.GroupUploadNoticeEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.post_type().size() > 0) {
    _internal_set_post_type(from._internal_post_type());
  }
  if (from.notice_type().size() > 0) {
    _internal_set_notice_type(from._internal_notice_type());
  }
  if (from.has_file()) {
    _internal_mutable_file()->::onebot::GroupUploadNoticeEvent_File::MergeFrom(from._internal_file());
  }
  if (from.time() != 0) {
    _internal_set_time(from._internal_time());
  }
  if (from.self_id() != 0) {
    _internal_set_self_id(from._internal_self_id());
  }
  if (from.group_id() != 0) {
    _internal_set_group_id(from._internal_group_id());
  }
  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
}

void GroupUploadNoticeEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:onebot.GroupUploadNoticeEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupUploadNoticeEvent::CopyFrom(const GroupUploadNoticeEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onebot.GroupUploadNoticeEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupUploadNoticeEvent::IsInitialized() const {
  return true;
}

void GroupUploadNoticeEvent::InternalSwap(GroupUploadNoticeEvent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  post_type_.Swap(&other->post_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  notice_type_.Swap(&other->notice_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GroupUploadNoticeEvent, user_id_)
      + sizeof(GroupUploadNoticeEvent::user_id_)
      - PROTOBUF_FIELD_OFFSET(GroupUploadNoticeEvent, file_)>(
          reinterpret_cast<char*>(&file_),
          reinterpret_cast<char*>(&other->file_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GroupUploadNoticeEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GroupAdminNoticeEvent::InitAsDefaultInstance() {
}
class GroupAdminNoticeEvent::_Internal {
 public:
};

GroupAdminNoticeEvent::GroupAdminNoticeEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:onebot.GroupAdminNoticeEvent)
}
GroupAdminNoticeEvent::GroupAdminNoticeEvent(const GroupAdminNoticeEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  post_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_post_type().empty()) {
    post_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_post_type(),
      GetArena());
  }
  notice_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_notice_type().empty()) {
    notice_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_notice_type(),
      GetArena());
  }
  sub_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sub_type().empty()) {
    sub_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_sub_type(),
      GetArena());
  }
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&user_id_) -
    reinterpret_cast<char*>(&time_)) + sizeof(user_id_));
  // @@protoc_insertion_point(copy_constructor:onebot.GroupAdminNoticeEvent)
}

void GroupAdminNoticeEvent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GroupAdminNoticeEvent_onebot_5fevent_2eproto.base);
  post_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  notice_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sub_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&user_id_) -
      reinterpret_cast<char*>(&time_)) + sizeof(user_id_));
}

GroupAdminNoticeEvent::~GroupAdminNoticeEvent() {
  // @@protoc_insertion_point(destructor:onebot.GroupAdminNoticeEvent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GroupAdminNoticeEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  post_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  notice_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sub_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GroupAdminNoticeEvent::ArenaDtor(void* object) {
  GroupAdminNoticeEvent* _this = reinterpret_cast< GroupAdminNoticeEvent* >(object);
  (void)_this;
}
void GroupAdminNoticeEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GroupAdminNoticeEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GroupAdminNoticeEvent& GroupAdminNoticeEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GroupAdminNoticeEvent_onebot_5fevent_2eproto.base);
  return *internal_default_instance();
}


void GroupAdminNoticeEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:onebot.GroupAdminNoticeEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  post_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  notice_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sub_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&user_id_) -
      reinterpret_cast<char*>(&time_)) + sizeof(user_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GroupAdminNoticeEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 self_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          self_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string post_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_post_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onebot.GroupAdminNoticeEvent.post_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string notice_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_notice_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onebot.GroupAdminNoticeEvent.notice_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sub_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_sub_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onebot.GroupAdminNoticeEvent.sub_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 group_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 user_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GroupAdminNoticeEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onebot.GroupAdminNoticeEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 time = 1;
  if (this->time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_time(), target);
  }

  // int64 self_id = 2;
  if (this->self_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_self_id(), target);
  }

  // string post_type = 3;
  if (this->post_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_post_type().data(), static_cast<int>(this->_internal_post_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onebot.GroupAdminNoticeEvent.post_type");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_post_type(), target);
  }

  // string notice_type = 4;
  if (this->notice_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_notice_type().data(), static_cast<int>(this->_internal_notice_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onebot.GroupAdminNoticeEvent.notice_type");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_notice_type(), target);
  }

  // string sub_type = 5;
  if (this->sub_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sub_type().data(), static_cast<int>(this->_internal_sub_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onebot.GroupAdminNoticeEvent.sub_type");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_sub_type(), target);
  }

  // int64 group_id = 6;
  if (this->group_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_group_id(), target);
  }

  // int64 user_id = 7;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_user_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onebot.GroupAdminNoticeEvent)
  return target;
}

size_t GroupAdminNoticeEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onebot.GroupAdminNoticeEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string post_type = 3;
  if (this->post_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_post_type());
  }

  // string notice_type = 4;
  if (this->notice_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_notice_type());
  }

  // string sub_type = 5;
  if (this->sub_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sub_type());
  }

  // int64 time = 1;
  if (this->time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_time());
  }

  // int64 self_id = 2;
  if (this->self_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_self_id());
  }

  // int64 group_id = 6;
  if (this->group_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_group_id());
  }

  // int64 user_id = 7;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_user_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GroupAdminNoticeEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:onebot.GroupAdminNoticeEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const GroupAdminNoticeEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GroupAdminNoticeEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:onebot.GroupAdminNoticeEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:onebot.GroupAdminNoticeEvent)
    MergeFrom(*source);
  }
}

void GroupAdminNoticeEvent::MergeFrom(const GroupAdminNoticeEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onebot.GroupAdminNoticeEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.post_type().size() > 0) {
    _internal_set_post_type(from._internal_post_type());
  }
  if (from.notice_type().size() > 0) {
    _internal_set_notice_type(from._internal_notice_type());
  }
  if (from.sub_type().size() > 0) {
    _internal_set_sub_type(from._internal_sub_type());
  }
  if (from.time() != 0) {
    _internal_set_time(from._internal_time());
  }
  if (from.self_id() != 0) {
    _internal_set_self_id(from._internal_self_id());
  }
  if (from.group_id() != 0) {
    _internal_set_group_id(from._internal_group_id());
  }
  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
}

void GroupAdminNoticeEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:onebot.GroupAdminNoticeEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupAdminNoticeEvent::CopyFrom(const GroupAdminNoticeEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onebot.GroupAdminNoticeEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupAdminNoticeEvent::IsInitialized() const {
  return true;
}

void GroupAdminNoticeEvent::InternalSwap(GroupAdminNoticeEvent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  post_type_.Swap(&other->post_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  notice_type_.Swap(&other->notice_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sub_type_.Swap(&other->sub_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GroupAdminNoticeEvent, user_id_)
      + sizeof(GroupAdminNoticeEvent::user_id_)
      - PROTOBUF_FIELD_OFFSET(GroupAdminNoticeEvent, time_)>(
          reinterpret_cast<char*>(&time_),
          reinterpret_cast<char*>(&other->time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GroupAdminNoticeEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GroupDecreaseNoticeEvent::InitAsDefaultInstance() {
}
class GroupDecreaseNoticeEvent::_Internal {
 public:
};

GroupDecreaseNoticeEvent::GroupDecreaseNoticeEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:onebot.GroupDecreaseNoticeEvent)
}
GroupDecreaseNoticeEvent::GroupDecreaseNoticeEvent(const GroupDecreaseNoticeEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  post_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_post_type().empty()) {
    post_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_post_type(),
      GetArena());
  }
  notice_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_notice_type().empty()) {
    notice_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_notice_type(),
      GetArena());
  }
  sub_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sub_type().empty()) {
    sub_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_sub_type(),
      GetArena());
  }
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&user_id_) -
    reinterpret_cast<char*>(&time_)) + sizeof(user_id_));
  // @@protoc_insertion_point(copy_constructor:onebot.GroupDecreaseNoticeEvent)
}

void GroupDecreaseNoticeEvent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GroupDecreaseNoticeEvent_onebot_5fevent_2eproto.base);
  post_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  notice_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sub_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&user_id_) -
      reinterpret_cast<char*>(&time_)) + sizeof(user_id_));
}

GroupDecreaseNoticeEvent::~GroupDecreaseNoticeEvent() {
  // @@protoc_insertion_point(destructor:onebot.GroupDecreaseNoticeEvent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GroupDecreaseNoticeEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  post_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  notice_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sub_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GroupDecreaseNoticeEvent::ArenaDtor(void* object) {
  GroupDecreaseNoticeEvent* _this = reinterpret_cast< GroupDecreaseNoticeEvent* >(object);
  (void)_this;
}
void GroupDecreaseNoticeEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GroupDecreaseNoticeEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GroupDecreaseNoticeEvent& GroupDecreaseNoticeEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GroupDecreaseNoticeEvent_onebot_5fevent_2eproto.base);
  return *internal_default_instance();
}


void GroupDecreaseNoticeEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:onebot.GroupDecreaseNoticeEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  post_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  notice_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sub_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&user_id_) -
      reinterpret_cast<char*>(&time_)) + sizeof(user_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GroupDecreaseNoticeEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 self_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          self_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string post_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_post_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onebot.GroupDecreaseNoticeEvent.post_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string notice_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_notice_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onebot.GroupDecreaseNoticeEvent.notice_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sub_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_sub_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onebot.GroupDecreaseNoticeEvent.sub_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 group_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 operator_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          operator_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 user_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GroupDecreaseNoticeEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onebot.GroupDecreaseNoticeEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 time = 1;
  if (this->time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_time(), target);
  }

  // int64 self_id = 2;
  if (this->self_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_self_id(), target);
  }

  // string post_type = 3;
  if (this->post_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_post_type().data(), static_cast<int>(this->_internal_post_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onebot.GroupDecreaseNoticeEvent.post_type");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_post_type(), target);
  }

  // string notice_type = 4;
  if (this->notice_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_notice_type().data(), static_cast<int>(this->_internal_notice_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onebot.GroupDecreaseNoticeEvent.notice_type");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_notice_type(), target);
  }

  // string sub_type = 5;
  if (this->sub_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sub_type().data(), static_cast<int>(this->_internal_sub_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onebot.GroupDecreaseNoticeEvent.sub_type");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_sub_type(), target);
  }

  // int64 group_id = 6;
  if (this->group_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_group_id(), target);
  }

  // int64 operator_id = 7;
  if (this->operator_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_operator_id(), target);
  }

  // int64 user_id = 8;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_user_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onebot.GroupDecreaseNoticeEvent)
  return target;
}

size_t GroupDecreaseNoticeEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onebot.GroupDecreaseNoticeEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string post_type = 3;
  if (this->post_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_post_type());
  }

  // string notice_type = 4;
  if (this->notice_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_notice_type());
  }

  // string sub_type = 5;
  if (this->sub_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sub_type());
  }

  // int64 time = 1;
  if (this->time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_time());
  }

  // int64 self_id = 2;
  if (this->self_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_self_id());
  }

  // int64 group_id = 6;
  if (this->group_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_group_id());
  }

  // int64 operator_id = 7;
  if (this->operator_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_operator_id());
  }

  // int64 user_id = 8;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_user_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GroupDecreaseNoticeEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:onebot.GroupDecreaseNoticeEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const GroupDecreaseNoticeEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GroupDecreaseNoticeEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:onebot.GroupDecreaseNoticeEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:onebot.GroupDecreaseNoticeEvent)
    MergeFrom(*source);
  }
}

void GroupDecreaseNoticeEvent::MergeFrom(const GroupDecreaseNoticeEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onebot.GroupDecreaseNoticeEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.post_type().size() > 0) {
    _internal_set_post_type(from._internal_post_type());
  }
  if (from.notice_type().size() > 0) {
    _internal_set_notice_type(from._internal_notice_type());
  }
  if (from.sub_type().size() > 0) {
    _internal_set_sub_type(from._internal_sub_type());
  }
  if (from.time() != 0) {
    _internal_set_time(from._internal_time());
  }
  if (from.self_id() != 0) {
    _internal_set_self_id(from._internal_self_id());
  }
  if (from.group_id() != 0) {
    _internal_set_group_id(from._internal_group_id());
  }
  if (from.operator_id() != 0) {
    _internal_set_operator_id(from._internal_operator_id());
  }
  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
}

void GroupDecreaseNoticeEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:onebot.GroupDecreaseNoticeEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupDecreaseNoticeEvent::CopyFrom(const GroupDecreaseNoticeEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onebot.GroupDecreaseNoticeEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupDecreaseNoticeEvent::IsInitialized() const {
  return true;
}

void GroupDecreaseNoticeEvent::InternalSwap(GroupDecreaseNoticeEvent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  post_type_.Swap(&other->post_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  notice_type_.Swap(&other->notice_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sub_type_.Swap(&other->sub_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GroupDecreaseNoticeEvent, user_id_)
      + sizeof(GroupDecreaseNoticeEvent::user_id_)
      - PROTOBUF_FIELD_OFFSET(GroupDecreaseNoticeEvent, time_)>(
          reinterpret_cast<char*>(&time_),
          reinterpret_cast<char*>(&other->time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GroupDecreaseNoticeEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GroupIncreaseNoticeEvent::InitAsDefaultInstance() {
}
class GroupIncreaseNoticeEvent::_Internal {
 public:
};

GroupIncreaseNoticeEvent::GroupIncreaseNoticeEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:onebot.GroupIncreaseNoticeEvent)
}
GroupIncreaseNoticeEvent::GroupIncreaseNoticeEvent(const GroupIncreaseNoticeEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  post_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_post_type().empty()) {
    post_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_post_type(),
      GetArena());
  }
  notice_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_notice_type().empty()) {
    notice_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_notice_type(),
      GetArena());
  }
  sub_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sub_type().empty()) {
    sub_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_sub_type(),
      GetArena());
  }
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&user_id_) -
    reinterpret_cast<char*>(&time_)) + sizeof(user_id_));
  // @@protoc_insertion_point(copy_constructor:onebot.GroupIncreaseNoticeEvent)
}

void GroupIncreaseNoticeEvent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GroupIncreaseNoticeEvent_onebot_5fevent_2eproto.base);
  post_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  notice_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sub_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&user_id_) -
      reinterpret_cast<char*>(&time_)) + sizeof(user_id_));
}

GroupIncreaseNoticeEvent::~GroupIncreaseNoticeEvent() {
  // @@protoc_insertion_point(destructor:onebot.GroupIncreaseNoticeEvent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GroupIncreaseNoticeEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  post_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  notice_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sub_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GroupIncreaseNoticeEvent::ArenaDtor(void* object) {
  GroupIncreaseNoticeEvent* _this = reinterpret_cast< GroupIncreaseNoticeEvent* >(object);
  (void)_this;
}
void GroupIncreaseNoticeEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GroupIncreaseNoticeEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GroupIncreaseNoticeEvent& GroupIncreaseNoticeEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GroupIncreaseNoticeEvent_onebot_5fevent_2eproto.base);
  return *internal_default_instance();
}


void GroupIncreaseNoticeEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:onebot.GroupIncreaseNoticeEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  post_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  notice_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sub_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&user_id_) -
      reinterpret_cast<char*>(&time_)) + sizeof(user_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GroupIncreaseNoticeEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 self_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          self_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string post_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_post_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onebot.GroupIncreaseNoticeEvent.post_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string notice_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_notice_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onebot.GroupIncreaseNoticeEvent.notice_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sub_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_sub_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onebot.GroupIncreaseNoticeEvent.sub_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 group_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 operator_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          operator_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 user_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GroupIncreaseNoticeEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onebot.GroupIncreaseNoticeEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 time = 1;
  if (this->time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_time(), target);
  }

  // int64 self_id = 2;
  if (this->self_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_self_id(), target);
  }

  // string post_type = 3;
  if (this->post_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_post_type().data(), static_cast<int>(this->_internal_post_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onebot.GroupIncreaseNoticeEvent.post_type");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_post_type(), target);
  }

  // string notice_type = 4;
  if (this->notice_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_notice_type().data(), static_cast<int>(this->_internal_notice_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onebot.GroupIncreaseNoticeEvent.notice_type");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_notice_type(), target);
  }

  // string sub_type = 5;
  if (this->sub_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sub_type().data(), static_cast<int>(this->_internal_sub_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onebot.GroupIncreaseNoticeEvent.sub_type");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_sub_type(), target);
  }

  // int64 group_id = 6;
  if (this->group_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_group_id(), target);
  }

  // int64 operator_id = 7;
  if (this->operator_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_operator_id(), target);
  }

  // int64 user_id = 8;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_user_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onebot.GroupIncreaseNoticeEvent)
  return target;
}

size_t GroupIncreaseNoticeEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onebot.GroupIncreaseNoticeEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string post_type = 3;
  if (this->post_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_post_type());
  }

  // string notice_type = 4;
  if (this->notice_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_notice_type());
  }

  // string sub_type = 5;
  if (this->sub_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sub_type());
  }

  // int64 time = 1;
  if (this->time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_time());
  }

  // int64 self_id = 2;
  if (this->self_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_self_id());
  }

  // int64 group_id = 6;
  if (this->group_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_group_id());
  }

  // int64 operator_id = 7;
  if (this->operator_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_operator_id());
  }

  // int64 user_id = 8;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_user_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GroupIncreaseNoticeEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:onebot.GroupIncreaseNoticeEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const GroupIncreaseNoticeEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GroupIncreaseNoticeEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:onebot.GroupIncreaseNoticeEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:onebot.GroupIncreaseNoticeEvent)
    MergeFrom(*source);
  }
}

void GroupIncreaseNoticeEvent::MergeFrom(const GroupIncreaseNoticeEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onebot.GroupIncreaseNoticeEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.post_type().size() > 0) {
    _internal_set_post_type(from._internal_post_type());
  }
  if (from.notice_type().size() > 0) {
    _internal_set_notice_type(from._internal_notice_type());
  }
  if (from.sub_type().size() > 0) {
    _internal_set_sub_type(from._internal_sub_type());
  }
  if (from.time() != 0) {
    _internal_set_time(from._internal_time());
  }
  if (from.self_id() != 0) {
    _internal_set_self_id(from._internal_self_id());
  }
  if (from.group_id() != 0) {
    _internal_set_group_id(from._internal_group_id());
  }
  if (from.operator_id() != 0) {
    _internal_set_operator_id(from._internal_operator_id());
  }
  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
}

void GroupIncreaseNoticeEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:onebot.GroupIncreaseNoticeEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupIncreaseNoticeEvent::CopyFrom(const GroupIncreaseNoticeEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onebot.GroupIncreaseNoticeEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupIncreaseNoticeEvent::IsInitialized() const {
  return true;
}

void GroupIncreaseNoticeEvent::InternalSwap(GroupIncreaseNoticeEvent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  post_type_.Swap(&other->post_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  notice_type_.Swap(&other->notice_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sub_type_.Swap(&other->sub_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GroupIncreaseNoticeEvent, user_id_)
      + sizeof(GroupIncreaseNoticeEvent::user_id_)
      - PROTOBUF_FIELD_OFFSET(GroupIncreaseNoticeEvent, time_)>(
          reinterpret_cast<char*>(&time_),
          reinterpret_cast<char*>(&other->time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GroupIncreaseNoticeEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GroupBanNoticeEvent::InitAsDefaultInstance() {
}
class GroupBanNoticeEvent::_Internal {
 public:
};

GroupBanNoticeEvent::GroupBanNoticeEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:onebot.GroupBanNoticeEvent)
}
GroupBanNoticeEvent::GroupBanNoticeEvent(const GroupBanNoticeEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  post_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_post_type().empty()) {
    post_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_post_type(),
      GetArena());
  }
  notice_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_notice_type().empty()) {
    notice_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_notice_type(),
      GetArena());
  }
  sub_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sub_type().empty()) {
    sub_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_sub_type(),
      GetArena());
  }
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&duration_) -
    reinterpret_cast<char*>(&time_)) + sizeof(duration_));
  // @@protoc_insertion_point(copy_constructor:onebot.GroupBanNoticeEvent)
}

void GroupBanNoticeEvent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GroupBanNoticeEvent_onebot_5fevent_2eproto.base);
  post_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  notice_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sub_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&duration_) -
      reinterpret_cast<char*>(&time_)) + sizeof(duration_));
}

GroupBanNoticeEvent::~GroupBanNoticeEvent() {
  // @@protoc_insertion_point(destructor:onebot.GroupBanNoticeEvent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GroupBanNoticeEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  post_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  notice_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sub_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GroupBanNoticeEvent::ArenaDtor(void* object) {
  GroupBanNoticeEvent* _this = reinterpret_cast< GroupBanNoticeEvent* >(object);
  (void)_this;
}
void GroupBanNoticeEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GroupBanNoticeEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GroupBanNoticeEvent& GroupBanNoticeEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GroupBanNoticeEvent_onebot_5fevent_2eproto.base);
  return *internal_default_instance();
}


void GroupBanNoticeEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:onebot.GroupBanNoticeEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  post_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  notice_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sub_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&duration_) -
      reinterpret_cast<char*>(&time_)) + sizeof(duration_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GroupBanNoticeEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 self_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          self_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string post_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_post_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onebot.GroupBanNoticeEvent.post_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string notice_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_notice_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onebot.GroupBanNoticeEvent.notice_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sub_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_sub_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onebot.GroupBanNoticeEvent.sub_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 group_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 operator_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          operator_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 user_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 duration = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GroupBanNoticeEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onebot.GroupBanNoticeEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 time = 1;
  if (this->time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_time(), target);
  }

  // int64 self_id = 2;
  if (this->self_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_self_id(), target);
  }

  // string post_type = 3;
  if (this->post_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_post_type().data(), static_cast<int>(this->_internal_post_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onebot.GroupBanNoticeEvent.post_type");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_post_type(), target);
  }

  // string notice_type = 4;
  if (this->notice_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_notice_type().data(), static_cast<int>(this->_internal_notice_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onebot.GroupBanNoticeEvent.notice_type");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_notice_type(), target);
  }

  // string sub_type = 5;
  if (this->sub_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sub_type().data(), static_cast<int>(this->_internal_sub_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onebot.GroupBanNoticeEvent.sub_type");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_sub_type(), target);
  }

  // int64 group_id = 6;
  if (this->group_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_group_id(), target);
  }

  // int64 operator_id = 7;
  if (this->operator_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_operator_id(), target);
  }

  // int64 user_id = 8;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_user_id(), target);
  }

  // int64 duration = 9;
  if (this->duration() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(9, this->_internal_duration(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onebot.GroupBanNoticeEvent)
  return target;
}

size_t GroupBanNoticeEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onebot.GroupBanNoticeEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string post_type = 3;
  if (this->post_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_post_type());
  }

  // string notice_type = 4;
  if (this->notice_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_notice_type());
  }

  // string sub_type = 5;
  if (this->sub_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sub_type());
  }

  // int64 time = 1;
  if (this->time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_time());
  }

  // int64 self_id = 2;
  if (this->self_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_self_id());
  }

  // int64 group_id = 6;
  if (this->group_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_group_id());
  }

  // int64 operator_id = 7;
  if (this->operator_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_operator_id());
  }

  // int64 user_id = 8;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_user_id());
  }

  // int64 duration = 9;
  if (this->duration() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_duration());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GroupBanNoticeEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:onebot.GroupBanNoticeEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const GroupBanNoticeEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GroupBanNoticeEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:onebot.GroupBanNoticeEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:onebot.GroupBanNoticeEvent)
    MergeFrom(*source);
  }
}

void GroupBanNoticeEvent::MergeFrom(const GroupBanNoticeEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onebot.GroupBanNoticeEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.post_type().size() > 0) {
    _internal_set_post_type(from._internal_post_type());
  }
  if (from.notice_type().size() > 0) {
    _internal_set_notice_type(from._internal_notice_type());
  }
  if (from.sub_type().size() > 0) {
    _internal_set_sub_type(from._internal_sub_type());
  }
  if (from.time() != 0) {
    _internal_set_time(from._internal_time());
  }
  if (from.self_id() != 0) {
    _internal_set_self_id(from._internal_self_id());
  }
  if (from.group_id() != 0) {
    _internal_set_group_id(from._internal_group_id());
  }
  if (from.operator_id() != 0) {
    _internal_set_operator_id(from._internal_operator_id());
  }
  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.duration() != 0) {
    _internal_set_duration(from._internal_duration());
  }
}

void GroupBanNoticeEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:onebot.GroupBanNoticeEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupBanNoticeEvent::CopyFrom(const GroupBanNoticeEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onebot.GroupBanNoticeEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupBanNoticeEvent::IsInitialized() const {
  return true;
}

void GroupBanNoticeEvent::InternalSwap(GroupBanNoticeEvent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  post_type_.Swap(&other->post_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  notice_type_.Swap(&other->notice_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sub_type_.Swap(&other->sub_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GroupBanNoticeEvent, duration_)
      + sizeof(GroupBanNoticeEvent::duration_)
      - PROTOBUF_FIELD_OFFSET(GroupBanNoticeEvent, time_)>(
          reinterpret_cast<char*>(&time_),
          reinterpret_cast<char*>(&other->time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GroupBanNoticeEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FriendAddNoticeEvent::InitAsDefaultInstance() {
}
class FriendAddNoticeEvent::_Internal {
 public:
};

FriendAddNoticeEvent::FriendAddNoticeEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:onebot.FriendAddNoticeEvent)
}
FriendAddNoticeEvent::FriendAddNoticeEvent(const FriendAddNoticeEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  post_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_post_type().empty()) {
    post_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_post_type(),
      GetArena());
  }
  notice_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_notice_type().empty()) {
    notice_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_notice_type(),
      GetArena());
  }
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&user_id_) -
    reinterpret_cast<char*>(&time_)) + sizeof(user_id_));
  // @@protoc_insertion_point(copy_constructor:onebot.FriendAddNoticeEvent)
}

void FriendAddNoticeEvent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FriendAddNoticeEvent_onebot_5fevent_2eproto.base);
  post_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  notice_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&user_id_) -
      reinterpret_cast<char*>(&time_)) + sizeof(user_id_));
}

FriendAddNoticeEvent::~FriendAddNoticeEvent() {
  // @@protoc_insertion_point(destructor:onebot.FriendAddNoticeEvent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FriendAddNoticeEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  post_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  notice_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FriendAddNoticeEvent::ArenaDtor(void* object) {
  FriendAddNoticeEvent* _this = reinterpret_cast< FriendAddNoticeEvent* >(object);
  (void)_this;
}
void FriendAddNoticeEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FriendAddNoticeEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FriendAddNoticeEvent& FriendAddNoticeEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FriendAddNoticeEvent_onebot_5fevent_2eproto.base);
  return *internal_default_instance();
}


void FriendAddNoticeEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:onebot.FriendAddNoticeEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  post_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  notice_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&user_id_) -
      reinterpret_cast<char*>(&time_)) + sizeof(user_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FriendAddNoticeEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 self_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          self_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string post_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_post_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onebot.FriendAddNoticeEvent.post_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string notice_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_notice_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onebot.FriendAddNoticeEvent.notice_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 user_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FriendAddNoticeEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onebot.FriendAddNoticeEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 time = 1;
  if (this->time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_time(), target);
  }

  // int64 self_id = 2;
  if (this->self_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_self_id(), target);
  }

  // string post_type = 3;
  if (this->post_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_post_type().data(), static_cast<int>(this->_internal_post_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onebot.FriendAddNoticeEvent.post_type");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_post_type(), target);
  }

  // string notice_type = 4;
  if (this->notice_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_notice_type().data(), static_cast<int>(this->_internal_notice_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onebot.FriendAddNoticeEvent.notice_type");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_notice_type(), target);
  }

  // int64 user_id = 5;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_user_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onebot.FriendAddNoticeEvent)
  return target;
}

size_t FriendAddNoticeEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onebot.FriendAddNoticeEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string post_type = 3;
  if (this->post_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_post_type());
  }

  // string notice_type = 4;
  if (this->notice_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_notice_type());
  }

  // int64 time = 1;
  if (this->time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_time());
  }

  // int64 self_id = 2;
  if (this->self_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_self_id());
  }

  // int64 user_id = 5;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_user_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FriendAddNoticeEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:onebot.FriendAddNoticeEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const FriendAddNoticeEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FriendAddNoticeEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:onebot.FriendAddNoticeEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:onebot.FriendAddNoticeEvent)
    MergeFrom(*source);
  }
}

void FriendAddNoticeEvent::MergeFrom(const FriendAddNoticeEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onebot.FriendAddNoticeEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.post_type().size() > 0) {
    _internal_set_post_type(from._internal_post_type());
  }
  if (from.notice_type().size() > 0) {
    _internal_set_notice_type(from._internal_notice_type());
  }
  if (from.time() != 0) {
    _internal_set_time(from._internal_time());
  }
  if (from.self_id() != 0) {
    _internal_set_self_id(from._internal_self_id());
  }
  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
}

void FriendAddNoticeEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:onebot.FriendAddNoticeEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendAddNoticeEvent::CopyFrom(const FriendAddNoticeEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onebot.FriendAddNoticeEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendAddNoticeEvent::IsInitialized() const {
  return true;
}

void FriendAddNoticeEvent::InternalSwap(FriendAddNoticeEvent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  post_type_.Swap(&other->post_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  notice_type_.Swap(&other->notice_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FriendAddNoticeEvent, user_id_)
      + sizeof(FriendAddNoticeEvent::user_id_)
      - PROTOBUF_FIELD_OFFSET(FriendAddNoticeEvent, time_)>(
          reinterpret_cast<char*>(&time_),
          reinterpret_cast<char*>(&other->time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FriendAddNoticeEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GroupRecallNoticeEvent::InitAsDefaultInstance() {
}
class GroupRecallNoticeEvent::_Internal {
 public:
};

GroupRecallNoticeEvent::GroupRecallNoticeEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:onebot.GroupRecallNoticeEvent)
}
GroupRecallNoticeEvent::GroupRecallNoticeEvent(const GroupRecallNoticeEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  post_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_post_type().empty()) {
    post_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_post_type(),
      GetArena());
  }
  notice_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_notice_type().empty()) {
    notice_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_notice_type(),
      GetArena());
  }
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&message_id_) -
    reinterpret_cast<char*>(&time_)) + sizeof(message_id_));
  // @@protoc_insertion_point(copy_constructor:onebot.GroupRecallNoticeEvent)
}

void GroupRecallNoticeEvent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GroupRecallNoticeEvent_onebot_5fevent_2eproto.base);
  post_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  notice_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&message_id_) -
      reinterpret_cast<char*>(&time_)) + sizeof(message_id_));
}

GroupRecallNoticeEvent::~GroupRecallNoticeEvent() {
  // @@protoc_insertion_point(destructor:onebot.GroupRecallNoticeEvent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GroupRecallNoticeEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  post_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  notice_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GroupRecallNoticeEvent::ArenaDtor(void* object) {
  GroupRecallNoticeEvent* _this = reinterpret_cast< GroupRecallNoticeEvent* >(object);
  (void)_this;
}
void GroupRecallNoticeEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GroupRecallNoticeEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GroupRecallNoticeEvent& GroupRecallNoticeEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GroupRecallNoticeEvent_onebot_5fevent_2eproto.base);
  return *internal_default_instance();
}


void GroupRecallNoticeEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:onebot.GroupRecallNoticeEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  post_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  notice_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&message_id_) -
      reinterpret_cast<char*>(&time_)) + sizeof(message_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GroupRecallNoticeEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 self_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          self_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string post_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_post_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onebot.GroupRecallNoticeEvent.post_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string notice_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_notice_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onebot.GroupRecallNoticeEvent.notice_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 group_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 user_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 operator_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          operator_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 message_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          message_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GroupRecallNoticeEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onebot.GroupRecallNoticeEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 time = 1;
  if (this->time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_time(), target);
  }

  // int64 self_id = 2;
  if (this->self_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_self_id(), target);
  }

  // string post_type = 3;
  if (this->post_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_post_type().data(), static_cast<int>(this->_internal_post_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onebot.GroupRecallNoticeEvent.post_type");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_post_type(), target);
  }

  // string notice_type = 4;
  if (this->notice_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_notice_type().data(), static_cast<int>(this->_internal_notice_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onebot.GroupRecallNoticeEvent.notice_type");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_notice_type(), target);
  }

  // int64 group_id = 5;
  if (this->group_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_group_id(), target);
  }

  // int64 user_id = 6;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_user_id(), target);
  }

  // int64 operator_id = 7;
  if (this->operator_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_operator_id(), target);
  }

  // int64 message_id = 8;
  if (this->message_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_message_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onebot.GroupRecallNoticeEvent)
  return target;
}

size_t GroupRecallNoticeEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onebot.GroupRecallNoticeEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string post_type = 3;
  if (this->post_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_post_type());
  }

  // string notice_type = 4;
  if (this->notice_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_notice_type());
  }

  // int64 time = 1;
  if (this->time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_time());
  }

  // int64 self_id = 2;
  if (this->self_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_self_id());
  }

  // int64 group_id = 5;
  if (this->group_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_group_id());
  }

  // int64 user_id = 6;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_user_id());
  }

  // int64 operator_id = 7;
  if (this->operator_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_operator_id());
  }

  // int64 message_id = 8;
  if (this->message_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_message_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GroupRecallNoticeEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:onebot.GroupRecallNoticeEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const GroupRecallNoticeEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GroupRecallNoticeEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:onebot.GroupRecallNoticeEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:onebot.GroupRecallNoticeEvent)
    MergeFrom(*source);
  }
}

void GroupRecallNoticeEvent::MergeFrom(const GroupRecallNoticeEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onebot.GroupRecallNoticeEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.post_type().size() > 0) {
    _internal_set_post_type(from._internal_post_type());
  }
  if (from.notice_type().size() > 0) {
    _internal_set_notice_type(from._internal_notice_type());
  }
  if (from.time() != 0) {
    _internal_set_time(from._internal_time());
  }
  if (from.self_id() != 0) {
    _internal_set_self_id(from._internal_self_id());
  }
  if (from.group_id() != 0) {
    _internal_set_group_id(from._internal_group_id());
  }
  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.operator_id() != 0) {
    _internal_set_operator_id(from._internal_operator_id());
  }
  if (from.message_id() != 0) {
    _internal_set_message_id(from._internal_message_id());
  }
}

void GroupRecallNoticeEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:onebot.GroupRecallNoticeEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupRecallNoticeEvent::CopyFrom(const GroupRecallNoticeEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onebot.GroupRecallNoticeEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupRecallNoticeEvent::IsInitialized() const {
  return true;
}

void GroupRecallNoticeEvent::InternalSwap(GroupRecallNoticeEvent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  post_type_.Swap(&other->post_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  notice_type_.Swap(&other->notice_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GroupRecallNoticeEvent, message_id_)
      + sizeof(GroupRecallNoticeEvent::message_id_)
      - PROTOBUF_FIELD_OFFSET(GroupRecallNoticeEvent, time_)>(
          reinterpret_cast<char*>(&time_),
          reinterpret_cast<char*>(&other->time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GroupRecallNoticeEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FriendRecallNoticeEvent::InitAsDefaultInstance() {
}
class FriendRecallNoticeEvent::_Internal {
 public:
};

FriendRecallNoticeEvent::FriendRecallNoticeEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:onebot.FriendRecallNoticeEvent)
}
FriendRecallNoticeEvent::FriendRecallNoticeEvent(const FriendRecallNoticeEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  post_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_post_type().empty()) {
    post_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_post_type(),
      GetArena());
  }
  notice_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_notice_type().empty()) {
    notice_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_notice_type(),
      GetArena());
  }
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&message_id_) -
    reinterpret_cast<char*>(&time_)) + sizeof(message_id_));
  // @@protoc_insertion_point(copy_constructor:onebot.FriendRecallNoticeEvent)
}

void FriendRecallNoticeEvent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FriendRecallNoticeEvent_onebot_5fevent_2eproto.base);
  post_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  notice_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&message_id_) -
      reinterpret_cast<char*>(&time_)) + sizeof(message_id_));
}

FriendRecallNoticeEvent::~FriendRecallNoticeEvent() {
  // @@protoc_insertion_point(destructor:onebot.FriendRecallNoticeEvent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FriendRecallNoticeEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  post_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  notice_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FriendRecallNoticeEvent::ArenaDtor(void* object) {
  FriendRecallNoticeEvent* _this = reinterpret_cast< FriendRecallNoticeEvent* >(object);
  (void)_this;
}
void FriendRecallNoticeEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FriendRecallNoticeEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FriendRecallNoticeEvent& FriendRecallNoticeEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FriendRecallNoticeEvent_onebot_5fevent_2eproto.base);
  return *internal_default_instance();
}


void FriendRecallNoticeEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:onebot.FriendRecallNoticeEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  post_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  notice_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&message_id_) -
      reinterpret_cast<char*>(&time_)) + sizeof(message_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FriendRecallNoticeEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 self_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          self_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string post_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_post_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onebot.FriendRecallNoticeEvent.post_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string notice_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_notice_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onebot.FriendRecallNoticeEvent.notice_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 user_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 message_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          message_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FriendRecallNoticeEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onebot.FriendRecallNoticeEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 time = 1;
  if (this->time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_time(), target);
  }

  // int64 self_id = 2;
  if (this->self_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_self_id(), target);
  }

  // string post_type = 3;
  if (this->post_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_post_type().data(), static_cast<int>(this->_internal_post_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onebot.FriendRecallNoticeEvent.post_type");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_post_type(), target);
  }

  // string notice_type = 4;
  if (this->notice_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_notice_type().data(), static_cast<int>(this->_internal_notice_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onebot.FriendRecallNoticeEvent.notice_type");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_notice_type(), target);
  }

  // int64 user_id = 5;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_user_id(), target);
  }

  // int64 message_id = 6;
  if (this->message_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_message_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onebot.FriendRecallNoticeEvent)
  return target;
}

size_t FriendRecallNoticeEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onebot.FriendRecallNoticeEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string post_type = 3;
  if (this->post_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_post_type());
  }

  // string notice_type = 4;
  if (this->notice_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_notice_type());
  }

  // int64 time = 1;
  if (this->time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_time());
  }

  // int64 self_id = 2;
  if (this->self_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_self_id());
  }

  // int64 user_id = 5;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_user_id());
  }

  // int64 message_id = 6;
  if (this->message_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_message_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FriendRecallNoticeEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:onebot.FriendRecallNoticeEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const FriendRecallNoticeEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FriendRecallNoticeEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:onebot.FriendRecallNoticeEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:onebot.FriendRecallNoticeEvent)
    MergeFrom(*source);
  }
}

void FriendRecallNoticeEvent::MergeFrom(const FriendRecallNoticeEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onebot.FriendRecallNoticeEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.post_type().size() > 0) {
    _internal_set_post_type(from._internal_post_type());
  }
  if (from.notice_type().size() > 0) {
    _internal_set_notice_type(from._internal_notice_type());
  }
  if (from.time() != 0) {
    _internal_set_time(from._internal_time());
  }
  if (from.self_id() != 0) {
    _internal_set_self_id(from._internal_self_id());
  }
  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.message_id() != 0) {
    _internal_set_message_id(from._internal_message_id());
  }
}

void FriendRecallNoticeEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:onebot.FriendRecallNoticeEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendRecallNoticeEvent::CopyFrom(const FriendRecallNoticeEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onebot.FriendRecallNoticeEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendRecallNoticeEvent::IsInitialized() const {
  return true;
}

void FriendRecallNoticeEvent::InternalSwap(FriendRecallNoticeEvent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  post_type_.Swap(&other->post_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  notice_type_.Swap(&other->notice_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FriendRecallNoticeEvent, message_id_)
      + sizeof(FriendRecallNoticeEvent::message_id_)
      - PROTOBUF_FIELD_OFFSET(FriendRecallNoticeEvent, time_)>(
          reinterpret_cast<char*>(&time_),
          reinterpret_cast<char*>(&other->time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FriendRecallNoticeEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FriendRequestEvent::InitAsDefaultInstance() {
}
class FriendRequestEvent::_Internal {
 public:
};

FriendRequestEvent::FriendRequestEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:onebot.FriendRequestEvent)
}
FriendRequestEvent::FriendRequestEvent(const FriendRequestEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  post_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_post_type().empty()) {
    post_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_post_type(),
      GetArena());
  }
  request_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_request_type().empty()) {
    request_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_request_type(),
      GetArena());
  }
  comment_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_comment().empty()) {
    comment_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_comment(),
      GetArena());
  }
  flag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_flag().empty()) {
    flag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_flag(),
      GetArena());
  }
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&user_id_) -
    reinterpret_cast<char*>(&time_)) + sizeof(user_id_));
  // @@protoc_insertion_point(copy_constructor:onebot.FriendRequestEvent)
}

void FriendRequestEvent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FriendRequestEvent_onebot_5fevent_2eproto.base);
  post_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  request_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  comment_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  flag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&user_id_) -
      reinterpret_cast<char*>(&time_)) + sizeof(user_id_));
}

FriendRequestEvent::~FriendRequestEvent() {
  // @@protoc_insertion_point(destructor:onebot.FriendRequestEvent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FriendRequestEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  post_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  request_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  comment_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  flag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FriendRequestEvent::ArenaDtor(void* object) {
  FriendRequestEvent* _this = reinterpret_cast< FriendRequestEvent* >(object);
  (void)_this;
}
void FriendRequestEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FriendRequestEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FriendRequestEvent& FriendRequestEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FriendRequestEvent_onebot_5fevent_2eproto.base);
  return *internal_default_instance();
}


void FriendRequestEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:onebot.FriendRequestEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  post_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  request_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  comment_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  flag_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&user_id_) -
      reinterpret_cast<char*>(&time_)) + sizeof(user_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FriendRequestEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 self_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          self_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string post_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_post_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onebot.FriendRequestEvent.post_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string request_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_request_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onebot.FriendRequestEvent.request_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 user_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string comment = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_comment();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onebot.FriendRequestEvent.comment"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string flag = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_flag();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onebot.FriendRequestEvent.flag"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FriendRequestEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onebot.FriendRequestEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 time = 1;
  if (this->time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_time(), target);
  }

  // int64 self_id = 2;
  if (this->self_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_self_id(), target);
  }

  // string post_type = 3;
  if (this->post_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_post_type().data(), static_cast<int>(this->_internal_post_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onebot.FriendRequestEvent.post_type");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_post_type(), target);
  }

  // string request_type = 4;
  if (this->request_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request_type().data(), static_cast<int>(this->_internal_request_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onebot.FriendRequestEvent.request_type");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_request_type(), target);
  }

  // int64 user_id = 5;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_user_id(), target);
  }

  // string comment = 6;
  if (this->comment().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_comment().data(), static_cast<int>(this->_internal_comment().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onebot.FriendRequestEvent.comment");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_comment(), target);
  }

  // string flag = 7;
  if (this->flag().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_flag().data(), static_cast<int>(this->_internal_flag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onebot.FriendRequestEvent.flag");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_flag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onebot.FriendRequestEvent)
  return target;
}

size_t FriendRequestEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onebot.FriendRequestEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string post_type = 3;
  if (this->post_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_post_type());
  }

  // string request_type = 4;
  if (this->request_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_type());
  }

  // string comment = 6;
  if (this->comment().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_comment());
  }

  // string flag = 7;
  if (this->flag().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_flag());
  }

  // int64 time = 1;
  if (this->time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_time());
  }

  // int64 self_id = 2;
  if (this->self_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_self_id());
  }

  // int64 user_id = 5;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_user_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FriendRequestEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:onebot.FriendRequestEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const FriendRequestEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FriendRequestEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:onebot.FriendRequestEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:onebot.FriendRequestEvent)
    MergeFrom(*source);
  }
}

void FriendRequestEvent::MergeFrom(const FriendRequestEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onebot.FriendRequestEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.post_type().size() > 0) {
    _internal_set_post_type(from._internal_post_type());
  }
  if (from.request_type().size() > 0) {
    _internal_set_request_type(from._internal_request_type());
  }
  if (from.comment().size() > 0) {
    _internal_set_comment(from._internal_comment());
  }
  if (from.flag().size() > 0) {
    _internal_set_flag(from._internal_flag());
  }
  if (from.time() != 0) {
    _internal_set_time(from._internal_time());
  }
  if (from.self_id() != 0) {
    _internal_set_self_id(from._internal_self_id());
  }
  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
}

void FriendRequestEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:onebot.FriendRequestEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendRequestEvent::CopyFrom(const FriendRequestEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onebot.FriendRequestEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendRequestEvent::IsInitialized() const {
  return true;
}

void FriendRequestEvent::InternalSwap(FriendRequestEvent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  post_type_.Swap(&other->post_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  request_type_.Swap(&other->request_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  comment_.Swap(&other->comment_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  flag_.Swap(&other->flag_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FriendRequestEvent, user_id_)
      + sizeof(FriendRequestEvent::user_id_)
      - PROTOBUF_FIELD_OFFSET(FriendRequestEvent, time_)>(
          reinterpret_cast<char*>(&time_),
          reinterpret_cast<char*>(&other->time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FriendRequestEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GroupRequestEvent::InitAsDefaultInstance() {
}
class GroupRequestEvent::_Internal {
 public:
};

GroupRequestEvent::GroupRequestEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:onebot.GroupRequestEvent)
}
GroupRequestEvent::GroupRequestEvent(const GroupRequestEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  post_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_post_type().empty()) {
    post_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_post_type(),
      GetArena());
  }
  request_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_request_type().empty()) {
    request_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_request_type(),
      GetArena());
  }
  sub_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sub_type().empty()) {
    sub_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_sub_type(),
      GetArena());
  }
  comment_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_comment().empty()) {
    comment_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_comment(),
      GetArena());
  }
  flag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_flag().empty()) {
    flag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_flag(),
      GetArena());
  }
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&user_id_) -
    reinterpret_cast<char*>(&time_)) + sizeof(user_id_));
  // @@protoc_insertion_point(copy_constructor:onebot.GroupRequestEvent)
}

void GroupRequestEvent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GroupRequestEvent_onebot_5fevent_2eproto.base);
  post_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  request_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sub_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  comment_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  flag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&user_id_) -
      reinterpret_cast<char*>(&time_)) + sizeof(user_id_));
}

GroupRequestEvent::~GroupRequestEvent() {
  // @@protoc_insertion_point(destructor:onebot.GroupRequestEvent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GroupRequestEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  post_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  request_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sub_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  comment_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  flag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GroupRequestEvent::ArenaDtor(void* object) {
  GroupRequestEvent* _this = reinterpret_cast< GroupRequestEvent* >(object);
  (void)_this;
}
void GroupRequestEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GroupRequestEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GroupRequestEvent& GroupRequestEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GroupRequestEvent_onebot_5fevent_2eproto.base);
  return *internal_default_instance();
}


void GroupRequestEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:onebot.GroupRequestEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  post_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  request_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sub_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  comment_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  flag_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&user_id_) -
      reinterpret_cast<char*>(&time_)) + sizeof(user_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GroupRequestEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 self_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          self_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string post_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_post_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onebot.GroupRequestEvent.post_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string request_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_request_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onebot.GroupRequestEvent.request_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sub_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_sub_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onebot.GroupRequestEvent.sub_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 group_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 user_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string comment = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_comment();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onebot.GroupRequestEvent.comment"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string flag = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_flag();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onebot.GroupRequestEvent.flag"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GroupRequestEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onebot.GroupRequestEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 time = 1;
  if (this->time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_time(), target);
  }

  // int64 self_id = 2;
  if (this->self_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_self_id(), target);
  }

  // string post_type = 3;
  if (this->post_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_post_type().data(), static_cast<int>(this->_internal_post_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onebot.GroupRequestEvent.post_type");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_post_type(), target);
  }

  // string request_type = 4;
  if (this->request_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request_type().data(), static_cast<int>(this->_internal_request_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onebot.GroupRequestEvent.request_type");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_request_type(), target);
  }

  // string sub_type = 5;
  if (this->sub_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sub_type().data(), static_cast<int>(this->_internal_sub_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onebot.GroupRequestEvent.sub_type");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_sub_type(), target);
  }

  // int64 group_id = 6;
  if (this->group_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_group_id(), target);
  }

  // int64 user_id = 7;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_user_id(), target);
  }

  // string comment = 8;
  if (this->comment().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_comment().data(), static_cast<int>(this->_internal_comment().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onebot.GroupRequestEvent.comment");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_comment(), target);
  }

  // string flag = 9;
  if (this->flag().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_flag().data(), static_cast<int>(this->_internal_flag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onebot.GroupRequestEvent.flag");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_flag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onebot.GroupRequestEvent)
  return target;
}

size_t GroupRequestEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onebot.GroupRequestEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string post_type = 3;
  if (this->post_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_post_type());
  }

  // string request_type = 4;
  if (this->request_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_type());
  }

  // string sub_type = 5;
  if (this->sub_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sub_type());
  }

  // string comment = 8;
  if (this->comment().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_comment());
  }

  // string flag = 9;
  if (this->flag().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_flag());
  }

  // int64 time = 1;
  if (this->time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_time());
  }

  // int64 self_id = 2;
  if (this->self_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_self_id());
  }

  // int64 group_id = 6;
  if (this->group_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_group_id());
  }

  // int64 user_id = 7;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_user_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GroupRequestEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:onebot.GroupRequestEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const GroupRequestEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GroupRequestEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:onebot.GroupRequestEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:onebot.GroupRequestEvent)
    MergeFrom(*source);
  }
}

void GroupRequestEvent::MergeFrom(const GroupRequestEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onebot.GroupRequestEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.post_type().size() > 0) {
    _internal_set_post_type(from._internal_post_type());
  }
  if (from.request_type().size() > 0) {
    _internal_set_request_type(from._internal_request_type());
  }
  if (from.sub_type().size() > 0) {
    _internal_set_sub_type(from._internal_sub_type());
  }
  if (from.comment().size() > 0) {
    _internal_set_comment(from._internal_comment());
  }
  if (from.flag().size() > 0) {
    _internal_set_flag(from._internal_flag());
  }
  if (from.time() != 0) {
    _internal_set_time(from._internal_time());
  }
  if (from.self_id() != 0) {
    _internal_set_self_id(from._internal_self_id());
  }
  if (from.group_id() != 0) {
    _internal_set_group_id(from._internal_group_id());
  }
  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
}

void GroupRequestEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:onebot.GroupRequestEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupRequestEvent::CopyFrom(const GroupRequestEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onebot.GroupRequestEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupRequestEvent::IsInitialized() const {
  return true;
}

void GroupRequestEvent::InternalSwap(GroupRequestEvent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  post_type_.Swap(&other->post_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  request_type_.Swap(&other->request_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sub_type_.Swap(&other->sub_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  comment_.Swap(&other->comment_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  flag_.Swap(&other->flag_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GroupRequestEvent, user_id_)
      + sizeof(GroupRequestEvent::user_id_)
      - PROTOBUF_FIELD_OFFSET(GroupRequestEvent, time_)>(
          reinterpret_cast<char*>(&time_),
          reinterpret_cast<char*>(&other->time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GroupRequestEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace onebot
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::onebot::BaseEvent* Arena::CreateMaybeMessage< ::onebot::BaseEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onebot::BaseEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::onebot::BaseMessageEvent* Arena::CreateMaybeMessage< ::onebot::BaseMessageEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onebot::BaseMessageEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::onebot::BaseNoticeEvent* Arena::CreateMaybeMessage< ::onebot::BaseNoticeEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onebot::BaseNoticeEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::onebot::BaseRequestEvent* Arena::CreateMaybeMessage< ::onebot::BaseRequestEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onebot::BaseRequestEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::onebot::PrivateMessageEvent_Sender* Arena::CreateMaybeMessage< ::onebot::PrivateMessageEvent_Sender >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onebot::PrivateMessageEvent_Sender >(arena);
}
template<> PROTOBUF_NOINLINE ::onebot::PrivateMessageEvent* Arena::CreateMaybeMessage< ::onebot::PrivateMessageEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onebot::PrivateMessageEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::onebot::GroupMessageEvent_Anonymous* Arena::CreateMaybeMessage< ::onebot::GroupMessageEvent_Anonymous >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onebot::GroupMessageEvent_Anonymous >(arena);
}
template<> PROTOBUF_NOINLINE ::onebot::GroupMessageEvent_Sender* Arena::CreateMaybeMessage< ::onebot::GroupMessageEvent_Sender >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onebot::GroupMessageEvent_Sender >(arena);
}
template<> PROTOBUF_NOINLINE ::onebot::GroupMessageEvent* Arena::CreateMaybeMessage< ::onebot::GroupMessageEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onebot::GroupMessageEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::onebot::GroupUploadNoticeEvent_File* Arena::CreateMaybeMessage< ::onebot::GroupUploadNoticeEvent_File >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onebot::GroupUploadNoticeEvent_File >(arena);
}
template<> PROTOBUF_NOINLINE ::onebot::GroupUploadNoticeEvent* Arena::CreateMaybeMessage< ::onebot::GroupUploadNoticeEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onebot::GroupUploadNoticeEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::onebot::GroupAdminNoticeEvent* Arena::CreateMaybeMessage< ::onebot::GroupAdminNoticeEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onebot::GroupAdminNoticeEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::onebot::GroupDecreaseNoticeEvent* Arena::CreateMaybeMessage< ::onebot::GroupDecreaseNoticeEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onebot::GroupDecreaseNoticeEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::onebot::GroupIncreaseNoticeEvent* Arena::CreateMaybeMessage< ::onebot::GroupIncreaseNoticeEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onebot::GroupIncreaseNoticeEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::onebot::GroupBanNoticeEvent* Arena::CreateMaybeMessage< ::onebot::GroupBanNoticeEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onebot::GroupBanNoticeEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::onebot::FriendAddNoticeEvent* Arena::CreateMaybeMessage< ::onebot::FriendAddNoticeEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onebot::FriendAddNoticeEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::onebot::GroupRecallNoticeEvent* Arena::CreateMaybeMessage< ::onebot::GroupRecallNoticeEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onebot::GroupRecallNoticeEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::onebot::FriendRecallNoticeEvent* Arena::CreateMaybeMessage< ::onebot::FriendRecallNoticeEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onebot::FriendRecallNoticeEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::onebot::FriendRequestEvent* Arena::CreateMaybeMessage< ::onebot::FriendRequestEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onebot::FriendRequestEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::onebot::GroupRequestEvent* Arena::CreateMaybeMessage< ::onebot::GroupRequestEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onebot::GroupRequestEvent >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
