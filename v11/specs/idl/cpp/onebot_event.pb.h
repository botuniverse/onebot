// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: onebot_event.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_onebot_5fevent_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_onebot_5fevent_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "onebot_base.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_onebot_5fevent_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_onebot_5fevent_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[20]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_onebot_5fevent_2eproto;
namespace onebot {
class BaseEvent;
class BaseEventDefaultTypeInternal;
extern BaseEventDefaultTypeInternal _BaseEvent_default_instance_;
class BaseMessageEvent;
class BaseMessageEventDefaultTypeInternal;
extern BaseMessageEventDefaultTypeInternal _BaseMessageEvent_default_instance_;
class BaseNoticeEvent;
class BaseNoticeEventDefaultTypeInternal;
extern BaseNoticeEventDefaultTypeInternal _BaseNoticeEvent_default_instance_;
class BaseRequestEvent;
class BaseRequestEventDefaultTypeInternal;
extern BaseRequestEventDefaultTypeInternal _BaseRequestEvent_default_instance_;
class FriendAddNoticeEvent;
class FriendAddNoticeEventDefaultTypeInternal;
extern FriendAddNoticeEventDefaultTypeInternal _FriendAddNoticeEvent_default_instance_;
class FriendRecallNoticeEvent;
class FriendRecallNoticeEventDefaultTypeInternal;
extern FriendRecallNoticeEventDefaultTypeInternal _FriendRecallNoticeEvent_default_instance_;
class FriendRequestEvent;
class FriendRequestEventDefaultTypeInternal;
extern FriendRequestEventDefaultTypeInternal _FriendRequestEvent_default_instance_;
class GroupAdminNoticeEvent;
class GroupAdminNoticeEventDefaultTypeInternal;
extern GroupAdminNoticeEventDefaultTypeInternal _GroupAdminNoticeEvent_default_instance_;
class GroupBanNoticeEvent;
class GroupBanNoticeEventDefaultTypeInternal;
extern GroupBanNoticeEventDefaultTypeInternal _GroupBanNoticeEvent_default_instance_;
class GroupDecreaseNoticeEvent;
class GroupDecreaseNoticeEventDefaultTypeInternal;
extern GroupDecreaseNoticeEventDefaultTypeInternal _GroupDecreaseNoticeEvent_default_instance_;
class GroupIncreaseNoticeEvent;
class GroupIncreaseNoticeEventDefaultTypeInternal;
extern GroupIncreaseNoticeEventDefaultTypeInternal _GroupIncreaseNoticeEvent_default_instance_;
class GroupMessageEvent;
class GroupMessageEventDefaultTypeInternal;
extern GroupMessageEventDefaultTypeInternal _GroupMessageEvent_default_instance_;
class GroupMessageEvent_Anonymous;
class GroupMessageEvent_AnonymousDefaultTypeInternal;
extern GroupMessageEvent_AnonymousDefaultTypeInternal _GroupMessageEvent_Anonymous_default_instance_;
class GroupMessageEvent_Sender;
class GroupMessageEvent_SenderDefaultTypeInternal;
extern GroupMessageEvent_SenderDefaultTypeInternal _GroupMessageEvent_Sender_default_instance_;
class GroupRecallNoticeEvent;
class GroupRecallNoticeEventDefaultTypeInternal;
extern GroupRecallNoticeEventDefaultTypeInternal _GroupRecallNoticeEvent_default_instance_;
class GroupRequestEvent;
class GroupRequestEventDefaultTypeInternal;
extern GroupRequestEventDefaultTypeInternal _GroupRequestEvent_default_instance_;
class GroupUploadNoticeEvent;
class GroupUploadNoticeEventDefaultTypeInternal;
extern GroupUploadNoticeEventDefaultTypeInternal _GroupUploadNoticeEvent_default_instance_;
class GroupUploadNoticeEvent_File;
class GroupUploadNoticeEvent_FileDefaultTypeInternal;
extern GroupUploadNoticeEvent_FileDefaultTypeInternal _GroupUploadNoticeEvent_File_default_instance_;
class PrivateMessageEvent;
class PrivateMessageEventDefaultTypeInternal;
extern PrivateMessageEventDefaultTypeInternal _PrivateMessageEvent_default_instance_;
class PrivateMessageEvent_Sender;
class PrivateMessageEvent_SenderDefaultTypeInternal;
extern PrivateMessageEvent_SenderDefaultTypeInternal _PrivateMessageEvent_Sender_default_instance_;
}  // namespace onebot
PROTOBUF_NAMESPACE_OPEN
template<> ::onebot::BaseEvent* Arena::CreateMaybeMessage<::onebot::BaseEvent>(Arena*);
template<> ::onebot::BaseMessageEvent* Arena::CreateMaybeMessage<::onebot::BaseMessageEvent>(Arena*);
template<> ::onebot::BaseNoticeEvent* Arena::CreateMaybeMessage<::onebot::BaseNoticeEvent>(Arena*);
template<> ::onebot::BaseRequestEvent* Arena::CreateMaybeMessage<::onebot::BaseRequestEvent>(Arena*);
template<> ::onebot::FriendAddNoticeEvent* Arena::CreateMaybeMessage<::onebot::FriendAddNoticeEvent>(Arena*);
template<> ::onebot::FriendRecallNoticeEvent* Arena::CreateMaybeMessage<::onebot::FriendRecallNoticeEvent>(Arena*);
template<> ::onebot::FriendRequestEvent* Arena::CreateMaybeMessage<::onebot::FriendRequestEvent>(Arena*);
template<> ::onebot::GroupAdminNoticeEvent* Arena::CreateMaybeMessage<::onebot::GroupAdminNoticeEvent>(Arena*);
template<> ::onebot::GroupBanNoticeEvent* Arena::CreateMaybeMessage<::onebot::GroupBanNoticeEvent>(Arena*);
template<> ::onebot::GroupDecreaseNoticeEvent* Arena::CreateMaybeMessage<::onebot::GroupDecreaseNoticeEvent>(Arena*);
template<> ::onebot::GroupIncreaseNoticeEvent* Arena::CreateMaybeMessage<::onebot::GroupIncreaseNoticeEvent>(Arena*);
template<> ::onebot::GroupMessageEvent* Arena::CreateMaybeMessage<::onebot::GroupMessageEvent>(Arena*);
template<> ::onebot::GroupMessageEvent_Anonymous* Arena::CreateMaybeMessage<::onebot::GroupMessageEvent_Anonymous>(Arena*);
template<> ::onebot::GroupMessageEvent_Sender* Arena::CreateMaybeMessage<::onebot::GroupMessageEvent_Sender>(Arena*);
template<> ::onebot::GroupRecallNoticeEvent* Arena::CreateMaybeMessage<::onebot::GroupRecallNoticeEvent>(Arena*);
template<> ::onebot::GroupRequestEvent* Arena::CreateMaybeMessage<::onebot::GroupRequestEvent>(Arena*);
template<> ::onebot::GroupUploadNoticeEvent* Arena::CreateMaybeMessage<::onebot::GroupUploadNoticeEvent>(Arena*);
template<> ::onebot::GroupUploadNoticeEvent_File* Arena::CreateMaybeMessage<::onebot::GroupUploadNoticeEvent_File>(Arena*);
template<> ::onebot::PrivateMessageEvent* Arena::CreateMaybeMessage<::onebot::PrivateMessageEvent>(Arena*);
template<> ::onebot::PrivateMessageEvent_Sender* Arena::CreateMaybeMessage<::onebot::PrivateMessageEvent_Sender>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace onebot {

// ===================================================================

class BaseEvent PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onebot.BaseEvent) */ {
 public:
  inline BaseEvent() : BaseEvent(nullptr) {};
  virtual ~BaseEvent();

  BaseEvent(const BaseEvent& from);
  BaseEvent(BaseEvent&& from) noexcept
    : BaseEvent() {
    *this = ::std::move(from);
  }

  inline BaseEvent& operator=(const BaseEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline BaseEvent& operator=(BaseEvent&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BaseEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BaseEvent* internal_default_instance() {
    return reinterpret_cast<const BaseEvent*>(
               &_BaseEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BaseEvent& a, BaseEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(BaseEvent* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BaseEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BaseEvent* New() const final {
    return CreateMaybeMessage<BaseEvent>(nullptr);
  }

  BaseEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BaseEvent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BaseEvent& from);
  void MergeFrom(const BaseEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BaseEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onebot.BaseEvent";
  }
  protected:
  explicit BaseEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_onebot_5fevent_2eproto);
    return ::descriptor_table_onebot_5fevent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPostTypeFieldNumber = 3,
    kTimeFieldNumber = 1,
    kSelfIdFieldNumber = 2,
  };
  // string post_type = 3;
  void clear_post_type();
  const std::string& post_type() const;
  void set_post_type(const std::string& value);
  void set_post_type(std::string&& value);
  void set_post_type(const char* value);
  void set_post_type(const char* value, size_t size);
  std::string* mutable_post_type();
  std::string* release_post_type();
  void set_allocated_post_type(std::string* post_type);
  private:
  const std::string& _internal_post_type() const;
  void _internal_set_post_type(const std::string& value);
  std::string* _internal_mutable_post_type();
  public:

  // int64 time = 1;
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::int64 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 self_id = 2;
  void clear_self_id();
  ::PROTOBUF_NAMESPACE_ID::int64 self_id() const;
  void set_self_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_self_id() const;
  void _internal_set_self_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:onebot.BaseEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr post_type_;
  ::PROTOBUF_NAMESPACE_ID::int64 time_;
  ::PROTOBUF_NAMESPACE_ID::int64 self_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onebot_5fevent_2eproto;
};
// -------------------------------------------------------------------

class BaseMessageEvent PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onebot.BaseMessageEvent) */ {
 public:
  inline BaseMessageEvent() : BaseMessageEvent(nullptr) {};
  virtual ~BaseMessageEvent();

  BaseMessageEvent(const BaseMessageEvent& from);
  BaseMessageEvent(BaseMessageEvent&& from) noexcept
    : BaseMessageEvent() {
    *this = ::std::move(from);
  }

  inline BaseMessageEvent& operator=(const BaseMessageEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline BaseMessageEvent& operator=(BaseMessageEvent&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BaseMessageEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BaseMessageEvent* internal_default_instance() {
    return reinterpret_cast<const BaseMessageEvent*>(
               &_BaseMessageEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BaseMessageEvent& a, BaseMessageEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(BaseMessageEvent* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BaseMessageEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BaseMessageEvent* New() const final {
    return CreateMaybeMessage<BaseMessageEvent>(nullptr);
  }

  BaseMessageEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BaseMessageEvent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BaseMessageEvent& from);
  void MergeFrom(const BaseMessageEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BaseMessageEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onebot.BaseMessageEvent";
  }
  protected:
  explicit BaseMessageEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_onebot_5fevent_2eproto);
    return ::descriptor_table_onebot_5fevent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPostTypeFieldNumber = 3,
    kMessageTypeFieldNumber = 4,
    kTimeFieldNumber = 1,
    kSelfIdFieldNumber = 2,
  };
  // string post_type = 3;
  void clear_post_type();
  const std::string& post_type() const;
  void set_post_type(const std::string& value);
  void set_post_type(std::string&& value);
  void set_post_type(const char* value);
  void set_post_type(const char* value, size_t size);
  std::string* mutable_post_type();
  std::string* release_post_type();
  void set_allocated_post_type(std::string* post_type);
  private:
  const std::string& _internal_post_type() const;
  void _internal_set_post_type(const std::string& value);
  std::string* _internal_mutable_post_type();
  public:

  // string message_type = 4;
  void clear_message_type();
  const std::string& message_type() const;
  void set_message_type(const std::string& value);
  void set_message_type(std::string&& value);
  void set_message_type(const char* value);
  void set_message_type(const char* value, size_t size);
  std::string* mutable_message_type();
  std::string* release_message_type();
  void set_allocated_message_type(std::string* message_type);
  private:
  const std::string& _internal_message_type() const;
  void _internal_set_message_type(const std::string& value);
  std::string* _internal_mutable_message_type();
  public:

  // int64 time = 1;
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::int64 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 self_id = 2;
  void clear_self_id();
  ::PROTOBUF_NAMESPACE_ID::int64 self_id() const;
  void set_self_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_self_id() const;
  void _internal_set_self_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:onebot.BaseMessageEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr post_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_type_;
  ::PROTOBUF_NAMESPACE_ID::int64 time_;
  ::PROTOBUF_NAMESPACE_ID::int64 self_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onebot_5fevent_2eproto;
};
// -------------------------------------------------------------------

class BaseNoticeEvent PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onebot.BaseNoticeEvent) */ {
 public:
  inline BaseNoticeEvent() : BaseNoticeEvent(nullptr) {};
  virtual ~BaseNoticeEvent();

  BaseNoticeEvent(const BaseNoticeEvent& from);
  BaseNoticeEvent(BaseNoticeEvent&& from) noexcept
    : BaseNoticeEvent() {
    *this = ::std::move(from);
  }

  inline BaseNoticeEvent& operator=(const BaseNoticeEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline BaseNoticeEvent& operator=(BaseNoticeEvent&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BaseNoticeEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BaseNoticeEvent* internal_default_instance() {
    return reinterpret_cast<const BaseNoticeEvent*>(
               &_BaseNoticeEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(BaseNoticeEvent& a, BaseNoticeEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(BaseNoticeEvent* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BaseNoticeEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BaseNoticeEvent* New() const final {
    return CreateMaybeMessage<BaseNoticeEvent>(nullptr);
  }

  BaseNoticeEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BaseNoticeEvent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BaseNoticeEvent& from);
  void MergeFrom(const BaseNoticeEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BaseNoticeEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onebot.BaseNoticeEvent";
  }
  protected:
  explicit BaseNoticeEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_onebot_5fevent_2eproto);
    return ::descriptor_table_onebot_5fevent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPostTypeFieldNumber = 3,
    kNoticeTypeFieldNumber = 4,
    kTimeFieldNumber = 1,
    kSelfIdFieldNumber = 2,
  };
  // string post_type = 3;
  void clear_post_type();
  const std::string& post_type() const;
  void set_post_type(const std::string& value);
  void set_post_type(std::string&& value);
  void set_post_type(const char* value);
  void set_post_type(const char* value, size_t size);
  std::string* mutable_post_type();
  std::string* release_post_type();
  void set_allocated_post_type(std::string* post_type);
  private:
  const std::string& _internal_post_type() const;
  void _internal_set_post_type(const std::string& value);
  std::string* _internal_mutable_post_type();
  public:

  // string notice_type = 4;
  void clear_notice_type();
  const std::string& notice_type() const;
  void set_notice_type(const std::string& value);
  void set_notice_type(std::string&& value);
  void set_notice_type(const char* value);
  void set_notice_type(const char* value, size_t size);
  std::string* mutable_notice_type();
  std::string* release_notice_type();
  void set_allocated_notice_type(std::string* notice_type);
  private:
  const std::string& _internal_notice_type() const;
  void _internal_set_notice_type(const std::string& value);
  std::string* _internal_mutable_notice_type();
  public:

  // int64 time = 1;
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::int64 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 self_id = 2;
  void clear_self_id();
  ::PROTOBUF_NAMESPACE_ID::int64 self_id() const;
  void set_self_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_self_id() const;
  void _internal_set_self_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:onebot.BaseNoticeEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr post_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr notice_type_;
  ::PROTOBUF_NAMESPACE_ID::int64 time_;
  ::PROTOBUF_NAMESPACE_ID::int64 self_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onebot_5fevent_2eproto;
};
// -------------------------------------------------------------------

class BaseRequestEvent PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onebot.BaseRequestEvent) */ {
 public:
  inline BaseRequestEvent() : BaseRequestEvent(nullptr) {};
  virtual ~BaseRequestEvent();

  BaseRequestEvent(const BaseRequestEvent& from);
  BaseRequestEvent(BaseRequestEvent&& from) noexcept
    : BaseRequestEvent() {
    *this = ::std::move(from);
  }

  inline BaseRequestEvent& operator=(const BaseRequestEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline BaseRequestEvent& operator=(BaseRequestEvent&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BaseRequestEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BaseRequestEvent* internal_default_instance() {
    return reinterpret_cast<const BaseRequestEvent*>(
               &_BaseRequestEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(BaseRequestEvent& a, BaseRequestEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(BaseRequestEvent* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BaseRequestEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BaseRequestEvent* New() const final {
    return CreateMaybeMessage<BaseRequestEvent>(nullptr);
  }

  BaseRequestEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BaseRequestEvent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BaseRequestEvent& from);
  void MergeFrom(const BaseRequestEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BaseRequestEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onebot.BaseRequestEvent";
  }
  protected:
  explicit BaseRequestEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_onebot_5fevent_2eproto);
    return ::descriptor_table_onebot_5fevent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPostTypeFieldNumber = 3,
    kNoticeTypeFieldNumber = 4,
    kTimeFieldNumber = 1,
    kSelfIdFieldNumber = 2,
  };
  // string post_type = 3;
  void clear_post_type();
  const std::string& post_type() const;
  void set_post_type(const std::string& value);
  void set_post_type(std::string&& value);
  void set_post_type(const char* value);
  void set_post_type(const char* value, size_t size);
  std::string* mutable_post_type();
  std::string* release_post_type();
  void set_allocated_post_type(std::string* post_type);
  private:
  const std::string& _internal_post_type() const;
  void _internal_set_post_type(const std::string& value);
  std::string* _internal_mutable_post_type();
  public:

  // string notice_type = 4;
  void clear_notice_type();
  const std::string& notice_type() const;
  void set_notice_type(const std::string& value);
  void set_notice_type(std::string&& value);
  void set_notice_type(const char* value);
  void set_notice_type(const char* value, size_t size);
  std::string* mutable_notice_type();
  std::string* release_notice_type();
  void set_allocated_notice_type(std::string* notice_type);
  private:
  const std::string& _internal_notice_type() const;
  void _internal_set_notice_type(const std::string& value);
  std::string* _internal_mutable_notice_type();
  public:

  // int64 time = 1;
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::int64 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 self_id = 2;
  void clear_self_id();
  ::PROTOBUF_NAMESPACE_ID::int64 self_id() const;
  void set_self_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_self_id() const;
  void _internal_set_self_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:onebot.BaseRequestEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr post_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr notice_type_;
  ::PROTOBUF_NAMESPACE_ID::int64 time_;
  ::PROTOBUF_NAMESPACE_ID::int64 self_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onebot_5fevent_2eproto;
};
// -------------------------------------------------------------------

class PrivateMessageEvent_Sender PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onebot.PrivateMessageEvent.Sender) */ {
 public:
  inline PrivateMessageEvent_Sender() : PrivateMessageEvent_Sender(nullptr) {};
  virtual ~PrivateMessageEvent_Sender();

  PrivateMessageEvent_Sender(const PrivateMessageEvent_Sender& from);
  PrivateMessageEvent_Sender(PrivateMessageEvent_Sender&& from) noexcept
    : PrivateMessageEvent_Sender() {
    *this = ::std::move(from);
  }

  inline PrivateMessageEvent_Sender& operator=(const PrivateMessageEvent_Sender& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrivateMessageEvent_Sender& operator=(PrivateMessageEvent_Sender&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PrivateMessageEvent_Sender& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PrivateMessageEvent_Sender* internal_default_instance() {
    return reinterpret_cast<const PrivateMessageEvent_Sender*>(
               &_PrivateMessageEvent_Sender_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PrivateMessageEvent_Sender& a, PrivateMessageEvent_Sender& b) {
    a.Swap(&b);
  }
  inline void Swap(PrivateMessageEvent_Sender* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PrivateMessageEvent_Sender* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PrivateMessageEvent_Sender* New() const final {
    return CreateMaybeMessage<PrivateMessageEvent_Sender>(nullptr);
  }

  PrivateMessageEvent_Sender* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PrivateMessageEvent_Sender>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PrivateMessageEvent_Sender& from);
  void MergeFrom(const PrivateMessageEvent_Sender& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrivateMessageEvent_Sender* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onebot.PrivateMessageEvent.Sender";
  }
  protected:
  explicit PrivateMessageEvent_Sender(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_onebot_5fevent_2eproto);
    return ::descriptor_table_onebot_5fevent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNicknameFieldNumber = 2,
    kSexFieldNumber = 3,
    kUserIdFieldNumber = 1,
    kAgeFieldNumber = 4,
  };
  // string nickname = 2;
  void clear_nickname();
  const std::string& nickname() const;
  void set_nickname(const std::string& value);
  void set_nickname(std::string&& value);
  void set_nickname(const char* value);
  void set_nickname(const char* value, size_t size);
  std::string* mutable_nickname();
  std::string* release_nickname();
  void set_allocated_nickname(std::string* nickname);
  private:
  const std::string& _internal_nickname() const;
  void _internal_set_nickname(const std::string& value);
  std::string* _internal_mutable_nickname();
  public:

  // string sex = 3;
  void clear_sex();
  const std::string& sex() const;
  void set_sex(const std::string& value);
  void set_sex(std::string&& value);
  void set_sex(const char* value);
  void set_sex(const char* value, size_t size);
  std::string* mutable_sex();
  std::string* release_sex();
  void set_allocated_sex(std::string* sex);
  private:
  const std::string& _internal_sex() const;
  void _internal_set_sex(const std::string& value);
  std::string* _internal_mutable_sex();
  public:

  // int64 user_id = 1;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::int64 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 age = 4;
  void clear_age();
  ::PROTOBUF_NAMESPACE_ID::int32 age() const;
  void set_age(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_age() const;
  void _internal_set_age(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:onebot.PrivateMessageEvent.Sender)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nickname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sex_;
  ::PROTOBUF_NAMESPACE_ID::int64 user_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 age_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onebot_5fevent_2eproto;
};
// -------------------------------------------------------------------

class PrivateMessageEvent PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onebot.PrivateMessageEvent) */ {
 public:
  inline PrivateMessageEvent() : PrivateMessageEvent(nullptr) {};
  virtual ~PrivateMessageEvent();

  PrivateMessageEvent(const PrivateMessageEvent& from);
  PrivateMessageEvent(PrivateMessageEvent&& from) noexcept
    : PrivateMessageEvent() {
    *this = ::std::move(from);
  }

  inline PrivateMessageEvent& operator=(const PrivateMessageEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrivateMessageEvent& operator=(PrivateMessageEvent&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PrivateMessageEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PrivateMessageEvent* internal_default_instance() {
    return reinterpret_cast<const PrivateMessageEvent*>(
               &_PrivateMessageEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(PrivateMessageEvent& a, PrivateMessageEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(PrivateMessageEvent* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PrivateMessageEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PrivateMessageEvent* New() const final {
    return CreateMaybeMessage<PrivateMessageEvent>(nullptr);
  }

  PrivateMessageEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PrivateMessageEvent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PrivateMessageEvent& from);
  void MergeFrom(const PrivateMessageEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrivateMessageEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onebot.PrivateMessageEvent";
  }
  protected:
  explicit PrivateMessageEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_onebot_5fevent_2eproto);
    return ::descriptor_table_onebot_5fevent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef PrivateMessageEvent_Sender Sender;

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 8,
    kPostTypeFieldNumber = 3,
    kMessageTypeFieldNumber = 4,
    kSubTypeFieldNumber = 5,
    kRawMessageFieldNumber = 9,
    kSenderFieldNumber = 11,
    kTimeFieldNumber = 1,
    kSelfIdFieldNumber = 2,
    kUserIdFieldNumber = 7,
    kMessageIdFieldNumber = 6,
    kFontFieldNumber = 10,
  };
  // repeated .onebot.Message message = 8;
  int message_size() const;
  private:
  int _internal_message_size() const;
  public:
  void clear_message();
  ::onebot::Message* mutable_message(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onebot::Message >*
      mutable_message();
  private:
  const ::onebot::Message& _internal_message(int index) const;
  ::onebot::Message* _internal_add_message();
  public:
  const ::onebot::Message& message(int index) const;
  ::onebot::Message* add_message();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onebot::Message >&
      message() const;

  // string post_type = 3;
  void clear_post_type();
  const std::string& post_type() const;
  void set_post_type(const std::string& value);
  void set_post_type(std::string&& value);
  void set_post_type(const char* value);
  void set_post_type(const char* value, size_t size);
  std::string* mutable_post_type();
  std::string* release_post_type();
  void set_allocated_post_type(std::string* post_type);
  private:
  const std::string& _internal_post_type() const;
  void _internal_set_post_type(const std::string& value);
  std::string* _internal_mutable_post_type();
  public:

  // string message_type = 4;
  void clear_message_type();
  const std::string& message_type() const;
  void set_message_type(const std::string& value);
  void set_message_type(std::string&& value);
  void set_message_type(const char* value);
  void set_message_type(const char* value, size_t size);
  std::string* mutable_message_type();
  std::string* release_message_type();
  void set_allocated_message_type(std::string* message_type);
  private:
  const std::string& _internal_message_type() const;
  void _internal_set_message_type(const std::string& value);
  std::string* _internal_mutable_message_type();
  public:

  // string sub_type = 5;
  void clear_sub_type();
  const std::string& sub_type() const;
  void set_sub_type(const std::string& value);
  void set_sub_type(std::string&& value);
  void set_sub_type(const char* value);
  void set_sub_type(const char* value, size_t size);
  std::string* mutable_sub_type();
  std::string* release_sub_type();
  void set_allocated_sub_type(std::string* sub_type);
  private:
  const std::string& _internal_sub_type() const;
  void _internal_set_sub_type(const std::string& value);
  std::string* _internal_mutable_sub_type();
  public:

  // string raw_message = 9;
  void clear_raw_message();
  const std::string& raw_message() const;
  void set_raw_message(const std::string& value);
  void set_raw_message(std::string&& value);
  void set_raw_message(const char* value);
  void set_raw_message(const char* value, size_t size);
  std::string* mutable_raw_message();
  std::string* release_raw_message();
  void set_allocated_raw_message(std::string* raw_message);
  private:
  const std::string& _internal_raw_message() const;
  void _internal_set_raw_message(const std::string& value);
  std::string* _internal_mutable_raw_message();
  public:

  // .onebot.PrivateMessageEvent.Sender sender = 11;
  bool has_sender() const;
  private:
  bool _internal_has_sender() const;
  public:
  void clear_sender();
  const ::onebot::PrivateMessageEvent_Sender& sender() const;
  ::onebot::PrivateMessageEvent_Sender* release_sender();
  ::onebot::PrivateMessageEvent_Sender* mutable_sender();
  void set_allocated_sender(::onebot::PrivateMessageEvent_Sender* sender);
  private:
  const ::onebot::PrivateMessageEvent_Sender& _internal_sender() const;
  ::onebot::PrivateMessageEvent_Sender* _internal_mutable_sender();
  public:
  void unsafe_arena_set_allocated_sender(
      ::onebot::PrivateMessageEvent_Sender* sender);
  ::onebot::PrivateMessageEvent_Sender* unsafe_arena_release_sender();

  // int64 time = 1;
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::int64 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 self_id = 2;
  void clear_self_id();
  ::PROTOBUF_NAMESPACE_ID::int64 self_id() const;
  void set_self_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_self_id() const;
  void _internal_set_self_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 user_id = 7;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::int64 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 message_id = 6;
  void clear_message_id();
  ::PROTOBUF_NAMESPACE_ID::int32 message_id() const;
  void set_message_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_message_id() const;
  void _internal_set_message_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 font = 10;
  void clear_font();
  ::PROTOBUF_NAMESPACE_ID::int32 font() const;
  void set_font(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_font() const;
  void _internal_set_font(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:onebot.PrivateMessageEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onebot::Message > message_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr post_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sub_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr raw_message_;
  ::onebot::PrivateMessageEvent_Sender* sender_;
  ::PROTOBUF_NAMESPACE_ID::int64 time_;
  ::PROTOBUF_NAMESPACE_ID::int64 self_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 user_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 message_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 font_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onebot_5fevent_2eproto;
};
// -------------------------------------------------------------------

class GroupMessageEvent_Anonymous PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onebot.GroupMessageEvent.Anonymous) */ {
 public:
  inline GroupMessageEvent_Anonymous() : GroupMessageEvent_Anonymous(nullptr) {};
  virtual ~GroupMessageEvent_Anonymous();

  GroupMessageEvent_Anonymous(const GroupMessageEvent_Anonymous& from);
  GroupMessageEvent_Anonymous(GroupMessageEvent_Anonymous&& from) noexcept
    : GroupMessageEvent_Anonymous() {
    *this = ::std::move(from);
  }

  inline GroupMessageEvent_Anonymous& operator=(const GroupMessageEvent_Anonymous& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupMessageEvent_Anonymous& operator=(GroupMessageEvent_Anonymous&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GroupMessageEvent_Anonymous& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GroupMessageEvent_Anonymous* internal_default_instance() {
    return reinterpret_cast<const GroupMessageEvent_Anonymous*>(
               &_GroupMessageEvent_Anonymous_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(GroupMessageEvent_Anonymous& a, GroupMessageEvent_Anonymous& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupMessageEvent_Anonymous* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupMessageEvent_Anonymous* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GroupMessageEvent_Anonymous* New() const final {
    return CreateMaybeMessage<GroupMessageEvent_Anonymous>(nullptr);
  }

  GroupMessageEvent_Anonymous* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GroupMessageEvent_Anonymous>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GroupMessageEvent_Anonymous& from);
  void MergeFrom(const GroupMessageEvent_Anonymous& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroupMessageEvent_Anonymous* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onebot.GroupMessageEvent.Anonymous";
  }
  protected:
  explicit GroupMessageEvent_Anonymous(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_onebot_5fevent_2eproto);
    return ::descriptor_table_onebot_5fevent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kFlagFieldNumber = 3,
    kIdFieldNumber = 1,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string flag = 3;
  void clear_flag();
  const std::string& flag() const;
  void set_flag(const std::string& value);
  void set_flag(std::string&& value);
  void set_flag(const char* value);
  void set_flag(const char* value, size_t size);
  std::string* mutable_flag();
  std::string* release_flag();
  void set_allocated_flag(std::string* flag);
  private:
  const std::string& _internal_flag() const;
  void _internal_set_flag(const std::string& value);
  std::string* _internal_mutable_flag();
  public:

  // int64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:onebot.GroupMessageEvent.Anonymous)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr flag_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onebot_5fevent_2eproto;
};
// -------------------------------------------------------------------

class GroupMessageEvent_Sender PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onebot.GroupMessageEvent.Sender) */ {
 public:
  inline GroupMessageEvent_Sender() : GroupMessageEvent_Sender(nullptr) {};
  virtual ~GroupMessageEvent_Sender();

  GroupMessageEvent_Sender(const GroupMessageEvent_Sender& from);
  GroupMessageEvent_Sender(GroupMessageEvent_Sender&& from) noexcept
    : GroupMessageEvent_Sender() {
    *this = ::std::move(from);
  }

  inline GroupMessageEvent_Sender& operator=(const GroupMessageEvent_Sender& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupMessageEvent_Sender& operator=(GroupMessageEvent_Sender&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GroupMessageEvent_Sender& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GroupMessageEvent_Sender* internal_default_instance() {
    return reinterpret_cast<const GroupMessageEvent_Sender*>(
               &_GroupMessageEvent_Sender_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(GroupMessageEvent_Sender& a, GroupMessageEvent_Sender& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupMessageEvent_Sender* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupMessageEvent_Sender* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GroupMessageEvent_Sender* New() const final {
    return CreateMaybeMessage<GroupMessageEvent_Sender>(nullptr);
  }

  GroupMessageEvent_Sender* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GroupMessageEvent_Sender>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GroupMessageEvent_Sender& from);
  void MergeFrom(const GroupMessageEvent_Sender& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroupMessageEvent_Sender* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onebot.GroupMessageEvent.Sender";
  }
  protected:
  explicit GroupMessageEvent_Sender(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_onebot_5fevent_2eproto);
    return ::descriptor_table_onebot_5fevent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNicknameFieldNumber = 2,
    kCardFieldNumber = 3,
    kSexFieldNumber = 4,
    kAreaFieldNumber = 6,
    kLevelFieldNumber = 7,
    kRoleFieldNumber = 8,
    kTitleFieldNumber = 9,
    kUserIdFieldNumber = 1,
    kAgeFieldNumber = 5,
  };
  // string nickname = 2;
  void clear_nickname();
  const std::string& nickname() const;
  void set_nickname(const std::string& value);
  void set_nickname(std::string&& value);
  void set_nickname(const char* value);
  void set_nickname(const char* value, size_t size);
  std::string* mutable_nickname();
  std::string* release_nickname();
  void set_allocated_nickname(std::string* nickname);
  private:
  const std::string& _internal_nickname() const;
  void _internal_set_nickname(const std::string& value);
  std::string* _internal_mutable_nickname();
  public:

  // string card = 3;
  void clear_card();
  const std::string& card() const;
  void set_card(const std::string& value);
  void set_card(std::string&& value);
  void set_card(const char* value);
  void set_card(const char* value, size_t size);
  std::string* mutable_card();
  std::string* release_card();
  void set_allocated_card(std::string* card);
  private:
  const std::string& _internal_card() const;
  void _internal_set_card(const std::string& value);
  std::string* _internal_mutable_card();
  public:

  // string sex = 4;
  void clear_sex();
  const std::string& sex() const;
  void set_sex(const std::string& value);
  void set_sex(std::string&& value);
  void set_sex(const char* value);
  void set_sex(const char* value, size_t size);
  std::string* mutable_sex();
  std::string* release_sex();
  void set_allocated_sex(std::string* sex);
  private:
  const std::string& _internal_sex() const;
  void _internal_set_sex(const std::string& value);
  std::string* _internal_mutable_sex();
  public:

  // string area = 6;
  void clear_area();
  const std::string& area() const;
  void set_area(const std::string& value);
  void set_area(std::string&& value);
  void set_area(const char* value);
  void set_area(const char* value, size_t size);
  std::string* mutable_area();
  std::string* release_area();
  void set_allocated_area(std::string* area);
  private:
  const std::string& _internal_area() const;
  void _internal_set_area(const std::string& value);
  std::string* _internal_mutable_area();
  public:

  // string level = 7;
  void clear_level();
  const std::string& level() const;
  void set_level(const std::string& value);
  void set_level(std::string&& value);
  void set_level(const char* value);
  void set_level(const char* value, size_t size);
  std::string* mutable_level();
  std::string* release_level();
  void set_allocated_level(std::string* level);
  private:
  const std::string& _internal_level() const;
  void _internal_set_level(const std::string& value);
  std::string* _internal_mutable_level();
  public:

  // string role = 8;
  void clear_role();
  const std::string& role() const;
  void set_role(const std::string& value);
  void set_role(std::string&& value);
  void set_role(const char* value);
  void set_role(const char* value, size_t size);
  std::string* mutable_role();
  std::string* release_role();
  void set_allocated_role(std::string* role);
  private:
  const std::string& _internal_role() const;
  void _internal_set_role(const std::string& value);
  std::string* _internal_mutable_role();
  public:

  // string title = 9;
  void clear_title();
  const std::string& title() const;
  void set_title(const std::string& value);
  void set_title(std::string&& value);
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  std::string* mutable_title();
  std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // int64 user_id = 1;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::int64 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 age = 5;
  void clear_age();
  ::PROTOBUF_NAMESPACE_ID::int32 age() const;
  void set_age(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_age() const;
  void _internal_set_age(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:onebot.GroupMessageEvent.Sender)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nickname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr card_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sex_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr area_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr level_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr role_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::PROTOBUF_NAMESPACE_ID::int64 user_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 age_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onebot_5fevent_2eproto;
};
// -------------------------------------------------------------------

class GroupMessageEvent PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onebot.GroupMessageEvent) */ {
 public:
  inline GroupMessageEvent() : GroupMessageEvent(nullptr) {};
  virtual ~GroupMessageEvent();

  GroupMessageEvent(const GroupMessageEvent& from);
  GroupMessageEvent(GroupMessageEvent&& from) noexcept
    : GroupMessageEvent() {
    *this = ::std::move(from);
  }

  inline GroupMessageEvent& operator=(const GroupMessageEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupMessageEvent& operator=(GroupMessageEvent&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GroupMessageEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GroupMessageEvent* internal_default_instance() {
    return reinterpret_cast<const GroupMessageEvent*>(
               &_GroupMessageEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(GroupMessageEvent& a, GroupMessageEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupMessageEvent* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupMessageEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GroupMessageEvent* New() const final {
    return CreateMaybeMessage<GroupMessageEvent>(nullptr);
  }

  GroupMessageEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GroupMessageEvent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GroupMessageEvent& from);
  void MergeFrom(const GroupMessageEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroupMessageEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onebot.GroupMessageEvent";
  }
  protected:
  explicit GroupMessageEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_onebot_5fevent_2eproto);
    return ::descriptor_table_onebot_5fevent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef GroupMessageEvent_Anonymous Anonymous;
  typedef GroupMessageEvent_Sender Sender;

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 10,
    kPostTypeFieldNumber = 3,
    kMessageTypeFieldNumber = 4,
    kSubTypeFieldNumber = 5,
    kRawMessageFieldNumber = 11,
    kAnonymousFieldNumber = 9,
    kSenderFieldNumber = 13,
    kTimeFieldNumber = 1,
    kSelfIdFieldNumber = 2,
    kGroupIdFieldNumber = 7,
    kUserIdFieldNumber = 8,
    kMessageIdFieldNumber = 6,
    kFontFieldNumber = 12,
  };
  // repeated .onebot.Message message = 10;
  int message_size() const;
  private:
  int _internal_message_size() const;
  public:
  void clear_message();
  ::onebot::Message* mutable_message(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onebot::Message >*
      mutable_message();
  private:
  const ::onebot::Message& _internal_message(int index) const;
  ::onebot::Message* _internal_add_message();
  public:
  const ::onebot::Message& message(int index) const;
  ::onebot::Message* add_message();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onebot::Message >&
      message() const;

  // string post_type = 3;
  void clear_post_type();
  const std::string& post_type() const;
  void set_post_type(const std::string& value);
  void set_post_type(std::string&& value);
  void set_post_type(const char* value);
  void set_post_type(const char* value, size_t size);
  std::string* mutable_post_type();
  std::string* release_post_type();
  void set_allocated_post_type(std::string* post_type);
  private:
  const std::string& _internal_post_type() const;
  void _internal_set_post_type(const std::string& value);
  std::string* _internal_mutable_post_type();
  public:

  // string message_type = 4;
  void clear_message_type();
  const std::string& message_type() const;
  void set_message_type(const std::string& value);
  void set_message_type(std::string&& value);
  void set_message_type(const char* value);
  void set_message_type(const char* value, size_t size);
  std::string* mutable_message_type();
  std::string* release_message_type();
  void set_allocated_message_type(std::string* message_type);
  private:
  const std::string& _internal_message_type() const;
  void _internal_set_message_type(const std::string& value);
  std::string* _internal_mutable_message_type();
  public:

  // string sub_type = 5;
  void clear_sub_type();
  const std::string& sub_type() const;
  void set_sub_type(const std::string& value);
  void set_sub_type(std::string&& value);
  void set_sub_type(const char* value);
  void set_sub_type(const char* value, size_t size);
  std::string* mutable_sub_type();
  std::string* release_sub_type();
  void set_allocated_sub_type(std::string* sub_type);
  private:
  const std::string& _internal_sub_type() const;
  void _internal_set_sub_type(const std::string& value);
  std::string* _internal_mutable_sub_type();
  public:

  // string raw_message = 11;
  void clear_raw_message();
  const std::string& raw_message() const;
  void set_raw_message(const std::string& value);
  void set_raw_message(std::string&& value);
  void set_raw_message(const char* value);
  void set_raw_message(const char* value, size_t size);
  std::string* mutable_raw_message();
  std::string* release_raw_message();
  void set_allocated_raw_message(std::string* raw_message);
  private:
  const std::string& _internal_raw_message() const;
  void _internal_set_raw_message(const std::string& value);
  std::string* _internal_mutable_raw_message();
  public:

  // .onebot.GroupMessageEvent.Anonymous anonymous = 9;
  bool has_anonymous() const;
  private:
  bool _internal_has_anonymous() const;
  public:
  void clear_anonymous();
  const ::onebot::GroupMessageEvent_Anonymous& anonymous() const;
  ::onebot::GroupMessageEvent_Anonymous* release_anonymous();
  ::onebot::GroupMessageEvent_Anonymous* mutable_anonymous();
  void set_allocated_anonymous(::onebot::GroupMessageEvent_Anonymous* anonymous);
  private:
  const ::onebot::GroupMessageEvent_Anonymous& _internal_anonymous() const;
  ::onebot::GroupMessageEvent_Anonymous* _internal_mutable_anonymous();
  public:
  void unsafe_arena_set_allocated_anonymous(
      ::onebot::GroupMessageEvent_Anonymous* anonymous);
  ::onebot::GroupMessageEvent_Anonymous* unsafe_arena_release_anonymous();

  // .onebot.GroupMessageEvent.Sender sender = 13;
  bool has_sender() const;
  private:
  bool _internal_has_sender() const;
  public:
  void clear_sender();
  const ::onebot::GroupMessageEvent_Sender& sender() const;
  ::onebot::GroupMessageEvent_Sender* release_sender();
  ::onebot::GroupMessageEvent_Sender* mutable_sender();
  void set_allocated_sender(::onebot::GroupMessageEvent_Sender* sender);
  private:
  const ::onebot::GroupMessageEvent_Sender& _internal_sender() const;
  ::onebot::GroupMessageEvent_Sender* _internal_mutable_sender();
  public:
  void unsafe_arena_set_allocated_sender(
      ::onebot::GroupMessageEvent_Sender* sender);
  ::onebot::GroupMessageEvent_Sender* unsafe_arena_release_sender();

  // int64 time = 1;
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::int64 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 self_id = 2;
  void clear_self_id();
  ::PROTOBUF_NAMESPACE_ID::int64 self_id() const;
  void set_self_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_self_id() const;
  void _internal_set_self_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 group_id = 7;
  void clear_group_id();
  ::PROTOBUF_NAMESPACE_ID::int64 group_id() const;
  void set_group_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_group_id() const;
  void _internal_set_group_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 user_id = 8;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::int64 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 message_id = 6;
  void clear_message_id();
  ::PROTOBUF_NAMESPACE_ID::int32 message_id() const;
  void set_message_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_message_id() const;
  void _internal_set_message_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 font = 12;
  void clear_font();
  ::PROTOBUF_NAMESPACE_ID::int32 font() const;
  void set_font(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_font() const;
  void _internal_set_font(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:onebot.GroupMessageEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onebot::Message > message_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr post_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sub_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr raw_message_;
  ::onebot::GroupMessageEvent_Anonymous* anonymous_;
  ::onebot::GroupMessageEvent_Sender* sender_;
  ::PROTOBUF_NAMESPACE_ID::int64 time_;
  ::PROTOBUF_NAMESPACE_ID::int64 self_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 group_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 user_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 message_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 font_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onebot_5fevent_2eproto;
};
// -------------------------------------------------------------------

class GroupUploadNoticeEvent_File PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onebot.GroupUploadNoticeEvent.File) */ {
 public:
  inline GroupUploadNoticeEvent_File() : GroupUploadNoticeEvent_File(nullptr) {};
  virtual ~GroupUploadNoticeEvent_File();

  GroupUploadNoticeEvent_File(const GroupUploadNoticeEvent_File& from);
  GroupUploadNoticeEvent_File(GroupUploadNoticeEvent_File&& from) noexcept
    : GroupUploadNoticeEvent_File() {
    *this = ::std::move(from);
  }

  inline GroupUploadNoticeEvent_File& operator=(const GroupUploadNoticeEvent_File& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupUploadNoticeEvent_File& operator=(GroupUploadNoticeEvent_File&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GroupUploadNoticeEvent_File& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GroupUploadNoticeEvent_File* internal_default_instance() {
    return reinterpret_cast<const GroupUploadNoticeEvent_File*>(
               &_GroupUploadNoticeEvent_File_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(GroupUploadNoticeEvent_File& a, GroupUploadNoticeEvent_File& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupUploadNoticeEvent_File* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupUploadNoticeEvent_File* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GroupUploadNoticeEvent_File* New() const final {
    return CreateMaybeMessage<GroupUploadNoticeEvent_File>(nullptr);
  }

  GroupUploadNoticeEvent_File* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GroupUploadNoticeEvent_File>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GroupUploadNoticeEvent_File& from);
  void MergeFrom(const GroupUploadNoticeEvent_File& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroupUploadNoticeEvent_File* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onebot.GroupUploadNoticeEvent.File";
  }
  protected:
  explicit GroupUploadNoticeEvent_File(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_onebot_5fevent_2eproto);
    return ::descriptor_table_onebot_5fevent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kSizeFieldNumber = 3,
    kBusidFieldNumber = 4,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int64 size = 3;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::int64 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 busid = 4;
  void clear_busid();
  ::PROTOBUF_NAMESPACE_ID::int64 busid() const;
  void set_busid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_busid() const;
  void _internal_set_busid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:onebot.GroupUploadNoticeEvent.File)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int64 size_;
  ::PROTOBUF_NAMESPACE_ID::int64 busid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onebot_5fevent_2eproto;
};
// -------------------------------------------------------------------

class GroupUploadNoticeEvent PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onebot.GroupUploadNoticeEvent) */ {
 public:
  inline GroupUploadNoticeEvent() : GroupUploadNoticeEvent(nullptr) {};
  virtual ~GroupUploadNoticeEvent();

  GroupUploadNoticeEvent(const GroupUploadNoticeEvent& from);
  GroupUploadNoticeEvent(GroupUploadNoticeEvent&& from) noexcept
    : GroupUploadNoticeEvent() {
    *this = ::std::move(from);
  }

  inline GroupUploadNoticeEvent& operator=(const GroupUploadNoticeEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupUploadNoticeEvent& operator=(GroupUploadNoticeEvent&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GroupUploadNoticeEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GroupUploadNoticeEvent* internal_default_instance() {
    return reinterpret_cast<const GroupUploadNoticeEvent*>(
               &_GroupUploadNoticeEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(GroupUploadNoticeEvent& a, GroupUploadNoticeEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupUploadNoticeEvent* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupUploadNoticeEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GroupUploadNoticeEvent* New() const final {
    return CreateMaybeMessage<GroupUploadNoticeEvent>(nullptr);
  }

  GroupUploadNoticeEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GroupUploadNoticeEvent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GroupUploadNoticeEvent& from);
  void MergeFrom(const GroupUploadNoticeEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroupUploadNoticeEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onebot.GroupUploadNoticeEvent";
  }
  protected:
  explicit GroupUploadNoticeEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_onebot_5fevent_2eproto);
    return ::descriptor_table_onebot_5fevent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef GroupUploadNoticeEvent_File File;

  // accessors -------------------------------------------------------

  enum : int {
    kPostTypeFieldNumber = 3,
    kNoticeTypeFieldNumber = 4,
    kFileFieldNumber = 7,
    kTimeFieldNumber = 1,
    kSelfIdFieldNumber = 2,
    kGroupIdFieldNumber = 5,
    kUserIdFieldNumber = 6,
  };
  // string post_type = 3;
  void clear_post_type();
  const std::string& post_type() const;
  void set_post_type(const std::string& value);
  void set_post_type(std::string&& value);
  void set_post_type(const char* value);
  void set_post_type(const char* value, size_t size);
  std::string* mutable_post_type();
  std::string* release_post_type();
  void set_allocated_post_type(std::string* post_type);
  private:
  const std::string& _internal_post_type() const;
  void _internal_set_post_type(const std::string& value);
  std::string* _internal_mutable_post_type();
  public:

  // string notice_type = 4;
  void clear_notice_type();
  const std::string& notice_type() const;
  void set_notice_type(const std::string& value);
  void set_notice_type(std::string&& value);
  void set_notice_type(const char* value);
  void set_notice_type(const char* value, size_t size);
  std::string* mutable_notice_type();
  std::string* release_notice_type();
  void set_allocated_notice_type(std::string* notice_type);
  private:
  const std::string& _internal_notice_type() const;
  void _internal_set_notice_type(const std::string& value);
  std::string* _internal_mutable_notice_type();
  public:

  // .onebot.GroupUploadNoticeEvent.File file = 7;
  bool has_file() const;
  private:
  bool _internal_has_file() const;
  public:
  void clear_file();
  const ::onebot::GroupUploadNoticeEvent_File& file() const;
  ::onebot::GroupUploadNoticeEvent_File* release_file();
  ::onebot::GroupUploadNoticeEvent_File* mutable_file();
  void set_allocated_file(::onebot::GroupUploadNoticeEvent_File* file);
  private:
  const ::onebot::GroupUploadNoticeEvent_File& _internal_file() const;
  ::onebot::GroupUploadNoticeEvent_File* _internal_mutable_file();
  public:
  void unsafe_arena_set_allocated_file(
      ::onebot::GroupUploadNoticeEvent_File* file);
  ::onebot::GroupUploadNoticeEvent_File* unsafe_arena_release_file();

  // int64 time = 1;
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::int64 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 self_id = 2;
  void clear_self_id();
  ::PROTOBUF_NAMESPACE_ID::int64 self_id() const;
  void set_self_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_self_id() const;
  void _internal_set_self_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 group_id = 5;
  void clear_group_id();
  ::PROTOBUF_NAMESPACE_ID::int64 group_id() const;
  void set_group_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_group_id() const;
  void _internal_set_group_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 user_id = 6;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::int64 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:onebot.GroupUploadNoticeEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr post_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr notice_type_;
  ::onebot::GroupUploadNoticeEvent_File* file_;
  ::PROTOBUF_NAMESPACE_ID::int64 time_;
  ::PROTOBUF_NAMESPACE_ID::int64 self_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 group_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 user_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onebot_5fevent_2eproto;
};
// -------------------------------------------------------------------

class GroupAdminNoticeEvent PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onebot.GroupAdminNoticeEvent) */ {
 public:
  inline GroupAdminNoticeEvent() : GroupAdminNoticeEvent(nullptr) {};
  virtual ~GroupAdminNoticeEvent();

  GroupAdminNoticeEvent(const GroupAdminNoticeEvent& from);
  GroupAdminNoticeEvent(GroupAdminNoticeEvent&& from) noexcept
    : GroupAdminNoticeEvent() {
    *this = ::std::move(from);
  }

  inline GroupAdminNoticeEvent& operator=(const GroupAdminNoticeEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupAdminNoticeEvent& operator=(GroupAdminNoticeEvent&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GroupAdminNoticeEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GroupAdminNoticeEvent* internal_default_instance() {
    return reinterpret_cast<const GroupAdminNoticeEvent*>(
               &_GroupAdminNoticeEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(GroupAdminNoticeEvent& a, GroupAdminNoticeEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupAdminNoticeEvent* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupAdminNoticeEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GroupAdminNoticeEvent* New() const final {
    return CreateMaybeMessage<GroupAdminNoticeEvent>(nullptr);
  }

  GroupAdminNoticeEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GroupAdminNoticeEvent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GroupAdminNoticeEvent& from);
  void MergeFrom(const GroupAdminNoticeEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroupAdminNoticeEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onebot.GroupAdminNoticeEvent";
  }
  protected:
  explicit GroupAdminNoticeEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_onebot_5fevent_2eproto);
    return ::descriptor_table_onebot_5fevent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPostTypeFieldNumber = 3,
    kNoticeTypeFieldNumber = 4,
    kSubTypeFieldNumber = 5,
    kTimeFieldNumber = 1,
    kSelfIdFieldNumber = 2,
    kGroupIdFieldNumber = 6,
    kUserIdFieldNumber = 7,
  };
  // string post_type = 3;
  void clear_post_type();
  const std::string& post_type() const;
  void set_post_type(const std::string& value);
  void set_post_type(std::string&& value);
  void set_post_type(const char* value);
  void set_post_type(const char* value, size_t size);
  std::string* mutable_post_type();
  std::string* release_post_type();
  void set_allocated_post_type(std::string* post_type);
  private:
  const std::string& _internal_post_type() const;
  void _internal_set_post_type(const std::string& value);
  std::string* _internal_mutable_post_type();
  public:

  // string notice_type = 4;
  void clear_notice_type();
  const std::string& notice_type() const;
  void set_notice_type(const std::string& value);
  void set_notice_type(std::string&& value);
  void set_notice_type(const char* value);
  void set_notice_type(const char* value, size_t size);
  std::string* mutable_notice_type();
  std::string* release_notice_type();
  void set_allocated_notice_type(std::string* notice_type);
  private:
  const std::string& _internal_notice_type() const;
  void _internal_set_notice_type(const std::string& value);
  std::string* _internal_mutable_notice_type();
  public:

  // string sub_type = 5;
  void clear_sub_type();
  const std::string& sub_type() const;
  void set_sub_type(const std::string& value);
  void set_sub_type(std::string&& value);
  void set_sub_type(const char* value);
  void set_sub_type(const char* value, size_t size);
  std::string* mutable_sub_type();
  std::string* release_sub_type();
  void set_allocated_sub_type(std::string* sub_type);
  private:
  const std::string& _internal_sub_type() const;
  void _internal_set_sub_type(const std::string& value);
  std::string* _internal_mutable_sub_type();
  public:

  // int64 time = 1;
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::int64 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 self_id = 2;
  void clear_self_id();
  ::PROTOBUF_NAMESPACE_ID::int64 self_id() const;
  void set_self_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_self_id() const;
  void _internal_set_self_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 group_id = 6;
  void clear_group_id();
  ::PROTOBUF_NAMESPACE_ID::int64 group_id() const;
  void set_group_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_group_id() const;
  void _internal_set_group_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 user_id = 7;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::int64 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:onebot.GroupAdminNoticeEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr post_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr notice_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sub_type_;
  ::PROTOBUF_NAMESPACE_ID::int64 time_;
  ::PROTOBUF_NAMESPACE_ID::int64 self_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 group_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 user_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onebot_5fevent_2eproto;
};
// -------------------------------------------------------------------

class GroupDecreaseNoticeEvent PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onebot.GroupDecreaseNoticeEvent) */ {
 public:
  inline GroupDecreaseNoticeEvent() : GroupDecreaseNoticeEvent(nullptr) {};
  virtual ~GroupDecreaseNoticeEvent();

  GroupDecreaseNoticeEvent(const GroupDecreaseNoticeEvent& from);
  GroupDecreaseNoticeEvent(GroupDecreaseNoticeEvent&& from) noexcept
    : GroupDecreaseNoticeEvent() {
    *this = ::std::move(from);
  }

  inline GroupDecreaseNoticeEvent& operator=(const GroupDecreaseNoticeEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupDecreaseNoticeEvent& operator=(GroupDecreaseNoticeEvent&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GroupDecreaseNoticeEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GroupDecreaseNoticeEvent* internal_default_instance() {
    return reinterpret_cast<const GroupDecreaseNoticeEvent*>(
               &_GroupDecreaseNoticeEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(GroupDecreaseNoticeEvent& a, GroupDecreaseNoticeEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupDecreaseNoticeEvent* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupDecreaseNoticeEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GroupDecreaseNoticeEvent* New() const final {
    return CreateMaybeMessage<GroupDecreaseNoticeEvent>(nullptr);
  }

  GroupDecreaseNoticeEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GroupDecreaseNoticeEvent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GroupDecreaseNoticeEvent& from);
  void MergeFrom(const GroupDecreaseNoticeEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroupDecreaseNoticeEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onebot.GroupDecreaseNoticeEvent";
  }
  protected:
  explicit GroupDecreaseNoticeEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_onebot_5fevent_2eproto);
    return ::descriptor_table_onebot_5fevent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPostTypeFieldNumber = 3,
    kNoticeTypeFieldNumber = 4,
    kSubTypeFieldNumber = 5,
    kTimeFieldNumber = 1,
    kSelfIdFieldNumber = 2,
    kGroupIdFieldNumber = 6,
    kOperatorIdFieldNumber = 7,
    kUserIdFieldNumber = 8,
  };
  // string post_type = 3;
  void clear_post_type();
  const std::string& post_type() const;
  void set_post_type(const std::string& value);
  void set_post_type(std::string&& value);
  void set_post_type(const char* value);
  void set_post_type(const char* value, size_t size);
  std::string* mutable_post_type();
  std::string* release_post_type();
  void set_allocated_post_type(std::string* post_type);
  private:
  const std::string& _internal_post_type() const;
  void _internal_set_post_type(const std::string& value);
  std::string* _internal_mutable_post_type();
  public:

  // string notice_type = 4;
  void clear_notice_type();
  const std::string& notice_type() const;
  void set_notice_type(const std::string& value);
  void set_notice_type(std::string&& value);
  void set_notice_type(const char* value);
  void set_notice_type(const char* value, size_t size);
  std::string* mutable_notice_type();
  std::string* release_notice_type();
  void set_allocated_notice_type(std::string* notice_type);
  private:
  const std::string& _internal_notice_type() const;
  void _internal_set_notice_type(const std::string& value);
  std::string* _internal_mutable_notice_type();
  public:

  // string sub_type = 5;
  void clear_sub_type();
  const std::string& sub_type() const;
  void set_sub_type(const std::string& value);
  void set_sub_type(std::string&& value);
  void set_sub_type(const char* value);
  void set_sub_type(const char* value, size_t size);
  std::string* mutable_sub_type();
  std::string* release_sub_type();
  void set_allocated_sub_type(std::string* sub_type);
  private:
  const std::string& _internal_sub_type() const;
  void _internal_set_sub_type(const std::string& value);
  std::string* _internal_mutable_sub_type();
  public:

  // int64 time = 1;
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::int64 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 self_id = 2;
  void clear_self_id();
  ::PROTOBUF_NAMESPACE_ID::int64 self_id() const;
  void set_self_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_self_id() const;
  void _internal_set_self_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 group_id = 6;
  void clear_group_id();
  ::PROTOBUF_NAMESPACE_ID::int64 group_id() const;
  void set_group_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_group_id() const;
  void _internal_set_group_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 operator_id = 7;
  void clear_operator_id();
  ::PROTOBUF_NAMESPACE_ID::int64 operator_id() const;
  void set_operator_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_operator_id() const;
  void _internal_set_operator_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 user_id = 8;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::int64 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:onebot.GroupDecreaseNoticeEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr post_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr notice_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sub_type_;
  ::PROTOBUF_NAMESPACE_ID::int64 time_;
  ::PROTOBUF_NAMESPACE_ID::int64 self_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 group_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 operator_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 user_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onebot_5fevent_2eproto;
};
// -------------------------------------------------------------------

class GroupIncreaseNoticeEvent PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onebot.GroupIncreaseNoticeEvent) */ {
 public:
  inline GroupIncreaseNoticeEvent() : GroupIncreaseNoticeEvent(nullptr) {};
  virtual ~GroupIncreaseNoticeEvent();

  GroupIncreaseNoticeEvent(const GroupIncreaseNoticeEvent& from);
  GroupIncreaseNoticeEvent(GroupIncreaseNoticeEvent&& from) noexcept
    : GroupIncreaseNoticeEvent() {
    *this = ::std::move(from);
  }

  inline GroupIncreaseNoticeEvent& operator=(const GroupIncreaseNoticeEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupIncreaseNoticeEvent& operator=(GroupIncreaseNoticeEvent&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GroupIncreaseNoticeEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GroupIncreaseNoticeEvent* internal_default_instance() {
    return reinterpret_cast<const GroupIncreaseNoticeEvent*>(
               &_GroupIncreaseNoticeEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(GroupIncreaseNoticeEvent& a, GroupIncreaseNoticeEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupIncreaseNoticeEvent* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupIncreaseNoticeEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GroupIncreaseNoticeEvent* New() const final {
    return CreateMaybeMessage<GroupIncreaseNoticeEvent>(nullptr);
  }

  GroupIncreaseNoticeEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GroupIncreaseNoticeEvent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GroupIncreaseNoticeEvent& from);
  void MergeFrom(const GroupIncreaseNoticeEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroupIncreaseNoticeEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onebot.GroupIncreaseNoticeEvent";
  }
  protected:
  explicit GroupIncreaseNoticeEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_onebot_5fevent_2eproto);
    return ::descriptor_table_onebot_5fevent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPostTypeFieldNumber = 3,
    kNoticeTypeFieldNumber = 4,
    kSubTypeFieldNumber = 5,
    kTimeFieldNumber = 1,
    kSelfIdFieldNumber = 2,
    kGroupIdFieldNumber = 6,
    kOperatorIdFieldNumber = 7,
    kUserIdFieldNumber = 8,
  };
  // string post_type = 3;
  void clear_post_type();
  const std::string& post_type() const;
  void set_post_type(const std::string& value);
  void set_post_type(std::string&& value);
  void set_post_type(const char* value);
  void set_post_type(const char* value, size_t size);
  std::string* mutable_post_type();
  std::string* release_post_type();
  void set_allocated_post_type(std::string* post_type);
  private:
  const std::string& _internal_post_type() const;
  void _internal_set_post_type(const std::string& value);
  std::string* _internal_mutable_post_type();
  public:

  // string notice_type = 4;
  void clear_notice_type();
  const std::string& notice_type() const;
  void set_notice_type(const std::string& value);
  void set_notice_type(std::string&& value);
  void set_notice_type(const char* value);
  void set_notice_type(const char* value, size_t size);
  std::string* mutable_notice_type();
  std::string* release_notice_type();
  void set_allocated_notice_type(std::string* notice_type);
  private:
  const std::string& _internal_notice_type() const;
  void _internal_set_notice_type(const std::string& value);
  std::string* _internal_mutable_notice_type();
  public:

  // string sub_type = 5;
  void clear_sub_type();
  const std::string& sub_type() const;
  void set_sub_type(const std::string& value);
  void set_sub_type(std::string&& value);
  void set_sub_type(const char* value);
  void set_sub_type(const char* value, size_t size);
  std::string* mutable_sub_type();
  std::string* release_sub_type();
  void set_allocated_sub_type(std::string* sub_type);
  private:
  const std::string& _internal_sub_type() const;
  void _internal_set_sub_type(const std::string& value);
  std::string* _internal_mutable_sub_type();
  public:

  // int64 time = 1;
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::int64 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 self_id = 2;
  void clear_self_id();
  ::PROTOBUF_NAMESPACE_ID::int64 self_id() const;
  void set_self_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_self_id() const;
  void _internal_set_self_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 group_id = 6;
  void clear_group_id();
  ::PROTOBUF_NAMESPACE_ID::int64 group_id() const;
  void set_group_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_group_id() const;
  void _internal_set_group_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 operator_id = 7;
  void clear_operator_id();
  ::PROTOBUF_NAMESPACE_ID::int64 operator_id() const;
  void set_operator_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_operator_id() const;
  void _internal_set_operator_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 user_id = 8;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::int64 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:onebot.GroupIncreaseNoticeEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr post_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr notice_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sub_type_;
  ::PROTOBUF_NAMESPACE_ID::int64 time_;
  ::PROTOBUF_NAMESPACE_ID::int64 self_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 group_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 operator_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 user_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onebot_5fevent_2eproto;
};
// -------------------------------------------------------------------

class GroupBanNoticeEvent PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onebot.GroupBanNoticeEvent) */ {
 public:
  inline GroupBanNoticeEvent() : GroupBanNoticeEvent(nullptr) {};
  virtual ~GroupBanNoticeEvent();

  GroupBanNoticeEvent(const GroupBanNoticeEvent& from);
  GroupBanNoticeEvent(GroupBanNoticeEvent&& from) noexcept
    : GroupBanNoticeEvent() {
    *this = ::std::move(from);
  }

  inline GroupBanNoticeEvent& operator=(const GroupBanNoticeEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupBanNoticeEvent& operator=(GroupBanNoticeEvent&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GroupBanNoticeEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GroupBanNoticeEvent* internal_default_instance() {
    return reinterpret_cast<const GroupBanNoticeEvent*>(
               &_GroupBanNoticeEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(GroupBanNoticeEvent& a, GroupBanNoticeEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupBanNoticeEvent* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupBanNoticeEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GroupBanNoticeEvent* New() const final {
    return CreateMaybeMessage<GroupBanNoticeEvent>(nullptr);
  }

  GroupBanNoticeEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GroupBanNoticeEvent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GroupBanNoticeEvent& from);
  void MergeFrom(const GroupBanNoticeEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroupBanNoticeEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onebot.GroupBanNoticeEvent";
  }
  protected:
  explicit GroupBanNoticeEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_onebot_5fevent_2eproto);
    return ::descriptor_table_onebot_5fevent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPostTypeFieldNumber = 3,
    kNoticeTypeFieldNumber = 4,
    kSubTypeFieldNumber = 5,
    kTimeFieldNumber = 1,
    kSelfIdFieldNumber = 2,
    kGroupIdFieldNumber = 6,
    kOperatorIdFieldNumber = 7,
    kUserIdFieldNumber = 8,
    kDurationFieldNumber = 9,
  };
  // string post_type = 3;
  void clear_post_type();
  const std::string& post_type() const;
  void set_post_type(const std::string& value);
  void set_post_type(std::string&& value);
  void set_post_type(const char* value);
  void set_post_type(const char* value, size_t size);
  std::string* mutable_post_type();
  std::string* release_post_type();
  void set_allocated_post_type(std::string* post_type);
  private:
  const std::string& _internal_post_type() const;
  void _internal_set_post_type(const std::string& value);
  std::string* _internal_mutable_post_type();
  public:

  // string notice_type = 4;
  void clear_notice_type();
  const std::string& notice_type() const;
  void set_notice_type(const std::string& value);
  void set_notice_type(std::string&& value);
  void set_notice_type(const char* value);
  void set_notice_type(const char* value, size_t size);
  std::string* mutable_notice_type();
  std::string* release_notice_type();
  void set_allocated_notice_type(std::string* notice_type);
  private:
  const std::string& _internal_notice_type() const;
  void _internal_set_notice_type(const std::string& value);
  std::string* _internal_mutable_notice_type();
  public:

  // string sub_type = 5;
  void clear_sub_type();
  const std::string& sub_type() const;
  void set_sub_type(const std::string& value);
  void set_sub_type(std::string&& value);
  void set_sub_type(const char* value);
  void set_sub_type(const char* value, size_t size);
  std::string* mutable_sub_type();
  std::string* release_sub_type();
  void set_allocated_sub_type(std::string* sub_type);
  private:
  const std::string& _internal_sub_type() const;
  void _internal_set_sub_type(const std::string& value);
  std::string* _internal_mutable_sub_type();
  public:

  // int64 time = 1;
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::int64 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 self_id = 2;
  void clear_self_id();
  ::PROTOBUF_NAMESPACE_ID::int64 self_id() const;
  void set_self_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_self_id() const;
  void _internal_set_self_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 group_id = 6;
  void clear_group_id();
  ::PROTOBUF_NAMESPACE_ID::int64 group_id() const;
  void set_group_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_group_id() const;
  void _internal_set_group_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 operator_id = 7;
  void clear_operator_id();
  ::PROTOBUF_NAMESPACE_ID::int64 operator_id() const;
  void set_operator_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_operator_id() const;
  void _internal_set_operator_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 user_id = 8;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::int64 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 duration = 9;
  void clear_duration();
  ::PROTOBUF_NAMESPACE_ID::int64 duration() const;
  void set_duration(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_duration() const;
  void _internal_set_duration(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:onebot.GroupBanNoticeEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr post_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr notice_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sub_type_;
  ::PROTOBUF_NAMESPACE_ID::int64 time_;
  ::PROTOBUF_NAMESPACE_ID::int64 self_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 group_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 operator_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 user_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 duration_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onebot_5fevent_2eproto;
};
// -------------------------------------------------------------------

class FriendAddNoticeEvent PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onebot.FriendAddNoticeEvent) */ {
 public:
  inline FriendAddNoticeEvent() : FriendAddNoticeEvent(nullptr) {};
  virtual ~FriendAddNoticeEvent();

  FriendAddNoticeEvent(const FriendAddNoticeEvent& from);
  FriendAddNoticeEvent(FriendAddNoticeEvent&& from) noexcept
    : FriendAddNoticeEvent() {
    *this = ::std::move(from);
  }

  inline FriendAddNoticeEvent& operator=(const FriendAddNoticeEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline FriendAddNoticeEvent& operator=(FriendAddNoticeEvent&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FriendAddNoticeEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FriendAddNoticeEvent* internal_default_instance() {
    return reinterpret_cast<const FriendAddNoticeEvent*>(
               &_FriendAddNoticeEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(FriendAddNoticeEvent& a, FriendAddNoticeEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(FriendAddNoticeEvent* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FriendAddNoticeEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FriendAddNoticeEvent* New() const final {
    return CreateMaybeMessage<FriendAddNoticeEvent>(nullptr);
  }

  FriendAddNoticeEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FriendAddNoticeEvent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FriendAddNoticeEvent& from);
  void MergeFrom(const FriendAddNoticeEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FriendAddNoticeEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onebot.FriendAddNoticeEvent";
  }
  protected:
  explicit FriendAddNoticeEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_onebot_5fevent_2eproto);
    return ::descriptor_table_onebot_5fevent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPostTypeFieldNumber = 3,
    kNoticeTypeFieldNumber = 4,
    kTimeFieldNumber = 1,
    kSelfIdFieldNumber = 2,
    kUserIdFieldNumber = 5,
  };
  // string post_type = 3;
  void clear_post_type();
  const std::string& post_type() const;
  void set_post_type(const std::string& value);
  void set_post_type(std::string&& value);
  void set_post_type(const char* value);
  void set_post_type(const char* value, size_t size);
  std::string* mutable_post_type();
  std::string* release_post_type();
  void set_allocated_post_type(std::string* post_type);
  private:
  const std::string& _internal_post_type() const;
  void _internal_set_post_type(const std::string& value);
  std::string* _internal_mutable_post_type();
  public:

  // string notice_type = 4;
  void clear_notice_type();
  const std::string& notice_type() const;
  void set_notice_type(const std::string& value);
  void set_notice_type(std::string&& value);
  void set_notice_type(const char* value);
  void set_notice_type(const char* value, size_t size);
  std::string* mutable_notice_type();
  std::string* release_notice_type();
  void set_allocated_notice_type(std::string* notice_type);
  private:
  const std::string& _internal_notice_type() const;
  void _internal_set_notice_type(const std::string& value);
  std::string* _internal_mutable_notice_type();
  public:

  // int64 time = 1;
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::int64 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 self_id = 2;
  void clear_self_id();
  ::PROTOBUF_NAMESPACE_ID::int64 self_id() const;
  void set_self_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_self_id() const;
  void _internal_set_self_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 user_id = 5;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::int64 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:onebot.FriendAddNoticeEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr post_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr notice_type_;
  ::PROTOBUF_NAMESPACE_ID::int64 time_;
  ::PROTOBUF_NAMESPACE_ID::int64 self_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 user_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onebot_5fevent_2eproto;
};
// -------------------------------------------------------------------

class GroupRecallNoticeEvent PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onebot.GroupRecallNoticeEvent) */ {
 public:
  inline GroupRecallNoticeEvent() : GroupRecallNoticeEvent(nullptr) {};
  virtual ~GroupRecallNoticeEvent();

  GroupRecallNoticeEvent(const GroupRecallNoticeEvent& from);
  GroupRecallNoticeEvent(GroupRecallNoticeEvent&& from) noexcept
    : GroupRecallNoticeEvent() {
    *this = ::std::move(from);
  }

  inline GroupRecallNoticeEvent& operator=(const GroupRecallNoticeEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupRecallNoticeEvent& operator=(GroupRecallNoticeEvent&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GroupRecallNoticeEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GroupRecallNoticeEvent* internal_default_instance() {
    return reinterpret_cast<const GroupRecallNoticeEvent*>(
               &_GroupRecallNoticeEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(GroupRecallNoticeEvent& a, GroupRecallNoticeEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupRecallNoticeEvent* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupRecallNoticeEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GroupRecallNoticeEvent* New() const final {
    return CreateMaybeMessage<GroupRecallNoticeEvent>(nullptr);
  }

  GroupRecallNoticeEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GroupRecallNoticeEvent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GroupRecallNoticeEvent& from);
  void MergeFrom(const GroupRecallNoticeEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroupRecallNoticeEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onebot.GroupRecallNoticeEvent";
  }
  protected:
  explicit GroupRecallNoticeEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_onebot_5fevent_2eproto);
    return ::descriptor_table_onebot_5fevent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPostTypeFieldNumber = 3,
    kNoticeTypeFieldNumber = 4,
    kTimeFieldNumber = 1,
    kSelfIdFieldNumber = 2,
    kGroupIdFieldNumber = 5,
    kUserIdFieldNumber = 6,
    kOperatorIdFieldNumber = 7,
    kMessageIdFieldNumber = 8,
  };
  // string post_type = 3;
  void clear_post_type();
  const std::string& post_type() const;
  void set_post_type(const std::string& value);
  void set_post_type(std::string&& value);
  void set_post_type(const char* value);
  void set_post_type(const char* value, size_t size);
  std::string* mutable_post_type();
  std::string* release_post_type();
  void set_allocated_post_type(std::string* post_type);
  private:
  const std::string& _internal_post_type() const;
  void _internal_set_post_type(const std::string& value);
  std::string* _internal_mutable_post_type();
  public:

  // string notice_type = 4;
  void clear_notice_type();
  const std::string& notice_type() const;
  void set_notice_type(const std::string& value);
  void set_notice_type(std::string&& value);
  void set_notice_type(const char* value);
  void set_notice_type(const char* value, size_t size);
  std::string* mutable_notice_type();
  std::string* release_notice_type();
  void set_allocated_notice_type(std::string* notice_type);
  private:
  const std::string& _internal_notice_type() const;
  void _internal_set_notice_type(const std::string& value);
  std::string* _internal_mutable_notice_type();
  public:

  // int64 time = 1;
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::int64 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 self_id = 2;
  void clear_self_id();
  ::PROTOBUF_NAMESPACE_ID::int64 self_id() const;
  void set_self_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_self_id() const;
  void _internal_set_self_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 group_id = 5;
  void clear_group_id();
  ::PROTOBUF_NAMESPACE_ID::int64 group_id() const;
  void set_group_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_group_id() const;
  void _internal_set_group_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 user_id = 6;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::int64 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 operator_id = 7;
  void clear_operator_id();
  ::PROTOBUF_NAMESPACE_ID::int64 operator_id() const;
  void set_operator_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_operator_id() const;
  void _internal_set_operator_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 message_id = 8;
  void clear_message_id();
  ::PROTOBUF_NAMESPACE_ID::int64 message_id() const;
  void set_message_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_message_id() const;
  void _internal_set_message_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:onebot.GroupRecallNoticeEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr post_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr notice_type_;
  ::PROTOBUF_NAMESPACE_ID::int64 time_;
  ::PROTOBUF_NAMESPACE_ID::int64 self_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 group_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 user_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 operator_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 message_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onebot_5fevent_2eproto;
};
// -------------------------------------------------------------------

class FriendRecallNoticeEvent PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onebot.FriendRecallNoticeEvent) */ {
 public:
  inline FriendRecallNoticeEvent() : FriendRecallNoticeEvent(nullptr) {};
  virtual ~FriendRecallNoticeEvent();

  FriendRecallNoticeEvent(const FriendRecallNoticeEvent& from);
  FriendRecallNoticeEvent(FriendRecallNoticeEvent&& from) noexcept
    : FriendRecallNoticeEvent() {
    *this = ::std::move(from);
  }

  inline FriendRecallNoticeEvent& operator=(const FriendRecallNoticeEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline FriendRecallNoticeEvent& operator=(FriendRecallNoticeEvent&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FriendRecallNoticeEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FriendRecallNoticeEvent* internal_default_instance() {
    return reinterpret_cast<const FriendRecallNoticeEvent*>(
               &_FriendRecallNoticeEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(FriendRecallNoticeEvent& a, FriendRecallNoticeEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(FriendRecallNoticeEvent* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FriendRecallNoticeEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FriendRecallNoticeEvent* New() const final {
    return CreateMaybeMessage<FriendRecallNoticeEvent>(nullptr);
  }

  FriendRecallNoticeEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FriendRecallNoticeEvent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FriendRecallNoticeEvent& from);
  void MergeFrom(const FriendRecallNoticeEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FriendRecallNoticeEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onebot.FriendRecallNoticeEvent";
  }
  protected:
  explicit FriendRecallNoticeEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_onebot_5fevent_2eproto);
    return ::descriptor_table_onebot_5fevent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPostTypeFieldNumber = 3,
    kNoticeTypeFieldNumber = 4,
    kTimeFieldNumber = 1,
    kSelfIdFieldNumber = 2,
    kUserIdFieldNumber = 5,
    kMessageIdFieldNumber = 6,
  };
  // string post_type = 3;
  void clear_post_type();
  const std::string& post_type() const;
  void set_post_type(const std::string& value);
  void set_post_type(std::string&& value);
  void set_post_type(const char* value);
  void set_post_type(const char* value, size_t size);
  std::string* mutable_post_type();
  std::string* release_post_type();
  void set_allocated_post_type(std::string* post_type);
  private:
  const std::string& _internal_post_type() const;
  void _internal_set_post_type(const std::string& value);
  std::string* _internal_mutable_post_type();
  public:

  // string notice_type = 4;
  void clear_notice_type();
  const std::string& notice_type() const;
  void set_notice_type(const std::string& value);
  void set_notice_type(std::string&& value);
  void set_notice_type(const char* value);
  void set_notice_type(const char* value, size_t size);
  std::string* mutable_notice_type();
  std::string* release_notice_type();
  void set_allocated_notice_type(std::string* notice_type);
  private:
  const std::string& _internal_notice_type() const;
  void _internal_set_notice_type(const std::string& value);
  std::string* _internal_mutable_notice_type();
  public:

  // int64 time = 1;
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::int64 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 self_id = 2;
  void clear_self_id();
  ::PROTOBUF_NAMESPACE_ID::int64 self_id() const;
  void set_self_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_self_id() const;
  void _internal_set_self_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 user_id = 5;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::int64 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 message_id = 6;
  void clear_message_id();
  ::PROTOBUF_NAMESPACE_ID::int64 message_id() const;
  void set_message_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_message_id() const;
  void _internal_set_message_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:onebot.FriendRecallNoticeEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr post_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr notice_type_;
  ::PROTOBUF_NAMESPACE_ID::int64 time_;
  ::PROTOBUF_NAMESPACE_ID::int64 self_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 user_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 message_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onebot_5fevent_2eproto;
};
// -------------------------------------------------------------------

class FriendRequestEvent PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onebot.FriendRequestEvent) */ {
 public:
  inline FriendRequestEvent() : FriendRequestEvent(nullptr) {};
  virtual ~FriendRequestEvent();

  FriendRequestEvent(const FriendRequestEvent& from);
  FriendRequestEvent(FriendRequestEvent&& from) noexcept
    : FriendRequestEvent() {
    *this = ::std::move(from);
  }

  inline FriendRequestEvent& operator=(const FriendRequestEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline FriendRequestEvent& operator=(FriendRequestEvent&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FriendRequestEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FriendRequestEvent* internal_default_instance() {
    return reinterpret_cast<const FriendRequestEvent*>(
               &_FriendRequestEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(FriendRequestEvent& a, FriendRequestEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(FriendRequestEvent* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FriendRequestEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FriendRequestEvent* New() const final {
    return CreateMaybeMessage<FriendRequestEvent>(nullptr);
  }

  FriendRequestEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FriendRequestEvent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FriendRequestEvent& from);
  void MergeFrom(const FriendRequestEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FriendRequestEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onebot.FriendRequestEvent";
  }
  protected:
  explicit FriendRequestEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_onebot_5fevent_2eproto);
    return ::descriptor_table_onebot_5fevent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPostTypeFieldNumber = 3,
    kRequestTypeFieldNumber = 4,
    kCommentFieldNumber = 6,
    kFlagFieldNumber = 7,
    kTimeFieldNumber = 1,
    kSelfIdFieldNumber = 2,
    kUserIdFieldNumber = 5,
  };
  // string post_type = 3;
  void clear_post_type();
  const std::string& post_type() const;
  void set_post_type(const std::string& value);
  void set_post_type(std::string&& value);
  void set_post_type(const char* value);
  void set_post_type(const char* value, size_t size);
  std::string* mutable_post_type();
  std::string* release_post_type();
  void set_allocated_post_type(std::string* post_type);
  private:
  const std::string& _internal_post_type() const;
  void _internal_set_post_type(const std::string& value);
  std::string* _internal_mutable_post_type();
  public:

  // string request_type = 4;
  void clear_request_type();
  const std::string& request_type() const;
  void set_request_type(const std::string& value);
  void set_request_type(std::string&& value);
  void set_request_type(const char* value);
  void set_request_type(const char* value, size_t size);
  std::string* mutable_request_type();
  std::string* release_request_type();
  void set_allocated_request_type(std::string* request_type);
  private:
  const std::string& _internal_request_type() const;
  void _internal_set_request_type(const std::string& value);
  std::string* _internal_mutable_request_type();
  public:

  // string comment = 6;
  void clear_comment();
  const std::string& comment() const;
  void set_comment(const std::string& value);
  void set_comment(std::string&& value);
  void set_comment(const char* value);
  void set_comment(const char* value, size_t size);
  std::string* mutable_comment();
  std::string* release_comment();
  void set_allocated_comment(std::string* comment);
  private:
  const std::string& _internal_comment() const;
  void _internal_set_comment(const std::string& value);
  std::string* _internal_mutable_comment();
  public:

  // string flag = 7;
  void clear_flag();
  const std::string& flag() const;
  void set_flag(const std::string& value);
  void set_flag(std::string&& value);
  void set_flag(const char* value);
  void set_flag(const char* value, size_t size);
  std::string* mutable_flag();
  std::string* release_flag();
  void set_allocated_flag(std::string* flag);
  private:
  const std::string& _internal_flag() const;
  void _internal_set_flag(const std::string& value);
  std::string* _internal_mutable_flag();
  public:

  // int64 time = 1;
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::int64 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 self_id = 2;
  void clear_self_id();
  ::PROTOBUF_NAMESPACE_ID::int64 self_id() const;
  void set_self_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_self_id() const;
  void _internal_set_self_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 user_id = 5;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::int64 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:onebot.FriendRequestEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr post_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr comment_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr flag_;
  ::PROTOBUF_NAMESPACE_ID::int64 time_;
  ::PROTOBUF_NAMESPACE_ID::int64 self_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 user_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onebot_5fevent_2eproto;
};
// -------------------------------------------------------------------

class GroupRequestEvent PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onebot.GroupRequestEvent) */ {
 public:
  inline GroupRequestEvent() : GroupRequestEvent(nullptr) {};
  virtual ~GroupRequestEvent();

  GroupRequestEvent(const GroupRequestEvent& from);
  GroupRequestEvent(GroupRequestEvent&& from) noexcept
    : GroupRequestEvent() {
    *this = ::std::move(from);
  }

  inline GroupRequestEvent& operator=(const GroupRequestEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupRequestEvent& operator=(GroupRequestEvent&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GroupRequestEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GroupRequestEvent* internal_default_instance() {
    return reinterpret_cast<const GroupRequestEvent*>(
               &_GroupRequestEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(GroupRequestEvent& a, GroupRequestEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupRequestEvent* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupRequestEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GroupRequestEvent* New() const final {
    return CreateMaybeMessage<GroupRequestEvent>(nullptr);
  }

  GroupRequestEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GroupRequestEvent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GroupRequestEvent& from);
  void MergeFrom(const GroupRequestEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroupRequestEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onebot.GroupRequestEvent";
  }
  protected:
  explicit GroupRequestEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_onebot_5fevent_2eproto);
    return ::descriptor_table_onebot_5fevent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPostTypeFieldNumber = 3,
    kRequestTypeFieldNumber = 4,
    kSubTypeFieldNumber = 5,
    kCommentFieldNumber = 8,
    kFlagFieldNumber = 9,
    kTimeFieldNumber = 1,
    kSelfIdFieldNumber = 2,
    kGroupIdFieldNumber = 6,
    kUserIdFieldNumber = 7,
  };
  // string post_type = 3;
  void clear_post_type();
  const std::string& post_type() const;
  void set_post_type(const std::string& value);
  void set_post_type(std::string&& value);
  void set_post_type(const char* value);
  void set_post_type(const char* value, size_t size);
  std::string* mutable_post_type();
  std::string* release_post_type();
  void set_allocated_post_type(std::string* post_type);
  private:
  const std::string& _internal_post_type() const;
  void _internal_set_post_type(const std::string& value);
  std::string* _internal_mutable_post_type();
  public:

  // string request_type = 4;
  void clear_request_type();
  const std::string& request_type() const;
  void set_request_type(const std::string& value);
  void set_request_type(std::string&& value);
  void set_request_type(const char* value);
  void set_request_type(const char* value, size_t size);
  std::string* mutable_request_type();
  std::string* release_request_type();
  void set_allocated_request_type(std::string* request_type);
  private:
  const std::string& _internal_request_type() const;
  void _internal_set_request_type(const std::string& value);
  std::string* _internal_mutable_request_type();
  public:

  // string sub_type = 5;
  void clear_sub_type();
  const std::string& sub_type() const;
  void set_sub_type(const std::string& value);
  void set_sub_type(std::string&& value);
  void set_sub_type(const char* value);
  void set_sub_type(const char* value, size_t size);
  std::string* mutable_sub_type();
  std::string* release_sub_type();
  void set_allocated_sub_type(std::string* sub_type);
  private:
  const std::string& _internal_sub_type() const;
  void _internal_set_sub_type(const std::string& value);
  std::string* _internal_mutable_sub_type();
  public:

  // string comment = 8;
  void clear_comment();
  const std::string& comment() const;
  void set_comment(const std::string& value);
  void set_comment(std::string&& value);
  void set_comment(const char* value);
  void set_comment(const char* value, size_t size);
  std::string* mutable_comment();
  std::string* release_comment();
  void set_allocated_comment(std::string* comment);
  private:
  const std::string& _internal_comment() const;
  void _internal_set_comment(const std::string& value);
  std::string* _internal_mutable_comment();
  public:

  // string flag = 9;
  void clear_flag();
  const std::string& flag() const;
  void set_flag(const std::string& value);
  void set_flag(std::string&& value);
  void set_flag(const char* value);
  void set_flag(const char* value, size_t size);
  std::string* mutable_flag();
  std::string* release_flag();
  void set_allocated_flag(std::string* flag);
  private:
  const std::string& _internal_flag() const;
  void _internal_set_flag(const std::string& value);
  std::string* _internal_mutable_flag();
  public:

  // int64 time = 1;
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::int64 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 self_id = 2;
  void clear_self_id();
  ::PROTOBUF_NAMESPACE_ID::int64 self_id() const;
  void set_self_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_self_id() const;
  void _internal_set_self_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 group_id = 6;
  void clear_group_id();
  ::PROTOBUF_NAMESPACE_ID::int64 group_id() const;
  void set_group_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_group_id() const;
  void _internal_set_group_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 user_id = 7;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::int64 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:onebot.GroupRequestEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr post_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sub_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr comment_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr flag_;
  ::PROTOBUF_NAMESPACE_ID::int64 time_;
  ::PROTOBUF_NAMESPACE_ID::int64 self_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 group_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 user_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onebot_5fevent_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BaseEvent

// int64 time = 1;
inline void BaseEvent::clear_time() {
  time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BaseEvent::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BaseEvent::time() const {
  // @@protoc_insertion_point(field_get:onebot.BaseEvent.time)
  return _internal_time();
}
inline void BaseEvent::_internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  time_ = value;
}
inline void BaseEvent::set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:onebot.BaseEvent.time)
}

// int64 self_id = 2;
inline void BaseEvent::clear_self_id() {
  self_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BaseEvent::_internal_self_id() const {
  return self_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BaseEvent::self_id() const {
  // @@protoc_insertion_point(field_get:onebot.BaseEvent.self_id)
  return _internal_self_id();
}
inline void BaseEvent::_internal_set_self_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  self_id_ = value;
}
inline void BaseEvent::set_self_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_self_id(value);
  // @@protoc_insertion_point(field_set:onebot.BaseEvent.self_id)
}

// string post_type = 3;
inline void BaseEvent::clear_post_type() {
  post_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& BaseEvent::post_type() const {
  // @@protoc_insertion_point(field_get:onebot.BaseEvent.post_type)
  return _internal_post_type();
}
inline void BaseEvent::set_post_type(const std::string& value) {
  _internal_set_post_type(value);
  // @@protoc_insertion_point(field_set:onebot.BaseEvent.post_type)
}
inline std::string* BaseEvent::mutable_post_type() {
  // @@protoc_insertion_point(field_mutable:onebot.BaseEvent.post_type)
  return _internal_mutable_post_type();
}
inline const std::string& BaseEvent::_internal_post_type() const {
  return post_type_.Get();
}
inline void BaseEvent::_internal_set_post_type(const std::string& value) {
  
  post_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BaseEvent::set_post_type(std::string&& value) {
  
  post_type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:onebot.BaseEvent.post_type)
}
inline void BaseEvent::set_post_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  post_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:onebot.BaseEvent.post_type)
}
inline void BaseEvent::set_post_type(const char* value,
    size_t size) {
  
  post_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:onebot.BaseEvent.post_type)
}
inline std::string* BaseEvent::_internal_mutable_post_type() {
  
  return post_type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BaseEvent::release_post_type() {
  // @@protoc_insertion_point(field_release:onebot.BaseEvent.post_type)
  return post_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BaseEvent::set_allocated_post_type(std::string* post_type) {
  if (post_type != nullptr) {
    
  } else {
    
  }
  post_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), post_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:onebot.BaseEvent.post_type)
}

// -------------------------------------------------------------------

// BaseMessageEvent

// int64 time = 1;
inline void BaseMessageEvent::clear_time() {
  time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BaseMessageEvent::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BaseMessageEvent::time() const {
  // @@protoc_insertion_point(field_get:onebot.BaseMessageEvent.time)
  return _internal_time();
}
inline void BaseMessageEvent::_internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  time_ = value;
}
inline void BaseMessageEvent::set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:onebot.BaseMessageEvent.time)
}

// int64 self_id = 2;
inline void BaseMessageEvent::clear_self_id() {
  self_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BaseMessageEvent::_internal_self_id() const {
  return self_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BaseMessageEvent::self_id() const {
  // @@protoc_insertion_point(field_get:onebot.BaseMessageEvent.self_id)
  return _internal_self_id();
}
inline void BaseMessageEvent::_internal_set_self_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  self_id_ = value;
}
inline void BaseMessageEvent::set_self_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_self_id(value);
  // @@protoc_insertion_point(field_set:onebot.BaseMessageEvent.self_id)
}

// string post_type = 3;
inline void BaseMessageEvent::clear_post_type() {
  post_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& BaseMessageEvent::post_type() const {
  // @@protoc_insertion_point(field_get:onebot.BaseMessageEvent.post_type)
  return _internal_post_type();
}
inline void BaseMessageEvent::set_post_type(const std::string& value) {
  _internal_set_post_type(value);
  // @@protoc_insertion_point(field_set:onebot.BaseMessageEvent.post_type)
}
inline std::string* BaseMessageEvent::mutable_post_type() {
  // @@protoc_insertion_point(field_mutable:onebot.BaseMessageEvent.post_type)
  return _internal_mutable_post_type();
}
inline const std::string& BaseMessageEvent::_internal_post_type() const {
  return post_type_.Get();
}
inline void BaseMessageEvent::_internal_set_post_type(const std::string& value) {
  
  post_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BaseMessageEvent::set_post_type(std::string&& value) {
  
  post_type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:onebot.BaseMessageEvent.post_type)
}
inline void BaseMessageEvent::set_post_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  post_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:onebot.BaseMessageEvent.post_type)
}
inline void BaseMessageEvent::set_post_type(const char* value,
    size_t size) {
  
  post_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:onebot.BaseMessageEvent.post_type)
}
inline std::string* BaseMessageEvent::_internal_mutable_post_type() {
  
  return post_type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BaseMessageEvent::release_post_type() {
  // @@protoc_insertion_point(field_release:onebot.BaseMessageEvent.post_type)
  return post_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BaseMessageEvent::set_allocated_post_type(std::string* post_type) {
  if (post_type != nullptr) {
    
  } else {
    
  }
  post_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), post_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:onebot.BaseMessageEvent.post_type)
}

// string message_type = 4;
inline void BaseMessageEvent::clear_message_type() {
  message_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& BaseMessageEvent::message_type() const {
  // @@protoc_insertion_point(field_get:onebot.BaseMessageEvent.message_type)
  return _internal_message_type();
}
inline void BaseMessageEvent::set_message_type(const std::string& value) {
  _internal_set_message_type(value);
  // @@protoc_insertion_point(field_set:onebot.BaseMessageEvent.message_type)
}
inline std::string* BaseMessageEvent::mutable_message_type() {
  // @@protoc_insertion_point(field_mutable:onebot.BaseMessageEvent.message_type)
  return _internal_mutable_message_type();
}
inline const std::string& BaseMessageEvent::_internal_message_type() const {
  return message_type_.Get();
}
inline void BaseMessageEvent::_internal_set_message_type(const std::string& value) {
  
  message_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BaseMessageEvent::set_message_type(std::string&& value) {
  
  message_type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:onebot.BaseMessageEvent.message_type)
}
inline void BaseMessageEvent::set_message_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:onebot.BaseMessageEvent.message_type)
}
inline void BaseMessageEvent::set_message_type(const char* value,
    size_t size) {
  
  message_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:onebot.BaseMessageEvent.message_type)
}
inline std::string* BaseMessageEvent::_internal_mutable_message_type() {
  
  return message_type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BaseMessageEvent::release_message_type() {
  // @@protoc_insertion_point(field_release:onebot.BaseMessageEvent.message_type)
  return message_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BaseMessageEvent::set_allocated_message_type(std::string* message_type) {
  if (message_type != nullptr) {
    
  } else {
    
  }
  message_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:onebot.BaseMessageEvent.message_type)
}

// -------------------------------------------------------------------

// BaseNoticeEvent

// int64 time = 1;
inline void BaseNoticeEvent::clear_time() {
  time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BaseNoticeEvent::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BaseNoticeEvent::time() const {
  // @@protoc_insertion_point(field_get:onebot.BaseNoticeEvent.time)
  return _internal_time();
}
inline void BaseNoticeEvent::_internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  time_ = value;
}
inline void BaseNoticeEvent::set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:onebot.BaseNoticeEvent.time)
}

// int64 self_id = 2;
inline void BaseNoticeEvent::clear_self_id() {
  self_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BaseNoticeEvent::_internal_self_id() const {
  return self_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BaseNoticeEvent::self_id() const {
  // @@protoc_insertion_point(field_get:onebot.BaseNoticeEvent.self_id)
  return _internal_self_id();
}
inline void BaseNoticeEvent::_internal_set_self_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  self_id_ = value;
}
inline void BaseNoticeEvent::set_self_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_self_id(value);
  // @@protoc_insertion_point(field_set:onebot.BaseNoticeEvent.self_id)
}

// string post_type = 3;
inline void BaseNoticeEvent::clear_post_type() {
  post_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& BaseNoticeEvent::post_type() const {
  // @@protoc_insertion_point(field_get:onebot.BaseNoticeEvent.post_type)
  return _internal_post_type();
}
inline void BaseNoticeEvent::set_post_type(const std::string& value) {
  _internal_set_post_type(value);
  // @@protoc_insertion_point(field_set:onebot.BaseNoticeEvent.post_type)
}
inline std::string* BaseNoticeEvent::mutable_post_type() {
  // @@protoc_insertion_point(field_mutable:onebot.BaseNoticeEvent.post_type)
  return _internal_mutable_post_type();
}
inline const std::string& BaseNoticeEvent::_internal_post_type() const {
  return post_type_.Get();
}
inline void BaseNoticeEvent::_internal_set_post_type(const std::string& value) {
  
  post_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BaseNoticeEvent::set_post_type(std::string&& value) {
  
  post_type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:onebot.BaseNoticeEvent.post_type)
}
inline void BaseNoticeEvent::set_post_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  post_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:onebot.BaseNoticeEvent.post_type)
}
inline void BaseNoticeEvent::set_post_type(const char* value,
    size_t size) {
  
  post_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:onebot.BaseNoticeEvent.post_type)
}
inline std::string* BaseNoticeEvent::_internal_mutable_post_type() {
  
  return post_type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BaseNoticeEvent::release_post_type() {
  // @@protoc_insertion_point(field_release:onebot.BaseNoticeEvent.post_type)
  return post_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BaseNoticeEvent::set_allocated_post_type(std::string* post_type) {
  if (post_type != nullptr) {
    
  } else {
    
  }
  post_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), post_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:onebot.BaseNoticeEvent.post_type)
}

// string notice_type = 4;
inline void BaseNoticeEvent::clear_notice_type() {
  notice_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& BaseNoticeEvent::notice_type() const {
  // @@protoc_insertion_point(field_get:onebot.BaseNoticeEvent.notice_type)
  return _internal_notice_type();
}
inline void BaseNoticeEvent::set_notice_type(const std::string& value) {
  _internal_set_notice_type(value);
  // @@protoc_insertion_point(field_set:onebot.BaseNoticeEvent.notice_type)
}
inline std::string* BaseNoticeEvent::mutable_notice_type() {
  // @@protoc_insertion_point(field_mutable:onebot.BaseNoticeEvent.notice_type)
  return _internal_mutable_notice_type();
}
inline const std::string& BaseNoticeEvent::_internal_notice_type() const {
  return notice_type_.Get();
}
inline void BaseNoticeEvent::_internal_set_notice_type(const std::string& value) {
  
  notice_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BaseNoticeEvent::set_notice_type(std::string&& value) {
  
  notice_type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:onebot.BaseNoticeEvent.notice_type)
}
inline void BaseNoticeEvent::set_notice_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  notice_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:onebot.BaseNoticeEvent.notice_type)
}
inline void BaseNoticeEvent::set_notice_type(const char* value,
    size_t size) {
  
  notice_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:onebot.BaseNoticeEvent.notice_type)
}
inline std::string* BaseNoticeEvent::_internal_mutable_notice_type() {
  
  return notice_type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BaseNoticeEvent::release_notice_type() {
  // @@protoc_insertion_point(field_release:onebot.BaseNoticeEvent.notice_type)
  return notice_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BaseNoticeEvent::set_allocated_notice_type(std::string* notice_type) {
  if (notice_type != nullptr) {
    
  } else {
    
  }
  notice_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), notice_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:onebot.BaseNoticeEvent.notice_type)
}

// -------------------------------------------------------------------

// BaseRequestEvent

// int64 time = 1;
inline void BaseRequestEvent::clear_time() {
  time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BaseRequestEvent::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BaseRequestEvent::time() const {
  // @@protoc_insertion_point(field_get:onebot.BaseRequestEvent.time)
  return _internal_time();
}
inline void BaseRequestEvent::_internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  time_ = value;
}
inline void BaseRequestEvent::set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:onebot.BaseRequestEvent.time)
}

// int64 self_id = 2;
inline void BaseRequestEvent::clear_self_id() {
  self_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BaseRequestEvent::_internal_self_id() const {
  return self_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BaseRequestEvent::self_id() const {
  // @@protoc_insertion_point(field_get:onebot.BaseRequestEvent.self_id)
  return _internal_self_id();
}
inline void BaseRequestEvent::_internal_set_self_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  self_id_ = value;
}
inline void BaseRequestEvent::set_self_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_self_id(value);
  // @@protoc_insertion_point(field_set:onebot.BaseRequestEvent.self_id)
}

// string post_type = 3;
inline void BaseRequestEvent::clear_post_type() {
  post_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& BaseRequestEvent::post_type() const {
  // @@protoc_insertion_point(field_get:onebot.BaseRequestEvent.post_type)
  return _internal_post_type();
}
inline void BaseRequestEvent::set_post_type(const std::string& value) {
  _internal_set_post_type(value);
  // @@protoc_insertion_point(field_set:onebot.BaseRequestEvent.post_type)
}
inline std::string* BaseRequestEvent::mutable_post_type() {
  // @@protoc_insertion_point(field_mutable:onebot.BaseRequestEvent.post_type)
  return _internal_mutable_post_type();
}
inline const std::string& BaseRequestEvent::_internal_post_type() const {
  return post_type_.Get();
}
inline void BaseRequestEvent::_internal_set_post_type(const std::string& value) {
  
  post_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BaseRequestEvent::set_post_type(std::string&& value) {
  
  post_type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:onebot.BaseRequestEvent.post_type)
}
inline void BaseRequestEvent::set_post_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  post_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:onebot.BaseRequestEvent.post_type)
}
inline void BaseRequestEvent::set_post_type(const char* value,
    size_t size) {
  
  post_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:onebot.BaseRequestEvent.post_type)
}
inline std::string* BaseRequestEvent::_internal_mutable_post_type() {
  
  return post_type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BaseRequestEvent::release_post_type() {
  // @@protoc_insertion_point(field_release:onebot.BaseRequestEvent.post_type)
  return post_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BaseRequestEvent::set_allocated_post_type(std::string* post_type) {
  if (post_type != nullptr) {
    
  } else {
    
  }
  post_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), post_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:onebot.BaseRequestEvent.post_type)
}

// string notice_type = 4;
inline void BaseRequestEvent::clear_notice_type() {
  notice_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& BaseRequestEvent::notice_type() const {
  // @@protoc_insertion_point(field_get:onebot.BaseRequestEvent.notice_type)
  return _internal_notice_type();
}
inline void BaseRequestEvent::set_notice_type(const std::string& value) {
  _internal_set_notice_type(value);
  // @@protoc_insertion_point(field_set:onebot.BaseRequestEvent.notice_type)
}
inline std::string* BaseRequestEvent::mutable_notice_type() {
  // @@protoc_insertion_point(field_mutable:onebot.BaseRequestEvent.notice_type)
  return _internal_mutable_notice_type();
}
inline const std::string& BaseRequestEvent::_internal_notice_type() const {
  return notice_type_.Get();
}
inline void BaseRequestEvent::_internal_set_notice_type(const std::string& value) {
  
  notice_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BaseRequestEvent::set_notice_type(std::string&& value) {
  
  notice_type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:onebot.BaseRequestEvent.notice_type)
}
inline void BaseRequestEvent::set_notice_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  notice_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:onebot.BaseRequestEvent.notice_type)
}
inline void BaseRequestEvent::set_notice_type(const char* value,
    size_t size) {
  
  notice_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:onebot.BaseRequestEvent.notice_type)
}
inline std::string* BaseRequestEvent::_internal_mutable_notice_type() {
  
  return notice_type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BaseRequestEvent::release_notice_type() {
  // @@protoc_insertion_point(field_release:onebot.BaseRequestEvent.notice_type)
  return notice_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BaseRequestEvent::set_allocated_notice_type(std::string* notice_type) {
  if (notice_type != nullptr) {
    
  } else {
    
  }
  notice_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), notice_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:onebot.BaseRequestEvent.notice_type)
}

// -------------------------------------------------------------------

// PrivateMessageEvent_Sender

// int64 user_id = 1;
inline void PrivateMessageEvent_Sender::clear_user_id() {
  user_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PrivateMessageEvent_Sender::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PrivateMessageEvent_Sender::user_id() const {
  // @@protoc_insertion_point(field_get:onebot.PrivateMessageEvent.Sender.user_id)
  return _internal_user_id();
}
inline void PrivateMessageEvent_Sender::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  user_id_ = value;
}
inline void PrivateMessageEvent_Sender::set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:onebot.PrivateMessageEvent.Sender.user_id)
}

// string nickname = 2;
inline void PrivateMessageEvent_Sender::clear_nickname() {
  nickname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PrivateMessageEvent_Sender::nickname() const {
  // @@protoc_insertion_point(field_get:onebot.PrivateMessageEvent.Sender.nickname)
  return _internal_nickname();
}
inline void PrivateMessageEvent_Sender::set_nickname(const std::string& value) {
  _internal_set_nickname(value);
  // @@protoc_insertion_point(field_set:onebot.PrivateMessageEvent.Sender.nickname)
}
inline std::string* PrivateMessageEvent_Sender::mutable_nickname() {
  // @@protoc_insertion_point(field_mutable:onebot.PrivateMessageEvent.Sender.nickname)
  return _internal_mutable_nickname();
}
inline const std::string& PrivateMessageEvent_Sender::_internal_nickname() const {
  return nickname_.Get();
}
inline void PrivateMessageEvent_Sender::_internal_set_nickname(const std::string& value) {
  
  nickname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PrivateMessageEvent_Sender::set_nickname(std::string&& value) {
  
  nickname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:onebot.PrivateMessageEvent.Sender.nickname)
}
inline void PrivateMessageEvent_Sender::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nickname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:onebot.PrivateMessageEvent.Sender.nickname)
}
inline void PrivateMessageEvent_Sender::set_nickname(const char* value,
    size_t size) {
  
  nickname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:onebot.PrivateMessageEvent.Sender.nickname)
}
inline std::string* PrivateMessageEvent_Sender::_internal_mutable_nickname() {
  
  return nickname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PrivateMessageEvent_Sender::release_nickname() {
  // @@protoc_insertion_point(field_release:onebot.PrivateMessageEvent.Sender.nickname)
  return nickname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PrivateMessageEvent_Sender::set_allocated_nickname(std::string* nickname) {
  if (nickname != nullptr) {
    
  } else {
    
  }
  nickname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nickname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:onebot.PrivateMessageEvent.Sender.nickname)
}

// string sex = 3;
inline void PrivateMessageEvent_Sender::clear_sex() {
  sex_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PrivateMessageEvent_Sender::sex() const {
  // @@protoc_insertion_point(field_get:onebot.PrivateMessageEvent.Sender.sex)
  return _internal_sex();
}
inline void PrivateMessageEvent_Sender::set_sex(const std::string& value) {
  _internal_set_sex(value);
  // @@protoc_insertion_point(field_set:onebot.PrivateMessageEvent.Sender.sex)
}
inline std::string* PrivateMessageEvent_Sender::mutable_sex() {
  // @@protoc_insertion_point(field_mutable:onebot.PrivateMessageEvent.Sender.sex)
  return _internal_mutable_sex();
}
inline const std::string& PrivateMessageEvent_Sender::_internal_sex() const {
  return sex_.Get();
}
inline void PrivateMessageEvent_Sender::_internal_set_sex(const std::string& value) {
  
  sex_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PrivateMessageEvent_Sender::set_sex(std::string&& value) {
  
  sex_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:onebot.PrivateMessageEvent.Sender.sex)
}
inline void PrivateMessageEvent_Sender::set_sex(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sex_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:onebot.PrivateMessageEvent.Sender.sex)
}
inline void PrivateMessageEvent_Sender::set_sex(const char* value,
    size_t size) {
  
  sex_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:onebot.PrivateMessageEvent.Sender.sex)
}
inline std::string* PrivateMessageEvent_Sender::_internal_mutable_sex() {
  
  return sex_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PrivateMessageEvent_Sender::release_sex() {
  // @@protoc_insertion_point(field_release:onebot.PrivateMessageEvent.Sender.sex)
  return sex_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PrivateMessageEvent_Sender::set_allocated_sex(std::string* sex) {
  if (sex != nullptr) {
    
  } else {
    
  }
  sex_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sex,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:onebot.PrivateMessageEvent.Sender.sex)
}

// int32 age = 4;
inline void PrivateMessageEvent_Sender::clear_age() {
  age_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PrivateMessageEvent_Sender::_internal_age() const {
  return age_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PrivateMessageEvent_Sender::age() const {
  // @@protoc_insertion_point(field_get:onebot.PrivateMessageEvent.Sender.age)
  return _internal_age();
}
inline void PrivateMessageEvent_Sender::_internal_set_age(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  age_ = value;
}
inline void PrivateMessageEvent_Sender::set_age(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_age(value);
  // @@protoc_insertion_point(field_set:onebot.PrivateMessageEvent.Sender.age)
}

// -------------------------------------------------------------------

// PrivateMessageEvent

// int64 time = 1;
inline void PrivateMessageEvent::clear_time() {
  time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PrivateMessageEvent::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PrivateMessageEvent::time() const {
  // @@protoc_insertion_point(field_get:onebot.PrivateMessageEvent.time)
  return _internal_time();
}
inline void PrivateMessageEvent::_internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  time_ = value;
}
inline void PrivateMessageEvent::set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:onebot.PrivateMessageEvent.time)
}

// int64 self_id = 2;
inline void PrivateMessageEvent::clear_self_id() {
  self_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PrivateMessageEvent::_internal_self_id() const {
  return self_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PrivateMessageEvent::self_id() const {
  // @@protoc_insertion_point(field_get:onebot.PrivateMessageEvent.self_id)
  return _internal_self_id();
}
inline void PrivateMessageEvent::_internal_set_self_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  self_id_ = value;
}
inline void PrivateMessageEvent::set_self_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_self_id(value);
  // @@protoc_insertion_point(field_set:onebot.PrivateMessageEvent.self_id)
}

// string post_type = 3;
inline void PrivateMessageEvent::clear_post_type() {
  post_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PrivateMessageEvent::post_type() const {
  // @@protoc_insertion_point(field_get:onebot.PrivateMessageEvent.post_type)
  return _internal_post_type();
}
inline void PrivateMessageEvent::set_post_type(const std::string& value) {
  _internal_set_post_type(value);
  // @@protoc_insertion_point(field_set:onebot.PrivateMessageEvent.post_type)
}
inline std::string* PrivateMessageEvent::mutable_post_type() {
  // @@protoc_insertion_point(field_mutable:onebot.PrivateMessageEvent.post_type)
  return _internal_mutable_post_type();
}
inline const std::string& PrivateMessageEvent::_internal_post_type() const {
  return post_type_.Get();
}
inline void PrivateMessageEvent::_internal_set_post_type(const std::string& value) {
  
  post_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PrivateMessageEvent::set_post_type(std::string&& value) {
  
  post_type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:onebot.PrivateMessageEvent.post_type)
}
inline void PrivateMessageEvent::set_post_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  post_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:onebot.PrivateMessageEvent.post_type)
}
inline void PrivateMessageEvent::set_post_type(const char* value,
    size_t size) {
  
  post_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:onebot.PrivateMessageEvent.post_type)
}
inline std::string* PrivateMessageEvent::_internal_mutable_post_type() {
  
  return post_type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PrivateMessageEvent::release_post_type() {
  // @@protoc_insertion_point(field_release:onebot.PrivateMessageEvent.post_type)
  return post_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PrivateMessageEvent::set_allocated_post_type(std::string* post_type) {
  if (post_type != nullptr) {
    
  } else {
    
  }
  post_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), post_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:onebot.PrivateMessageEvent.post_type)
}

// string message_type = 4;
inline void PrivateMessageEvent::clear_message_type() {
  message_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PrivateMessageEvent::message_type() const {
  // @@protoc_insertion_point(field_get:onebot.PrivateMessageEvent.message_type)
  return _internal_message_type();
}
inline void PrivateMessageEvent::set_message_type(const std::string& value) {
  _internal_set_message_type(value);
  // @@protoc_insertion_point(field_set:onebot.PrivateMessageEvent.message_type)
}
inline std::string* PrivateMessageEvent::mutable_message_type() {
  // @@protoc_insertion_point(field_mutable:onebot.PrivateMessageEvent.message_type)
  return _internal_mutable_message_type();
}
inline const std::string& PrivateMessageEvent::_internal_message_type() const {
  return message_type_.Get();
}
inline void PrivateMessageEvent::_internal_set_message_type(const std::string& value) {
  
  message_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PrivateMessageEvent::set_message_type(std::string&& value) {
  
  message_type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:onebot.PrivateMessageEvent.message_type)
}
inline void PrivateMessageEvent::set_message_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:onebot.PrivateMessageEvent.message_type)
}
inline void PrivateMessageEvent::set_message_type(const char* value,
    size_t size) {
  
  message_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:onebot.PrivateMessageEvent.message_type)
}
inline std::string* PrivateMessageEvent::_internal_mutable_message_type() {
  
  return message_type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PrivateMessageEvent::release_message_type() {
  // @@protoc_insertion_point(field_release:onebot.PrivateMessageEvent.message_type)
  return message_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PrivateMessageEvent::set_allocated_message_type(std::string* message_type) {
  if (message_type != nullptr) {
    
  } else {
    
  }
  message_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:onebot.PrivateMessageEvent.message_type)
}

// string sub_type = 5;
inline void PrivateMessageEvent::clear_sub_type() {
  sub_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PrivateMessageEvent::sub_type() const {
  // @@protoc_insertion_point(field_get:onebot.PrivateMessageEvent.sub_type)
  return _internal_sub_type();
}
inline void PrivateMessageEvent::set_sub_type(const std::string& value) {
  _internal_set_sub_type(value);
  // @@protoc_insertion_point(field_set:onebot.PrivateMessageEvent.sub_type)
}
inline std::string* PrivateMessageEvent::mutable_sub_type() {
  // @@protoc_insertion_point(field_mutable:onebot.PrivateMessageEvent.sub_type)
  return _internal_mutable_sub_type();
}
inline const std::string& PrivateMessageEvent::_internal_sub_type() const {
  return sub_type_.Get();
}
inline void PrivateMessageEvent::_internal_set_sub_type(const std::string& value) {
  
  sub_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PrivateMessageEvent::set_sub_type(std::string&& value) {
  
  sub_type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:onebot.PrivateMessageEvent.sub_type)
}
inline void PrivateMessageEvent::set_sub_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sub_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:onebot.PrivateMessageEvent.sub_type)
}
inline void PrivateMessageEvent::set_sub_type(const char* value,
    size_t size) {
  
  sub_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:onebot.PrivateMessageEvent.sub_type)
}
inline std::string* PrivateMessageEvent::_internal_mutable_sub_type() {
  
  return sub_type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PrivateMessageEvent::release_sub_type() {
  // @@protoc_insertion_point(field_release:onebot.PrivateMessageEvent.sub_type)
  return sub_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PrivateMessageEvent::set_allocated_sub_type(std::string* sub_type) {
  if (sub_type != nullptr) {
    
  } else {
    
  }
  sub_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sub_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:onebot.PrivateMessageEvent.sub_type)
}

// int32 message_id = 6;
inline void PrivateMessageEvent::clear_message_id() {
  message_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PrivateMessageEvent::_internal_message_id() const {
  return message_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PrivateMessageEvent::message_id() const {
  // @@protoc_insertion_point(field_get:onebot.PrivateMessageEvent.message_id)
  return _internal_message_id();
}
inline void PrivateMessageEvent::_internal_set_message_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  message_id_ = value;
}
inline void PrivateMessageEvent::set_message_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_message_id(value);
  // @@protoc_insertion_point(field_set:onebot.PrivateMessageEvent.message_id)
}

// int64 user_id = 7;
inline void PrivateMessageEvent::clear_user_id() {
  user_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PrivateMessageEvent::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PrivateMessageEvent::user_id() const {
  // @@protoc_insertion_point(field_get:onebot.PrivateMessageEvent.user_id)
  return _internal_user_id();
}
inline void PrivateMessageEvent::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  user_id_ = value;
}
inline void PrivateMessageEvent::set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:onebot.PrivateMessageEvent.user_id)
}

// repeated .onebot.Message message = 8;
inline int PrivateMessageEvent::_internal_message_size() const {
  return message_.size();
}
inline int PrivateMessageEvent::message_size() const {
  return _internal_message_size();
}
inline ::onebot::Message* PrivateMessageEvent::mutable_message(int index) {
  // @@protoc_insertion_point(field_mutable:onebot.PrivateMessageEvent.message)
  return message_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onebot::Message >*
PrivateMessageEvent::mutable_message() {
  // @@protoc_insertion_point(field_mutable_list:onebot.PrivateMessageEvent.message)
  return &message_;
}
inline const ::onebot::Message& PrivateMessageEvent::_internal_message(int index) const {
  return message_.Get(index);
}
inline const ::onebot::Message& PrivateMessageEvent::message(int index) const {
  // @@protoc_insertion_point(field_get:onebot.PrivateMessageEvent.message)
  return _internal_message(index);
}
inline ::onebot::Message* PrivateMessageEvent::_internal_add_message() {
  return message_.Add();
}
inline ::onebot::Message* PrivateMessageEvent::add_message() {
  // @@protoc_insertion_point(field_add:onebot.PrivateMessageEvent.message)
  return _internal_add_message();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onebot::Message >&
PrivateMessageEvent::message() const {
  // @@protoc_insertion_point(field_list:onebot.PrivateMessageEvent.message)
  return message_;
}

// string raw_message = 9;
inline void PrivateMessageEvent::clear_raw_message() {
  raw_message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PrivateMessageEvent::raw_message() const {
  // @@protoc_insertion_point(field_get:onebot.PrivateMessageEvent.raw_message)
  return _internal_raw_message();
}
inline void PrivateMessageEvent::set_raw_message(const std::string& value) {
  _internal_set_raw_message(value);
  // @@protoc_insertion_point(field_set:onebot.PrivateMessageEvent.raw_message)
}
inline std::string* PrivateMessageEvent::mutable_raw_message() {
  // @@protoc_insertion_point(field_mutable:onebot.PrivateMessageEvent.raw_message)
  return _internal_mutable_raw_message();
}
inline const std::string& PrivateMessageEvent::_internal_raw_message() const {
  return raw_message_.Get();
}
inline void PrivateMessageEvent::_internal_set_raw_message(const std::string& value) {
  
  raw_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PrivateMessageEvent::set_raw_message(std::string&& value) {
  
  raw_message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:onebot.PrivateMessageEvent.raw_message)
}
inline void PrivateMessageEvent::set_raw_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  raw_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:onebot.PrivateMessageEvent.raw_message)
}
inline void PrivateMessageEvent::set_raw_message(const char* value,
    size_t size) {
  
  raw_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:onebot.PrivateMessageEvent.raw_message)
}
inline std::string* PrivateMessageEvent::_internal_mutable_raw_message() {
  
  return raw_message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PrivateMessageEvent::release_raw_message() {
  // @@protoc_insertion_point(field_release:onebot.PrivateMessageEvent.raw_message)
  return raw_message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PrivateMessageEvent::set_allocated_raw_message(std::string* raw_message) {
  if (raw_message != nullptr) {
    
  } else {
    
  }
  raw_message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), raw_message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:onebot.PrivateMessageEvent.raw_message)
}

// int32 font = 10;
inline void PrivateMessageEvent::clear_font() {
  font_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PrivateMessageEvent::_internal_font() const {
  return font_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PrivateMessageEvent::font() const {
  // @@protoc_insertion_point(field_get:onebot.PrivateMessageEvent.font)
  return _internal_font();
}
inline void PrivateMessageEvent::_internal_set_font(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  font_ = value;
}
inline void PrivateMessageEvent::set_font(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_font(value);
  // @@protoc_insertion_point(field_set:onebot.PrivateMessageEvent.font)
}

// .onebot.PrivateMessageEvent.Sender sender = 11;
inline bool PrivateMessageEvent::_internal_has_sender() const {
  return this != internal_default_instance() && sender_ != nullptr;
}
inline bool PrivateMessageEvent::has_sender() const {
  return _internal_has_sender();
}
inline void PrivateMessageEvent::clear_sender() {
  if (GetArena() == nullptr && sender_ != nullptr) {
    delete sender_;
  }
  sender_ = nullptr;
}
inline const ::onebot::PrivateMessageEvent_Sender& PrivateMessageEvent::_internal_sender() const {
  const ::onebot::PrivateMessageEvent_Sender* p = sender_;
  return p != nullptr ? *p : *reinterpret_cast<const ::onebot::PrivateMessageEvent_Sender*>(
      &::onebot::_PrivateMessageEvent_Sender_default_instance_);
}
inline const ::onebot::PrivateMessageEvent_Sender& PrivateMessageEvent::sender() const {
  // @@protoc_insertion_point(field_get:onebot.PrivateMessageEvent.sender)
  return _internal_sender();
}
inline void PrivateMessageEvent::unsafe_arena_set_allocated_sender(
    ::onebot::PrivateMessageEvent_Sender* sender) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sender_);
  }
  sender_ = sender;
  if (sender) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onebot.PrivateMessageEvent.sender)
}
inline ::onebot::PrivateMessageEvent_Sender* PrivateMessageEvent::release_sender() {
  
  ::onebot::PrivateMessageEvent_Sender* temp = sender_;
  sender_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::onebot::PrivateMessageEvent_Sender* PrivateMessageEvent::unsafe_arena_release_sender() {
  // @@protoc_insertion_point(field_release:onebot.PrivateMessageEvent.sender)
  
  ::onebot::PrivateMessageEvent_Sender* temp = sender_;
  sender_ = nullptr;
  return temp;
}
inline ::onebot::PrivateMessageEvent_Sender* PrivateMessageEvent::_internal_mutable_sender() {
  
  if (sender_ == nullptr) {
    auto* p = CreateMaybeMessage<::onebot::PrivateMessageEvent_Sender>(GetArena());
    sender_ = p;
  }
  return sender_;
}
inline ::onebot::PrivateMessageEvent_Sender* PrivateMessageEvent::mutable_sender() {
  // @@protoc_insertion_point(field_mutable:onebot.PrivateMessageEvent.sender)
  return _internal_mutable_sender();
}
inline void PrivateMessageEvent::set_allocated_sender(::onebot::PrivateMessageEvent_Sender* sender) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete sender_;
  }
  if (sender) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(sender);
    if (message_arena != submessage_arena) {
      sender = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sender, submessage_arena);
    }
    
  } else {
    
  }
  sender_ = sender;
  // @@protoc_insertion_point(field_set_allocated:onebot.PrivateMessageEvent.sender)
}

// -------------------------------------------------------------------

// GroupMessageEvent_Anonymous

// int64 id = 1;
inline void GroupMessageEvent_Anonymous::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GroupMessageEvent_Anonymous::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GroupMessageEvent_Anonymous::id() const {
  // @@protoc_insertion_point(field_get:onebot.GroupMessageEvent.Anonymous.id)
  return _internal_id();
}
inline void GroupMessageEvent_Anonymous::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void GroupMessageEvent_Anonymous::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:onebot.GroupMessageEvent.Anonymous.id)
}

// string name = 2;
inline void GroupMessageEvent_Anonymous::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GroupMessageEvent_Anonymous::name() const {
  // @@protoc_insertion_point(field_get:onebot.GroupMessageEvent.Anonymous.name)
  return _internal_name();
}
inline void GroupMessageEvent_Anonymous::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:onebot.GroupMessageEvent.Anonymous.name)
}
inline std::string* GroupMessageEvent_Anonymous::mutable_name() {
  // @@protoc_insertion_point(field_mutable:onebot.GroupMessageEvent.Anonymous.name)
  return _internal_mutable_name();
}
inline const std::string& GroupMessageEvent_Anonymous::_internal_name() const {
  return name_.Get();
}
inline void GroupMessageEvent_Anonymous::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GroupMessageEvent_Anonymous::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:onebot.GroupMessageEvent.Anonymous.name)
}
inline void GroupMessageEvent_Anonymous::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:onebot.GroupMessageEvent.Anonymous.name)
}
inline void GroupMessageEvent_Anonymous::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:onebot.GroupMessageEvent.Anonymous.name)
}
inline std::string* GroupMessageEvent_Anonymous::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GroupMessageEvent_Anonymous::release_name() {
  // @@protoc_insertion_point(field_release:onebot.GroupMessageEvent.Anonymous.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GroupMessageEvent_Anonymous::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:onebot.GroupMessageEvent.Anonymous.name)
}

// string flag = 3;
inline void GroupMessageEvent_Anonymous::clear_flag() {
  flag_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GroupMessageEvent_Anonymous::flag() const {
  // @@protoc_insertion_point(field_get:onebot.GroupMessageEvent.Anonymous.flag)
  return _internal_flag();
}
inline void GroupMessageEvent_Anonymous::set_flag(const std::string& value) {
  _internal_set_flag(value);
  // @@protoc_insertion_point(field_set:onebot.GroupMessageEvent.Anonymous.flag)
}
inline std::string* GroupMessageEvent_Anonymous::mutable_flag() {
  // @@protoc_insertion_point(field_mutable:onebot.GroupMessageEvent.Anonymous.flag)
  return _internal_mutable_flag();
}
inline const std::string& GroupMessageEvent_Anonymous::_internal_flag() const {
  return flag_.Get();
}
inline void GroupMessageEvent_Anonymous::_internal_set_flag(const std::string& value) {
  
  flag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GroupMessageEvent_Anonymous::set_flag(std::string&& value) {
  
  flag_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:onebot.GroupMessageEvent.Anonymous.flag)
}
inline void GroupMessageEvent_Anonymous::set_flag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  flag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:onebot.GroupMessageEvent.Anonymous.flag)
}
inline void GroupMessageEvent_Anonymous::set_flag(const char* value,
    size_t size) {
  
  flag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:onebot.GroupMessageEvent.Anonymous.flag)
}
inline std::string* GroupMessageEvent_Anonymous::_internal_mutable_flag() {
  
  return flag_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GroupMessageEvent_Anonymous::release_flag() {
  // @@protoc_insertion_point(field_release:onebot.GroupMessageEvent.Anonymous.flag)
  return flag_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GroupMessageEvent_Anonymous::set_allocated_flag(std::string* flag) {
  if (flag != nullptr) {
    
  } else {
    
  }
  flag_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), flag,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:onebot.GroupMessageEvent.Anonymous.flag)
}

// -------------------------------------------------------------------

// GroupMessageEvent_Sender

// int64 user_id = 1;
inline void GroupMessageEvent_Sender::clear_user_id() {
  user_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GroupMessageEvent_Sender::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GroupMessageEvent_Sender::user_id() const {
  // @@protoc_insertion_point(field_get:onebot.GroupMessageEvent.Sender.user_id)
  return _internal_user_id();
}
inline void GroupMessageEvent_Sender::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  user_id_ = value;
}
inline void GroupMessageEvent_Sender::set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:onebot.GroupMessageEvent.Sender.user_id)
}

// string nickname = 2;
inline void GroupMessageEvent_Sender::clear_nickname() {
  nickname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GroupMessageEvent_Sender::nickname() const {
  // @@protoc_insertion_point(field_get:onebot.GroupMessageEvent.Sender.nickname)
  return _internal_nickname();
}
inline void GroupMessageEvent_Sender::set_nickname(const std::string& value) {
  _internal_set_nickname(value);
  // @@protoc_insertion_point(field_set:onebot.GroupMessageEvent.Sender.nickname)
}
inline std::string* GroupMessageEvent_Sender::mutable_nickname() {
  // @@protoc_insertion_point(field_mutable:onebot.GroupMessageEvent.Sender.nickname)
  return _internal_mutable_nickname();
}
inline const std::string& GroupMessageEvent_Sender::_internal_nickname() const {
  return nickname_.Get();
}
inline void GroupMessageEvent_Sender::_internal_set_nickname(const std::string& value) {
  
  nickname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GroupMessageEvent_Sender::set_nickname(std::string&& value) {
  
  nickname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:onebot.GroupMessageEvent.Sender.nickname)
}
inline void GroupMessageEvent_Sender::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nickname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:onebot.GroupMessageEvent.Sender.nickname)
}
inline void GroupMessageEvent_Sender::set_nickname(const char* value,
    size_t size) {
  
  nickname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:onebot.GroupMessageEvent.Sender.nickname)
}
inline std::string* GroupMessageEvent_Sender::_internal_mutable_nickname() {
  
  return nickname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GroupMessageEvent_Sender::release_nickname() {
  // @@protoc_insertion_point(field_release:onebot.GroupMessageEvent.Sender.nickname)
  return nickname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GroupMessageEvent_Sender::set_allocated_nickname(std::string* nickname) {
  if (nickname != nullptr) {
    
  } else {
    
  }
  nickname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nickname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:onebot.GroupMessageEvent.Sender.nickname)
}

// string card = 3;
inline void GroupMessageEvent_Sender::clear_card() {
  card_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GroupMessageEvent_Sender::card() const {
  // @@protoc_insertion_point(field_get:onebot.GroupMessageEvent.Sender.card)
  return _internal_card();
}
inline void GroupMessageEvent_Sender::set_card(const std::string& value) {
  _internal_set_card(value);
  // @@protoc_insertion_point(field_set:onebot.GroupMessageEvent.Sender.card)
}
inline std::string* GroupMessageEvent_Sender::mutable_card() {
  // @@protoc_insertion_point(field_mutable:onebot.GroupMessageEvent.Sender.card)
  return _internal_mutable_card();
}
inline const std::string& GroupMessageEvent_Sender::_internal_card() const {
  return card_.Get();
}
inline void GroupMessageEvent_Sender::_internal_set_card(const std::string& value) {
  
  card_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GroupMessageEvent_Sender::set_card(std::string&& value) {
  
  card_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:onebot.GroupMessageEvent.Sender.card)
}
inline void GroupMessageEvent_Sender::set_card(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  card_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:onebot.GroupMessageEvent.Sender.card)
}
inline void GroupMessageEvent_Sender::set_card(const char* value,
    size_t size) {
  
  card_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:onebot.GroupMessageEvent.Sender.card)
}
inline std::string* GroupMessageEvent_Sender::_internal_mutable_card() {
  
  return card_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GroupMessageEvent_Sender::release_card() {
  // @@protoc_insertion_point(field_release:onebot.GroupMessageEvent.Sender.card)
  return card_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GroupMessageEvent_Sender::set_allocated_card(std::string* card) {
  if (card != nullptr) {
    
  } else {
    
  }
  card_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), card,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:onebot.GroupMessageEvent.Sender.card)
}

// string sex = 4;
inline void GroupMessageEvent_Sender::clear_sex() {
  sex_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GroupMessageEvent_Sender::sex() const {
  // @@protoc_insertion_point(field_get:onebot.GroupMessageEvent.Sender.sex)
  return _internal_sex();
}
inline void GroupMessageEvent_Sender::set_sex(const std::string& value) {
  _internal_set_sex(value);
  // @@protoc_insertion_point(field_set:onebot.GroupMessageEvent.Sender.sex)
}
inline std::string* GroupMessageEvent_Sender::mutable_sex() {
  // @@protoc_insertion_point(field_mutable:onebot.GroupMessageEvent.Sender.sex)
  return _internal_mutable_sex();
}
inline const std::string& GroupMessageEvent_Sender::_internal_sex() const {
  return sex_.Get();
}
inline void GroupMessageEvent_Sender::_internal_set_sex(const std::string& value) {
  
  sex_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GroupMessageEvent_Sender::set_sex(std::string&& value) {
  
  sex_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:onebot.GroupMessageEvent.Sender.sex)
}
inline void GroupMessageEvent_Sender::set_sex(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sex_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:onebot.GroupMessageEvent.Sender.sex)
}
inline void GroupMessageEvent_Sender::set_sex(const char* value,
    size_t size) {
  
  sex_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:onebot.GroupMessageEvent.Sender.sex)
}
inline std::string* GroupMessageEvent_Sender::_internal_mutable_sex() {
  
  return sex_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GroupMessageEvent_Sender::release_sex() {
  // @@protoc_insertion_point(field_release:onebot.GroupMessageEvent.Sender.sex)
  return sex_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GroupMessageEvent_Sender::set_allocated_sex(std::string* sex) {
  if (sex != nullptr) {
    
  } else {
    
  }
  sex_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sex,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:onebot.GroupMessageEvent.Sender.sex)
}

// int32 age = 5;
inline void GroupMessageEvent_Sender::clear_age() {
  age_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GroupMessageEvent_Sender::_internal_age() const {
  return age_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GroupMessageEvent_Sender::age() const {
  // @@protoc_insertion_point(field_get:onebot.GroupMessageEvent.Sender.age)
  return _internal_age();
}
inline void GroupMessageEvent_Sender::_internal_set_age(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  age_ = value;
}
inline void GroupMessageEvent_Sender::set_age(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_age(value);
  // @@protoc_insertion_point(field_set:onebot.GroupMessageEvent.Sender.age)
}

// string area = 6;
inline void GroupMessageEvent_Sender::clear_area() {
  area_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GroupMessageEvent_Sender::area() const {
  // @@protoc_insertion_point(field_get:onebot.GroupMessageEvent.Sender.area)
  return _internal_area();
}
inline void GroupMessageEvent_Sender::set_area(const std::string& value) {
  _internal_set_area(value);
  // @@protoc_insertion_point(field_set:onebot.GroupMessageEvent.Sender.area)
}
inline std::string* GroupMessageEvent_Sender::mutable_area() {
  // @@protoc_insertion_point(field_mutable:onebot.GroupMessageEvent.Sender.area)
  return _internal_mutable_area();
}
inline const std::string& GroupMessageEvent_Sender::_internal_area() const {
  return area_.Get();
}
inline void GroupMessageEvent_Sender::_internal_set_area(const std::string& value) {
  
  area_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GroupMessageEvent_Sender::set_area(std::string&& value) {
  
  area_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:onebot.GroupMessageEvent.Sender.area)
}
inline void GroupMessageEvent_Sender::set_area(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  area_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:onebot.GroupMessageEvent.Sender.area)
}
inline void GroupMessageEvent_Sender::set_area(const char* value,
    size_t size) {
  
  area_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:onebot.GroupMessageEvent.Sender.area)
}
inline std::string* GroupMessageEvent_Sender::_internal_mutable_area() {
  
  return area_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GroupMessageEvent_Sender::release_area() {
  // @@protoc_insertion_point(field_release:onebot.GroupMessageEvent.Sender.area)
  return area_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GroupMessageEvent_Sender::set_allocated_area(std::string* area) {
  if (area != nullptr) {
    
  } else {
    
  }
  area_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), area,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:onebot.GroupMessageEvent.Sender.area)
}

// string level = 7;
inline void GroupMessageEvent_Sender::clear_level() {
  level_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GroupMessageEvent_Sender::level() const {
  // @@protoc_insertion_point(field_get:onebot.GroupMessageEvent.Sender.level)
  return _internal_level();
}
inline void GroupMessageEvent_Sender::set_level(const std::string& value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:onebot.GroupMessageEvent.Sender.level)
}
inline std::string* GroupMessageEvent_Sender::mutable_level() {
  // @@protoc_insertion_point(field_mutable:onebot.GroupMessageEvent.Sender.level)
  return _internal_mutable_level();
}
inline const std::string& GroupMessageEvent_Sender::_internal_level() const {
  return level_.Get();
}
inline void GroupMessageEvent_Sender::_internal_set_level(const std::string& value) {
  
  level_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GroupMessageEvent_Sender::set_level(std::string&& value) {
  
  level_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:onebot.GroupMessageEvent.Sender.level)
}
inline void GroupMessageEvent_Sender::set_level(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  level_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:onebot.GroupMessageEvent.Sender.level)
}
inline void GroupMessageEvent_Sender::set_level(const char* value,
    size_t size) {
  
  level_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:onebot.GroupMessageEvent.Sender.level)
}
inline std::string* GroupMessageEvent_Sender::_internal_mutable_level() {
  
  return level_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GroupMessageEvent_Sender::release_level() {
  // @@protoc_insertion_point(field_release:onebot.GroupMessageEvent.Sender.level)
  return level_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GroupMessageEvent_Sender::set_allocated_level(std::string* level) {
  if (level != nullptr) {
    
  } else {
    
  }
  level_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), level,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:onebot.GroupMessageEvent.Sender.level)
}

// string role = 8;
inline void GroupMessageEvent_Sender::clear_role() {
  role_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GroupMessageEvent_Sender::role() const {
  // @@protoc_insertion_point(field_get:onebot.GroupMessageEvent.Sender.role)
  return _internal_role();
}
inline void GroupMessageEvent_Sender::set_role(const std::string& value) {
  _internal_set_role(value);
  // @@protoc_insertion_point(field_set:onebot.GroupMessageEvent.Sender.role)
}
inline std::string* GroupMessageEvent_Sender::mutable_role() {
  // @@protoc_insertion_point(field_mutable:onebot.GroupMessageEvent.Sender.role)
  return _internal_mutable_role();
}
inline const std::string& GroupMessageEvent_Sender::_internal_role() const {
  return role_.Get();
}
inline void GroupMessageEvent_Sender::_internal_set_role(const std::string& value) {
  
  role_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GroupMessageEvent_Sender::set_role(std::string&& value) {
  
  role_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:onebot.GroupMessageEvent.Sender.role)
}
inline void GroupMessageEvent_Sender::set_role(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  role_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:onebot.GroupMessageEvent.Sender.role)
}
inline void GroupMessageEvent_Sender::set_role(const char* value,
    size_t size) {
  
  role_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:onebot.GroupMessageEvent.Sender.role)
}
inline std::string* GroupMessageEvent_Sender::_internal_mutable_role() {
  
  return role_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GroupMessageEvent_Sender::release_role() {
  // @@protoc_insertion_point(field_release:onebot.GroupMessageEvent.Sender.role)
  return role_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GroupMessageEvent_Sender::set_allocated_role(std::string* role) {
  if (role != nullptr) {
    
  } else {
    
  }
  role_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), role,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:onebot.GroupMessageEvent.Sender.role)
}

// string title = 9;
inline void GroupMessageEvent_Sender::clear_title() {
  title_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GroupMessageEvent_Sender::title() const {
  // @@protoc_insertion_point(field_get:onebot.GroupMessageEvent.Sender.title)
  return _internal_title();
}
inline void GroupMessageEvent_Sender::set_title(const std::string& value) {
  _internal_set_title(value);
  // @@protoc_insertion_point(field_set:onebot.GroupMessageEvent.Sender.title)
}
inline std::string* GroupMessageEvent_Sender::mutable_title() {
  // @@protoc_insertion_point(field_mutable:onebot.GroupMessageEvent.Sender.title)
  return _internal_mutable_title();
}
inline const std::string& GroupMessageEvent_Sender::_internal_title() const {
  return title_.Get();
}
inline void GroupMessageEvent_Sender::_internal_set_title(const std::string& value) {
  
  title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GroupMessageEvent_Sender::set_title(std::string&& value) {
  
  title_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:onebot.GroupMessageEvent.Sender.title)
}
inline void GroupMessageEvent_Sender::set_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:onebot.GroupMessageEvent.Sender.title)
}
inline void GroupMessageEvent_Sender::set_title(const char* value,
    size_t size) {
  
  title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:onebot.GroupMessageEvent.Sender.title)
}
inline std::string* GroupMessageEvent_Sender::_internal_mutable_title() {
  
  return title_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GroupMessageEvent_Sender::release_title() {
  // @@protoc_insertion_point(field_release:onebot.GroupMessageEvent.Sender.title)
  return title_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GroupMessageEvent_Sender::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  title_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:onebot.GroupMessageEvent.Sender.title)
}

// -------------------------------------------------------------------

// GroupMessageEvent

// int64 time = 1;
inline void GroupMessageEvent::clear_time() {
  time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GroupMessageEvent::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GroupMessageEvent::time() const {
  // @@protoc_insertion_point(field_get:onebot.GroupMessageEvent.time)
  return _internal_time();
}
inline void GroupMessageEvent::_internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  time_ = value;
}
inline void GroupMessageEvent::set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:onebot.GroupMessageEvent.time)
}

// int64 self_id = 2;
inline void GroupMessageEvent::clear_self_id() {
  self_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GroupMessageEvent::_internal_self_id() const {
  return self_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GroupMessageEvent::self_id() const {
  // @@protoc_insertion_point(field_get:onebot.GroupMessageEvent.self_id)
  return _internal_self_id();
}
inline void GroupMessageEvent::_internal_set_self_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  self_id_ = value;
}
inline void GroupMessageEvent::set_self_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_self_id(value);
  // @@protoc_insertion_point(field_set:onebot.GroupMessageEvent.self_id)
}

// string post_type = 3;
inline void GroupMessageEvent::clear_post_type() {
  post_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GroupMessageEvent::post_type() const {
  // @@protoc_insertion_point(field_get:onebot.GroupMessageEvent.post_type)
  return _internal_post_type();
}
inline void GroupMessageEvent::set_post_type(const std::string& value) {
  _internal_set_post_type(value);
  // @@protoc_insertion_point(field_set:onebot.GroupMessageEvent.post_type)
}
inline std::string* GroupMessageEvent::mutable_post_type() {
  // @@protoc_insertion_point(field_mutable:onebot.GroupMessageEvent.post_type)
  return _internal_mutable_post_type();
}
inline const std::string& GroupMessageEvent::_internal_post_type() const {
  return post_type_.Get();
}
inline void GroupMessageEvent::_internal_set_post_type(const std::string& value) {
  
  post_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GroupMessageEvent::set_post_type(std::string&& value) {
  
  post_type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:onebot.GroupMessageEvent.post_type)
}
inline void GroupMessageEvent::set_post_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  post_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:onebot.GroupMessageEvent.post_type)
}
inline void GroupMessageEvent::set_post_type(const char* value,
    size_t size) {
  
  post_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:onebot.GroupMessageEvent.post_type)
}
inline std::string* GroupMessageEvent::_internal_mutable_post_type() {
  
  return post_type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GroupMessageEvent::release_post_type() {
  // @@protoc_insertion_point(field_release:onebot.GroupMessageEvent.post_type)
  return post_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GroupMessageEvent::set_allocated_post_type(std::string* post_type) {
  if (post_type != nullptr) {
    
  } else {
    
  }
  post_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), post_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:onebot.GroupMessageEvent.post_type)
}

// string message_type = 4;
inline void GroupMessageEvent::clear_message_type() {
  message_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GroupMessageEvent::message_type() const {
  // @@protoc_insertion_point(field_get:onebot.GroupMessageEvent.message_type)
  return _internal_message_type();
}
inline void GroupMessageEvent::set_message_type(const std::string& value) {
  _internal_set_message_type(value);
  // @@protoc_insertion_point(field_set:onebot.GroupMessageEvent.message_type)
}
inline std::string* GroupMessageEvent::mutable_message_type() {
  // @@protoc_insertion_point(field_mutable:onebot.GroupMessageEvent.message_type)
  return _internal_mutable_message_type();
}
inline const std::string& GroupMessageEvent::_internal_message_type() const {
  return message_type_.Get();
}
inline void GroupMessageEvent::_internal_set_message_type(const std::string& value) {
  
  message_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GroupMessageEvent::set_message_type(std::string&& value) {
  
  message_type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:onebot.GroupMessageEvent.message_type)
}
inline void GroupMessageEvent::set_message_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:onebot.GroupMessageEvent.message_type)
}
inline void GroupMessageEvent::set_message_type(const char* value,
    size_t size) {
  
  message_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:onebot.GroupMessageEvent.message_type)
}
inline std::string* GroupMessageEvent::_internal_mutable_message_type() {
  
  return message_type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GroupMessageEvent::release_message_type() {
  // @@protoc_insertion_point(field_release:onebot.GroupMessageEvent.message_type)
  return message_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GroupMessageEvent::set_allocated_message_type(std::string* message_type) {
  if (message_type != nullptr) {
    
  } else {
    
  }
  message_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:onebot.GroupMessageEvent.message_type)
}

// string sub_type = 5;
inline void GroupMessageEvent::clear_sub_type() {
  sub_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GroupMessageEvent::sub_type() const {
  // @@protoc_insertion_point(field_get:onebot.GroupMessageEvent.sub_type)
  return _internal_sub_type();
}
inline void GroupMessageEvent::set_sub_type(const std::string& value) {
  _internal_set_sub_type(value);
  // @@protoc_insertion_point(field_set:onebot.GroupMessageEvent.sub_type)
}
inline std::string* GroupMessageEvent::mutable_sub_type() {
  // @@protoc_insertion_point(field_mutable:onebot.GroupMessageEvent.sub_type)
  return _internal_mutable_sub_type();
}
inline const std::string& GroupMessageEvent::_internal_sub_type() const {
  return sub_type_.Get();
}
inline void GroupMessageEvent::_internal_set_sub_type(const std::string& value) {
  
  sub_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GroupMessageEvent::set_sub_type(std::string&& value) {
  
  sub_type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:onebot.GroupMessageEvent.sub_type)
}
inline void GroupMessageEvent::set_sub_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sub_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:onebot.GroupMessageEvent.sub_type)
}
inline void GroupMessageEvent::set_sub_type(const char* value,
    size_t size) {
  
  sub_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:onebot.GroupMessageEvent.sub_type)
}
inline std::string* GroupMessageEvent::_internal_mutable_sub_type() {
  
  return sub_type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GroupMessageEvent::release_sub_type() {
  // @@protoc_insertion_point(field_release:onebot.GroupMessageEvent.sub_type)
  return sub_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GroupMessageEvent::set_allocated_sub_type(std::string* sub_type) {
  if (sub_type != nullptr) {
    
  } else {
    
  }
  sub_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sub_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:onebot.GroupMessageEvent.sub_type)
}

// int32 message_id = 6;
inline void GroupMessageEvent::clear_message_id() {
  message_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GroupMessageEvent::_internal_message_id() const {
  return message_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GroupMessageEvent::message_id() const {
  // @@protoc_insertion_point(field_get:onebot.GroupMessageEvent.message_id)
  return _internal_message_id();
}
inline void GroupMessageEvent::_internal_set_message_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  message_id_ = value;
}
inline void GroupMessageEvent::set_message_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_message_id(value);
  // @@protoc_insertion_point(field_set:onebot.GroupMessageEvent.message_id)
}

// int64 group_id = 7;
inline void GroupMessageEvent::clear_group_id() {
  group_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GroupMessageEvent::_internal_group_id() const {
  return group_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GroupMessageEvent::group_id() const {
  // @@protoc_insertion_point(field_get:onebot.GroupMessageEvent.group_id)
  return _internal_group_id();
}
inline void GroupMessageEvent::_internal_set_group_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  group_id_ = value;
}
inline void GroupMessageEvent::set_group_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:onebot.GroupMessageEvent.group_id)
}

// int64 user_id = 8;
inline void GroupMessageEvent::clear_user_id() {
  user_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GroupMessageEvent::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GroupMessageEvent::user_id() const {
  // @@protoc_insertion_point(field_get:onebot.GroupMessageEvent.user_id)
  return _internal_user_id();
}
inline void GroupMessageEvent::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  user_id_ = value;
}
inline void GroupMessageEvent::set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:onebot.GroupMessageEvent.user_id)
}

// .onebot.GroupMessageEvent.Anonymous anonymous = 9;
inline bool GroupMessageEvent::_internal_has_anonymous() const {
  return this != internal_default_instance() && anonymous_ != nullptr;
}
inline bool GroupMessageEvent::has_anonymous() const {
  return _internal_has_anonymous();
}
inline void GroupMessageEvent::clear_anonymous() {
  if (GetArena() == nullptr && anonymous_ != nullptr) {
    delete anonymous_;
  }
  anonymous_ = nullptr;
}
inline const ::onebot::GroupMessageEvent_Anonymous& GroupMessageEvent::_internal_anonymous() const {
  const ::onebot::GroupMessageEvent_Anonymous* p = anonymous_;
  return p != nullptr ? *p : *reinterpret_cast<const ::onebot::GroupMessageEvent_Anonymous*>(
      &::onebot::_GroupMessageEvent_Anonymous_default_instance_);
}
inline const ::onebot::GroupMessageEvent_Anonymous& GroupMessageEvent::anonymous() const {
  // @@protoc_insertion_point(field_get:onebot.GroupMessageEvent.anonymous)
  return _internal_anonymous();
}
inline void GroupMessageEvent::unsafe_arena_set_allocated_anonymous(
    ::onebot::GroupMessageEvent_Anonymous* anonymous) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(anonymous_);
  }
  anonymous_ = anonymous;
  if (anonymous) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onebot.GroupMessageEvent.anonymous)
}
inline ::onebot::GroupMessageEvent_Anonymous* GroupMessageEvent::release_anonymous() {
  
  ::onebot::GroupMessageEvent_Anonymous* temp = anonymous_;
  anonymous_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::onebot::GroupMessageEvent_Anonymous* GroupMessageEvent::unsafe_arena_release_anonymous() {
  // @@protoc_insertion_point(field_release:onebot.GroupMessageEvent.anonymous)
  
  ::onebot::GroupMessageEvent_Anonymous* temp = anonymous_;
  anonymous_ = nullptr;
  return temp;
}
inline ::onebot::GroupMessageEvent_Anonymous* GroupMessageEvent::_internal_mutable_anonymous() {
  
  if (anonymous_ == nullptr) {
    auto* p = CreateMaybeMessage<::onebot::GroupMessageEvent_Anonymous>(GetArena());
    anonymous_ = p;
  }
  return anonymous_;
}
inline ::onebot::GroupMessageEvent_Anonymous* GroupMessageEvent::mutable_anonymous() {
  // @@protoc_insertion_point(field_mutable:onebot.GroupMessageEvent.anonymous)
  return _internal_mutable_anonymous();
}
inline void GroupMessageEvent::set_allocated_anonymous(::onebot::GroupMessageEvent_Anonymous* anonymous) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete anonymous_;
  }
  if (anonymous) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(anonymous);
    if (message_arena != submessage_arena) {
      anonymous = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, anonymous, submessage_arena);
    }
    
  } else {
    
  }
  anonymous_ = anonymous;
  // @@protoc_insertion_point(field_set_allocated:onebot.GroupMessageEvent.anonymous)
}

// repeated .onebot.Message message = 10;
inline int GroupMessageEvent::_internal_message_size() const {
  return message_.size();
}
inline int GroupMessageEvent::message_size() const {
  return _internal_message_size();
}
inline ::onebot::Message* GroupMessageEvent::mutable_message(int index) {
  // @@protoc_insertion_point(field_mutable:onebot.GroupMessageEvent.message)
  return message_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onebot::Message >*
GroupMessageEvent::mutable_message() {
  // @@protoc_insertion_point(field_mutable_list:onebot.GroupMessageEvent.message)
  return &message_;
}
inline const ::onebot::Message& GroupMessageEvent::_internal_message(int index) const {
  return message_.Get(index);
}
inline const ::onebot::Message& GroupMessageEvent::message(int index) const {
  // @@protoc_insertion_point(field_get:onebot.GroupMessageEvent.message)
  return _internal_message(index);
}
inline ::onebot::Message* GroupMessageEvent::_internal_add_message() {
  return message_.Add();
}
inline ::onebot::Message* GroupMessageEvent::add_message() {
  // @@protoc_insertion_point(field_add:onebot.GroupMessageEvent.message)
  return _internal_add_message();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onebot::Message >&
GroupMessageEvent::message() const {
  // @@protoc_insertion_point(field_list:onebot.GroupMessageEvent.message)
  return message_;
}

// string raw_message = 11;
inline void GroupMessageEvent::clear_raw_message() {
  raw_message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GroupMessageEvent::raw_message() const {
  // @@protoc_insertion_point(field_get:onebot.GroupMessageEvent.raw_message)
  return _internal_raw_message();
}
inline void GroupMessageEvent::set_raw_message(const std::string& value) {
  _internal_set_raw_message(value);
  // @@protoc_insertion_point(field_set:onebot.GroupMessageEvent.raw_message)
}
inline std::string* GroupMessageEvent::mutable_raw_message() {
  // @@protoc_insertion_point(field_mutable:onebot.GroupMessageEvent.raw_message)
  return _internal_mutable_raw_message();
}
inline const std::string& GroupMessageEvent::_internal_raw_message() const {
  return raw_message_.Get();
}
inline void GroupMessageEvent::_internal_set_raw_message(const std::string& value) {
  
  raw_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GroupMessageEvent::set_raw_message(std::string&& value) {
  
  raw_message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:onebot.GroupMessageEvent.raw_message)
}
inline void GroupMessageEvent::set_raw_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  raw_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:onebot.GroupMessageEvent.raw_message)
}
inline void GroupMessageEvent::set_raw_message(const char* value,
    size_t size) {
  
  raw_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:onebot.GroupMessageEvent.raw_message)
}
inline std::string* GroupMessageEvent::_internal_mutable_raw_message() {
  
  return raw_message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GroupMessageEvent::release_raw_message() {
  // @@protoc_insertion_point(field_release:onebot.GroupMessageEvent.raw_message)
  return raw_message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GroupMessageEvent::set_allocated_raw_message(std::string* raw_message) {
  if (raw_message != nullptr) {
    
  } else {
    
  }
  raw_message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), raw_message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:onebot.GroupMessageEvent.raw_message)
}

// int32 font = 12;
inline void GroupMessageEvent::clear_font() {
  font_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GroupMessageEvent::_internal_font() const {
  return font_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GroupMessageEvent::font() const {
  // @@protoc_insertion_point(field_get:onebot.GroupMessageEvent.font)
  return _internal_font();
}
inline void GroupMessageEvent::_internal_set_font(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  font_ = value;
}
inline void GroupMessageEvent::set_font(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_font(value);
  // @@protoc_insertion_point(field_set:onebot.GroupMessageEvent.font)
}

// .onebot.GroupMessageEvent.Sender sender = 13;
inline bool GroupMessageEvent::_internal_has_sender() const {
  return this != internal_default_instance() && sender_ != nullptr;
}
inline bool GroupMessageEvent::has_sender() const {
  return _internal_has_sender();
}
inline void GroupMessageEvent::clear_sender() {
  if (GetArena() == nullptr && sender_ != nullptr) {
    delete sender_;
  }
  sender_ = nullptr;
}
inline const ::onebot::GroupMessageEvent_Sender& GroupMessageEvent::_internal_sender() const {
  const ::onebot::GroupMessageEvent_Sender* p = sender_;
  return p != nullptr ? *p : *reinterpret_cast<const ::onebot::GroupMessageEvent_Sender*>(
      &::onebot::_GroupMessageEvent_Sender_default_instance_);
}
inline const ::onebot::GroupMessageEvent_Sender& GroupMessageEvent::sender() const {
  // @@protoc_insertion_point(field_get:onebot.GroupMessageEvent.sender)
  return _internal_sender();
}
inline void GroupMessageEvent::unsafe_arena_set_allocated_sender(
    ::onebot::GroupMessageEvent_Sender* sender) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sender_);
  }
  sender_ = sender;
  if (sender) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onebot.GroupMessageEvent.sender)
}
inline ::onebot::GroupMessageEvent_Sender* GroupMessageEvent::release_sender() {
  
  ::onebot::GroupMessageEvent_Sender* temp = sender_;
  sender_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::onebot::GroupMessageEvent_Sender* GroupMessageEvent::unsafe_arena_release_sender() {
  // @@protoc_insertion_point(field_release:onebot.GroupMessageEvent.sender)
  
  ::onebot::GroupMessageEvent_Sender* temp = sender_;
  sender_ = nullptr;
  return temp;
}
inline ::onebot::GroupMessageEvent_Sender* GroupMessageEvent::_internal_mutable_sender() {
  
  if (sender_ == nullptr) {
    auto* p = CreateMaybeMessage<::onebot::GroupMessageEvent_Sender>(GetArena());
    sender_ = p;
  }
  return sender_;
}
inline ::onebot::GroupMessageEvent_Sender* GroupMessageEvent::mutable_sender() {
  // @@protoc_insertion_point(field_mutable:onebot.GroupMessageEvent.sender)
  return _internal_mutable_sender();
}
inline void GroupMessageEvent::set_allocated_sender(::onebot::GroupMessageEvent_Sender* sender) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete sender_;
  }
  if (sender) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(sender);
    if (message_arena != submessage_arena) {
      sender = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sender, submessage_arena);
    }
    
  } else {
    
  }
  sender_ = sender;
  // @@protoc_insertion_point(field_set_allocated:onebot.GroupMessageEvent.sender)
}

// -------------------------------------------------------------------

// GroupUploadNoticeEvent_File

// string id = 1;
inline void GroupUploadNoticeEvent_File::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GroupUploadNoticeEvent_File::id() const {
  // @@protoc_insertion_point(field_get:onebot.GroupUploadNoticeEvent.File.id)
  return _internal_id();
}
inline void GroupUploadNoticeEvent_File::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:onebot.GroupUploadNoticeEvent.File.id)
}
inline std::string* GroupUploadNoticeEvent_File::mutable_id() {
  // @@protoc_insertion_point(field_mutable:onebot.GroupUploadNoticeEvent.File.id)
  return _internal_mutable_id();
}
inline const std::string& GroupUploadNoticeEvent_File::_internal_id() const {
  return id_.Get();
}
inline void GroupUploadNoticeEvent_File::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GroupUploadNoticeEvent_File::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:onebot.GroupUploadNoticeEvent.File.id)
}
inline void GroupUploadNoticeEvent_File::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:onebot.GroupUploadNoticeEvent.File.id)
}
inline void GroupUploadNoticeEvent_File::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:onebot.GroupUploadNoticeEvent.File.id)
}
inline std::string* GroupUploadNoticeEvent_File::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GroupUploadNoticeEvent_File::release_id() {
  // @@protoc_insertion_point(field_release:onebot.GroupUploadNoticeEvent.File.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GroupUploadNoticeEvent_File::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:onebot.GroupUploadNoticeEvent.File.id)
}

// string name = 2;
inline void GroupUploadNoticeEvent_File::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GroupUploadNoticeEvent_File::name() const {
  // @@protoc_insertion_point(field_get:onebot.GroupUploadNoticeEvent.File.name)
  return _internal_name();
}
inline void GroupUploadNoticeEvent_File::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:onebot.GroupUploadNoticeEvent.File.name)
}
inline std::string* GroupUploadNoticeEvent_File::mutable_name() {
  // @@protoc_insertion_point(field_mutable:onebot.GroupUploadNoticeEvent.File.name)
  return _internal_mutable_name();
}
inline const std::string& GroupUploadNoticeEvent_File::_internal_name() const {
  return name_.Get();
}
inline void GroupUploadNoticeEvent_File::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GroupUploadNoticeEvent_File::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:onebot.GroupUploadNoticeEvent.File.name)
}
inline void GroupUploadNoticeEvent_File::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:onebot.GroupUploadNoticeEvent.File.name)
}
inline void GroupUploadNoticeEvent_File::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:onebot.GroupUploadNoticeEvent.File.name)
}
inline std::string* GroupUploadNoticeEvent_File::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GroupUploadNoticeEvent_File::release_name() {
  // @@protoc_insertion_point(field_release:onebot.GroupUploadNoticeEvent.File.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GroupUploadNoticeEvent_File::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:onebot.GroupUploadNoticeEvent.File.name)
}

// int64 size = 3;
inline void GroupUploadNoticeEvent_File::clear_size() {
  size_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GroupUploadNoticeEvent_File::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GroupUploadNoticeEvent_File::size() const {
  // @@protoc_insertion_point(field_get:onebot.GroupUploadNoticeEvent.File.size)
  return _internal_size();
}
inline void GroupUploadNoticeEvent_File::_internal_set_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  size_ = value;
}
inline void GroupUploadNoticeEvent_File::set_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:onebot.GroupUploadNoticeEvent.File.size)
}

// int64 busid = 4;
inline void GroupUploadNoticeEvent_File::clear_busid() {
  busid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GroupUploadNoticeEvent_File::_internal_busid() const {
  return busid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GroupUploadNoticeEvent_File::busid() const {
  // @@protoc_insertion_point(field_get:onebot.GroupUploadNoticeEvent.File.busid)
  return _internal_busid();
}
inline void GroupUploadNoticeEvent_File::_internal_set_busid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  busid_ = value;
}
inline void GroupUploadNoticeEvent_File::set_busid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_busid(value);
  // @@protoc_insertion_point(field_set:onebot.GroupUploadNoticeEvent.File.busid)
}

// -------------------------------------------------------------------

// GroupUploadNoticeEvent

// int64 time = 1;
inline void GroupUploadNoticeEvent::clear_time() {
  time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GroupUploadNoticeEvent::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GroupUploadNoticeEvent::time() const {
  // @@protoc_insertion_point(field_get:onebot.GroupUploadNoticeEvent.time)
  return _internal_time();
}
inline void GroupUploadNoticeEvent::_internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  time_ = value;
}
inline void GroupUploadNoticeEvent::set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:onebot.GroupUploadNoticeEvent.time)
}

// int64 self_id = 2;
inline void GroupUploadNoticeEvent::clear_self_id() {
  self_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GroupUploadNoticeEvent::_internal_self_id() const {
  return self_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GroupUploadNoticeEvent::self_id() const {
  // @@protoc_insertion_point(field_get:onebot.GroupUploadNoticeEvent.self_id)
  return _internal_self_id();
}
inline void GroupUploadNoticeEvent::_internal_set_self_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  self_id_ = value;
}
inline void GroupUploadNoticeEvent::set_self_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_self_id(value);
  // @@protoc_insertion_point(field_set:onebot.GroupUploadNoticeEvent.self_id)
}

// string post_type = 3;
inline void GroupUploadNoticeEvent::clear_post_type() {
  post_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GroupUploadNoticeEvent::post_type() const {
  // @@protoc_insertion_point(field_get:onebot.GroupUploadNoticeEvent.post_type)
  return _internal_post_type();
}
inline void GroupUploadNoticeEvent::set_post_type(const std::string& value) {
  _internal_set_post_type(value);
  // @@protoc_insertion_point(field_set:onebot.GroupUploadNoticeEvent.post_type)
}
inline std::string* GroupUploadNoticeEvent::mutable_post_type() {
  // @@protoc_insertion_point(field_mutable:onebot.GroupUploadNoticeEvent.post_type)
  return _internal_mutable_post_type();
}
inline const std::string& GroupUploadNoticeEvent::_internal_post_type() const {
  return post_type_.Get();
}
inline void GroupUploadNoticeEvent::_internal_set_post_type(const std::string& value) {
  
  post_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GroupUploadNoticeEvent::set_post_type(std::string&& value) {
  
  post_type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:onebot.GroupUploadNoticeEvent.post_type)
}
inline void GroupUploadNoticeEvent::set_post_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  post_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:onebot.GroupUploadNoticeEvent.post_type)
}
inline void GroupUploadNoticeEvent::set_post_type(const char* value,
    size_t size) {
  
  post_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:onebot.GroupUploadNoticeEvent.post_type)
}
inline std::string* GroupUploadNoticeEvent::_internal_mutable_post_type() {
  
  return post_type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GroupUploadNoticeEvent::release_post_type() {
  // @@protoc_insertion_point(field_release:onebot.GroupUploadNoticeEvent.post_type)
  return post_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GroupUploadNoticeEvent::set_allocated_post_type(std::string* post_type) {
  if (post_type != nullptr) {
    
  } else {
    
  }
  post_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), post_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:onebot.GroupUploadNoticeEvent.post_type)
}

// string notice_type = 4;
inline void GroupUploadNoticeEvent::clear_notice_type() {
  notice_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GroupUploadNoticeEvent::notice_type() const {
  // @@protoc_insertion_point(field_get:onebot.GroupUploadNoticeEvent.notice_type)
  return _internal_notice_type();
}
inline void GroupUploadNoticeEvent::set_notice_type(const std::string& value) {
  _internal_set_notice_type(value);
  // @@protoc_insertion_point(field_set:onebot.GroupUploadNoticeEvent.notice_type)
}
inline std::string* GroupUploadNoticeEvent::mutable_notice_type() {
  // @@protoc_insertion_point(field_mutable:onebot.GroupUploadNoticeEvent.notice_type)
  return _internal_mutable_notice_type();
}
inline const std::string& GroupUploadNoticeEvent::_internal_notice_type() const {
  return notice_type_.Get();
}
inline void GroupUploadNoticeEvent::_internal_set_notice_type(const std::string& value) {
  
  notice_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GroupUploadNoticeEvent::set_notice_type(std::string&& value) {
  
  notice_type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:onebot.GroupUploadNoticeEvent.notice_type)
}
inline void GroupUploadNoticeEvent::set_notice_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  notice_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:onebot.GroupUploadNoticeEvent.notice_type)
}
inline void GroupUploadNoticeEvent::set_notice_type(const char* value,
    size_t size) {
  
  notice_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:onebot.GroupUploadNoticeEvent.notice_type)
}
inline std::string* GroupUploadNoticeEvent::_internal_mutable_notice_type() {
  
  return notice_type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GroupUploadNoticeEvent::release_notice_type() {
  // @@protoc_insertion_point(field_release:onebot.GroupUploadNoticeEvent.notice_type)
  return notice_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GroupUploadNoticeEvent::set_allocated_notice_type(std::string* notice_type) {
  if (notice_type != nullptr) {
    
  } else {
    
  }
  notice_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), notice_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:onebot.GroupUploadNoticeEvent.notice_type)
}

// int64 group_id = 5;
inline void GroupUploadNoticeEvent::clear_group_id() {
  group_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GroupUploadNoticeEvent::_internal_group_id() const {
  return group_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GroupUploadNoticeEvent::group_id() const {
  // @@protoc_insertion_point(field_get:onebot.GroupUploadNoticeEvent.group_id)
  return _internal_group_id();
}
inline void GroupUploadNoticeEvent::_internal_set_group_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  group_id_ = value;
}
inline void GroupUploadNoticeEvent::set_group_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:onebot.GroupUploadNoticeEvent.group_id)
}

// int64 user_id = 6;
inline void GroupUploadNoticeEvent::clear_user_id() {
  user_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GroupUploadNoticeEvent::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GroupUploadNoticeEvent::user_id() const {
  // @@protoc_insertion_point(field_get:onebot.GroupUploadNoticeEvent.user_id)
  return _internal_user_id();
}
inline void GroupUploadNoticeEvent::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  user_id_ = value;
}
inline void GroupUploadNoticeEvent::set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:onebot.GroupUploadNoticeEvent.user_id)
}

// .onebot.GroupUploadNoticeEvent.File file = 7;
inline bool GroupUploadNoticeEvent::_internal_has_file() const {
  return this != internal_default_instance() && file_ != nullptr;
}
inline bool GroupUploadNoticeEvent::has_file() const {
  return _internal_has_file();
}
inline void GroupUploadNoticeEvent::clear_file() {
  if (GetArena() == nullptr && file_ != nullptr) {
    delete file_;
  }
  file_ = nullptr;
}
inline const ::onebot::GroupUploadNoticeEvent_File& GroupUploadNoticeEvent::_internal_file() const {
  const ::onebot::GroupUploadNoticeEvent_File* p = file_;
  return p != nullptr ? *p : *reinterpret_cast<const ::onebot::GroupUploadNoticeEvent_File*>(
      &::onebot::_GroupUploadNoticeEvent_File_default_instance_);
}
inline const ::onebot::GroupUploadNoticeEvent_File& GroupUploadNoticeEvent::file() const {
  // @@protoc_insertion_point(field_get:onebot.GroupUploadNoticeEvent.file)
  return _internal_file();
}
inline void GroupUploadNoticeEvent::unsafe_arena_set_allocated_file(
    ::onebot::GroupUploadNoticeEvent_File* file) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(file_);
  }
  file_ = file;
  if (file) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onebot.GroupUploadNoticeEvent.file)
}
inline ::onebot::GroupUploadNoticeEvent_File* GroupUploadNoticeEvent::release_file() {
  
  ::onebot::GroupUploadNoticeEvent_File* temp = file_;
  file_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::onebot::GroupUploadNoticeEvent_File* GroupUploadNoticeEvent::unsafe_arena_release_file() {
  // @@protoc_insertion_point(field_release:onebot.GroupUploadNoticeEvent.file)
  
  ::onebot::GroupUploadNoticeEvent_File* temp = file_;
  file_ = nullptr;
  return temp;
}
inline ::onebot::GroupUploadNoticeEvent_File* GroupUploadNoticeEvent::_internal_mutable_file() {
  
  if (file_ == nullptr) {
    auto* p = CreateMaybeMessage<::onebot::GroupUploadNoticeEvent_File>(GetArena());
    file_ = p;
  }
  return file_;
}
inline ::onebot::GroupUploadNoticeEvent_File* GroupUploadNoticeEvent::mutable_file() {
  // @@protoc_insertion_point(field_mutable:onebot.GroupUploadNoticeEvent.file)
  return _internal_mutable_file();
}
inline void GroupUploadNoticeEvent::set_allocated_file(::onebot::GroupUploadNoticeEvent_File* file) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete file_;
  }
  if (file) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(file);
    if (message_arena != submessage_arena) {
      file = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, file, submessage_arena);
    }
    
  } else {
    
  }
  file_ = file;
  // @@protoc_insertion_point(field_set_allocated:onebot.GroupUploadNoticeEvent.file)
}

// -------------------------------------------------------------------

// GroupAdminNoticeEvent

// int64 time = 1;
inline void GroupAdminNoticeEvent::clear_time() {
  time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GroupAdminNoticeEvent::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GroupAdminNoticeEvent::time() const {
  // @@protoc_insertion_point(field_get:onebot.GroupAdminNoticeEvent.time)
  return _internal_time();
}
inline void GroupAdminNoticeEvent::_internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  time_ = value;
}
inline void GroupAdminNoticeEvent::set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:onebot.GroupAdminNoticeEvent.time)
}

// int64 self_id = 2;
inline void GroupAdminNoticeEvent::clear_self_id() {
  self_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GroupAdminNoticeEvent::_internal_self_id() const {
  return self_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GroupAdminNoticeEvent::self_id() const {
  // @@protoc_insertion_point(field_get:onebot.GroupAdminNoticeEvent.self_id)
  return _internal_self_id();
}
inline void GroupAdminNoticeEvent::_internal_set_self_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  self_id_ = value;
}
inline void GroupAdminNoticeEvent::set_self_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_self_id(value);
  // @@protoc_insertion_point(field_set:onebot.GroupAdminNoticeEvent.self_id)
}

// string post_type = 3;
inline void GroupAdminNoticeEvent::clear_post_type() {
  post_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GroupAdminNoticeEvent::post_type() const {
  // @@protoc_insertion_point(field_get:onebot.GroupAdminNoticeEvent.post_type)
  return _internal_post_type();
}
inline void GroupAdminNoticeEvent::set_post_type(const std::string& value) {
  _internal_set_post_type(value);
  // @@protoc_insertion_point(field_set:onebot.GroupAdminNoticeEvent.post_type)
}
inline std::string* GroupAdminNoticeEvent::mutable_post_type() {
  // @@protoc_insertion_point(field_mutable:onebot.GroupAdminNoticeEvent.post_type)
  return _internal_mutable_post_type();
}
inline const std::string& GroupAdminNoticeEvent::_internal_post_type() const {
  return post_type_.Get();
}
inline void GroupAdminNoticeEvent::_internal_set_post_type(const std::string& value) {
  
  post_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GroupAdminNoticeEvent::set_post_type(std::string&& value) {
  
  post_type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:onebot.GroupAdminNoticeEvent.post_type)
}
inline void GroupAdminNoticeEvent::set_post_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  post_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:onebot.GroupAdminNoticeEvent.post_type)
}
inline void GroupAdminNoticeEvent::set_post_type(const char* value,
    size_t size) {
  
  post_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:onebot.GroupAdminNoticeEvent.post_type)
}
inline std::string* GroupAdminNoticeEvent::_internal_mutable_post_type() {
  
  return post_type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GroupAdminNoticeEvent::release_post_type() {
  // @@protoc_insertion_point(field_release:onebot.GroupAdminNoticeEvent.post_type)
  return post_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GroupAdminNoticeEvent::set_allocated_post_type(std::string* post_type) {
  if (post_type != nullptr) {
    
  } else {
    
  }
  post_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), post_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:onebot.GroupAdminNoticeEvent.post_type)
}

// string notice_type = 4;
inline void GroupAdminNoticeEvent::clear_notice_type() {
  notice_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GroupAdminNoticeEvent::notice_type() const {
  // @@protoc_insertion_point(field_get:onebot.GroupAdminNoticeEvent.notice_type)
  return _internal_notice_type();
}
inline void GroupAdminNoticeEvent::set_notice_type(const std::string& value) {
  _internal_set_notice_type(value);
  // @@protoc_insertion_point(field_set:onebot.GroupAdminNoticeEvent.notice_type)
}
inline std::string* GroupAdminNoticeEvent::mutable_notice_type() {
  // @@protoc_insertion_point(field_mutable:onebot.GroupAdminNoticeEvent.notice_type)
  return _internal_mutable_notice_type();
}
inline const std::string& GroupAdminNoticeEvent::_internal_notice_type() const {
  return notice_type_.Get();
}
inline void GroupAdminNoticeEvent::_internal_set_notice_type(const std::string& value) {
  
  notice_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GroupAdminNoticeEvent::set_notice_type(std::string&& value) {
  
  notice_type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:onebot.GroupAdminNoticeEvent.notice_type)
}
inline void GroupAdminNoticeEvent::set_notice_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  notice_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:onebot.GroupAdminNoticeEvent.notice_type)
}
inline void GroupAdminNoticeEvent::set_notice_type(const char* value,
    size_t size) {
  
  notice_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:onebot.GroupAdminNoticeEvent.notice_type)
}
inline std::string* GroupAdminNoticeEvent::_internal_mutable_notice_type() {
  
  return notice_type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GroupAdminNoticeEvent::release_notice_type() {
  // @@protoc_insertion_point(field_release:onebot.GroupAdminNoticeEvent.notice_type)
  return notice_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GroupAdminNoticeEvent::set_allocated_notice_type(std::string* notice_type) {
  if (notice_type != nullptr) {
    
  } else {
    
  }
  notice_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), notice_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:onebot.GroupAdminNoticeEvent.notice_type)
}

// string sub_type = 5;
inline void GroupAdminNoticeEvent::clear_sub_type() {
  sub_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GroupAdminNoticeEvent::sub_type() const {
  // @@protoc_insertion_point(field_get:onebot.GroupAdminNoticeEvent.sub_type)
  return _internal_sub_type();
}
inline void GroupAdminNoticeEvent::set_sub_type(const std::string& value) {
  _internal_set_sub_type(value);
  // @@protoc_insertion_point(field_set:onebot.GroupAdminNoticeEvent.sub_type)
}
inline std::string* GroupAdminNoticeEvent::mutable_sub_type() {
  // @@protoc_insertion_point(field_mutable:onebot.GroupAdminNoticeEvent.sub_type)
  return _internal_mutable_sub_type();
}
inline const std::string& GroupAdminNoticeEvent::_internal_sub_type() const {
  return sub_type_.Get();
}
inline void GroupAdminNoticeEvent::_internal_set_sub_type(const std::string& value) {
  
  sub_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GroupAdminNoticeEvent::set_sub_type(std::string&& value) {
  
  sub_type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:onebot.GroupAdminNoticeEvent.sub_type)
}
inline void GroupAdminNoticeEvent::set_sub_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sub_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:onebot.GroupAdminNoticeEvent.sub_type)
}
inline void GroupAdminNoticeEvent::set_sub_type(const char* value,
    size_t size) {
  
  sub_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:onebot.GroupAdminNoticeEvent.sub_type)
}
inline std::string* GroupAdminNoticeEvent::_internal_mutable_sub_type() {
  
  return sub_type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GroupAdminNoticeEvent::release_sub_type() {
  // @@protoc_insertion_point(field_release:onebot.GroupAdminNoticeEvent.sub_type)
  return sub_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GroupAdminNoticeEvent::set_allocated_sub_type(std::string* sub_type) {
  if (sub_type != nullptr) {
    
  } else {
    
  }
  sub_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sub_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:onebot.GroupAdminNoticeEvent.sub_type)
}

// int64 group_id = 6;
inline void GroupAdminNoticeEvent::clear_group_id() {
  group_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GroupAdminNoticeEvent::_internal_group_id() const {
  return group_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GroupAdminNoticeEvent::group_id() const {
  // @@protoc_insertion_point(field_get:onebot.GroupAdminNoticeEvent.group_id)
  return _internal_group_id();
}
inline void GroupAdminNoticeEvent::_internal_set_group_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  group_id_ = value;
}
inline void GroupAdminNoticeEvent::set_group_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:onebot.GroupAdminNoticeEvent.group_id)
}

// int64 user_id = 7;
inline void GroupAdminNoticeEvent::clear_user_id() {
  user_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GroupAdminNoticeEvent::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GroupAdminNoticeEvent::user_id() const {
  // @@protoc_insertion_point(field_get:onebot.GroupAdminNoticeEvent.user_id)
  return _internal_user_id();
}
inline void GroupAdminNoticeEvent::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  user_id_ = value;
}
inline void GroupAdminNoticeEvent::set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:onebot.GroupAdminNoticeEvent.user_id)
}

// -------------------------------------------------------------------

// GroupDecreaseNoticeEvent

// int64 time = 1;
inline void GroupDecreaseNoticeEvent::clear_time() {
  time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GroupDecreaseNoticeEvent::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GroupDecreaseNoticeEvent::time() const {
  // @@protoc_insertion_point(field_get:onebot.GroupDecreaseNoticeEvent.time)
  return _internal_time();
}
inline void GroupDecreaseNoticeEvent::_internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  time_ = value;
}
inline void GroupDecreaseNoticeEvent::set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:onebot.GroupDecreaseNoticeEvent.time)
}

// int64 self_id = 2;
inline void GroupDecreaseNoticeEvent::clear_self_id() {
  self_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GroupDecreaseNoticeEvent::_internal_self_id() const {
  return self_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GroupDecreaseNoticeEvent::self_id() const {
  // @@protoc_insertion_point(field_get:onebot.GroupDecreaseNoticeEvent.self_id)
  return _internal_self_id();
}
inline void GroupDecreaseNoticeEvent::_internal_set_self_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  self_id_ = value;
}
inline void GroupDecreaseNoticeEvent::set_self_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_self_id(value);
  // @@protoc_insertion_point(field_set:onebot.GroupDecreaseNoticeEvent.self_id)
}

// string post_type = 3;
inline void GroupDecreaseNoticeEvent::clear_post_type() {
  post_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GroupDecreaseNoticeEvent::post_type() const {
  // @@protoc_insertion_point(field_get:onebot.GroupDecreaseNoticeEvent.post_type)
  return _internal_post_type();
}
inline void GroupDecreaseNoticeEvent::set_post_type(const std::string& value) {
  _internal_set_post_type(value);
  // @@protoc_insertion_point(field_set:onebot.GroupDecreaseNoticeEvent.post_type)
}
inline std::string* GroupDecreaseNoticeEvent::mutable_post_type() {
  // @@protoc_insertion_point(field_mutable:onebot.GroupDecreaseNoticeEvent.post_type)
  return _internal_mutable_post_type();
}
inline const std::string& GroupDecreaseNoticeEvent::_internal_post_type() const {
  return post_type_.Get();
}
inline void GroupDecreaseNoticeEvent::_internal_set_post_type(const std::string& value) {
  
  post_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GroupDecreaseNoticeEvent::set_post_type(std::string&& value) {
  
  post_type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:onebot.GroupDecreaseNoticeEvent.post_type)
}
inline void GroupDecreaseNoticeEvent::set_post_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  post_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:onebot.GroupDecreaseNoticeEvent.post_type)
}
inline void GroupDecreaseNoticeEvent::set_post_type(const char* value,
    size_t size) {
  
  post_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:onebot.GroupDecreaseNoticeEvent.post_type)
}
inline std::string* GroupDecreaseNoticeEvent::_internal_mutable_post_type() {
  
  return post_type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GroupDecreaseNoticeEvent::release_post_type() {
  // @@protoc_insertion_point(field_release:onebot.GroupDecreaseNoticeEvent.post_type)
  return post_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GroupDecreaseNoticeEvent::set_allocated_post_type(std::string* post_type) {
  if (post_type != nullptr) {
    
  } else {
    
  }
  post_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), post_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:onebot.GroupDecreaseNoticeEvent.post_type)
}

// string notice_type = 4;
inline void GroupDecreaseNoticeEvent::clear_notice_type() {
  notice_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GroupDecreaseNoticeEvent::notice_type() const {
  // @@protoc_insertion_point(field_get:onebot.GroupDecreaseNoticeEvent.notice_type)
  return _internal_notice_type();
}
inline void GroupDecreaseNoticeEvent::set_notice_type(const std::string& value) {
  _internal_set_notice_type(value);
  // @@protoc_insertion_point(field_set:onebot.GroupDecreaseNoticeEvent.notice_type)
}
inline std::string* GroupDecreaseNoticeEvent::mutable_notice_type() {
  // @@protoc_insertion_point(field_mutable:onebot.GroupDecreaseNoticeEvent.notice_type)
  return _internal_mutable_notice_type();
}
inline const std::string& GroupDecreaseNoticeEvent::_internal_notice_type() const {
  return notice_type_.Get();
}
inline void GroupDecreaseNoticeEvent::_internal_set_notice_type(const std::string& value) {
  
  notice_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GroupDecreaseNoticeEvent::set_notice_type(std::string&& value) {
  
  notice_type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:onebot.GroupDecreaseNoticeEvent.notice_type)
}
inline void GroupDecreaseNoticeEvent::set_notice_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  notice_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:onebot.GroupDecreaseNoticeEvent.notice_type)
}
inline void GroupDecreaseNoticeEvent::set_notice_type(const char* value,
    size_t size) {
  
  notice_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:onebot.GroupDecreaseNoticeEvent.notice_type)
}
inline std::string* GroupDecreaseNoticeEvent::_internal_mutable_notice_type() {
  
  return notice_type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GroupDecreaseNoticeEvent::release_notice_type() {
  // @@protoc_insertion_point(field_release:onebot.GroupDecreaseNoticeEvent.notice_type)
  return notice_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GroupDecreaseNoticeEvent::set_allocated_notice_type(std::string* notice_type) {
  if (notice_type != nullptr) {
    
  } else {
    
  }
  notice_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), notice_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:onebot.GroupDecreaseNoticeEvent.notice_type)
}

// string sub_type = 5;
inline void GroupDecreaseNoticeEvent::clear_sub_type() {
  sub_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GroupDecreaseNoticeEvent::sub_type() const {
  // @@protoc_insertion_point(field_get:onebot.GroupDecreaseNoticeEvent.sub_type)
  return _internal_sub_type();
}
inline void GroupDecreaseNoticeEvent::set_sub_type(const std::string& value) {
  _internal_set_sub_type(value);
  // @@protoc_insertion_point(field_set:onebot.GroupDecreaseNoticeEvent.sub_type)
}
inline std::string* GroupDecreaseNoticeEvent::mutable_sub_type() {
  // @@protoc_insertion_point(field_mutable:onebot.GroupDecreaseNoticeEvent.sub_type)
  return _internal_mutable_sub_type();
}
inline const std::string& GroupDecreaseNoticeEvent::_internal_sub_type() const {
  return sub_type_.Get();
}
inline void GroupDecreaseNoticeEvent::_internal_set_sub_type(const std::string& value) {
  
  sub_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GroupDecreaseNoticeEvent::set_sub_type(std::string&& value) {
  
  sub_type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:onebot.GroupDecreaseNoticeEvent.sub_type)
}
inline void GroupDecreaseNoticeEvent::set_sub_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sub_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:onebot.GroupDecreaseNoticeEvent.sub_type)
}
inline void GroupDecreaseNoticeEvent::set_sub_type(const char* value,
    size_t size) {
  
  sub_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:onebot.GroupDecreaseNoticeEvent.sub_type)
}
inline std::string* GroupDecreaseNoticeEvent::_internal_mutable_sub_type() {
  
  return sub_type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GroupDecreaseNoticeEvent::release_sub_type() {
  // @@protoc_insertion_point(field_release:onebot.GroupDecreaseNoticeEvent.sub_type)
  return sub_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GroupDecreaseNoticeEvent::set_allocated_sub_type(std::string* sub_type) {
  if (sub_type != nullptr) {
    
  } else {
    
  }
  sub_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sub_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:onebot.GroupDecreaseNoticeEvent.sub_type)
}

// int64 group_id = 6;
inline void GroupDecreaseNoticeEvent::clear_group_id() {
  group_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GroupDecreaseNoticeEvent::_internal_group_id() const {
  return group_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GroupDecreaseNoticeEvent::group_id() const {
  // @@protoc_insertion_point(field_get:onebot.GroupDecreaseNoticeEvent.group_id)
  return _internal_group_id();
}
inline void GroupDecreaseNoticeEvent::_internal_set_group_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  group_id_ = value;
}
inline void GroupDecreaseNoticeEvent::set_group_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:onebot.GroupDecreaseNoticeEvent.group_id)
}

// int64 operator_id = 7;
inline void GroupDecreaseNoticeEvent::clear_operator_id() {
  operator_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GroupDecreaseNoticeEvent::_internal_operator_id() const {
  return operator_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GroupDecreaseNoticeEvent::operator_id() const {
  // @@protoc_insertion_point(field_get:onebot.GroupDecreaseNoticeEvent.operator_id)
  return _internal_operator_id();
}
inline void GroupDecreaseNoticeEvent::_internal_set_operator_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  operator_id_ = value;
}
inline void GroupDecreaseNoticeEvent::set_operator_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_operator_id(value);
  // @@protoc_insertion_point(field_set:onebot.GroupDecreaseNoticeEvent.operator_id)
}

// int64 user_id = 8;
inline void GroupDecreaseNoticeEvent::clear_user_id() {
  user_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GroupDecreaseNoticeEvent::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GroupDecreaseNoticeEvent::user_id() const {
  // @@protoc_insertion_point(field_get:onebot.GroupDecreaseNoticeEvent.user_id)
  return _internal_user_id();
}
inline void GroupDecreaseNoticeEvent::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  user_id_ = value;
}
inline void GroupDecreaseNoticeEvent::set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:onebot.GroupDecreaseNoticeEvent.user_id)
}

// -------------------------------------------------------------------

// GroupIncreaseNoticeEvent

// int64 time = 1;
inline void GroupIncreaseNoticeEvent::clear_time() {
  time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GroupIncreaseNoticeEvent::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GroupIncreaseNoticeEvent::time() const {
  // @@protoc_insertion_point(field_get:onebot.GroupIncreaseNoticeEvent.time)
  return _internal_time();
}
inline void GroupIncreaseNoticeEvent::_internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  time_ = value;
}
inline void GroupIncreaseNoticeEvent::set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:onebot.GroupIncreaseNoticeEvent.time)
}

// int64 self_id = 2;
inline void GroupIncreaseNoticeEvent::clear_self_id() {
  self_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GroupIncreaseNoticeEvent::_internal_self_id() const {
  return self_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GroupIncreaseNoticeEvent::self_id() const {
  // @@protoc_insertion_point(field_get:onebot.GroupIncreaseNoticeEvent.self_id)
  return _internal_self_id();
}
inline void GroupIncreaseNoticeEvent::_internal_set_self_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  self_id_ = value;
}
inline void GroupIncreaseNoticeEvent::set_self_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_self_id(value);
  // @@protoc_insertion_point(field_set:onebot.GroupIncreaseNoticeEvent.self_id)
}

// string post_type = 3;
inline void GroupIncreaseNoticeEvent::clear_post_type() {
  post_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GroupIncreaseNoticeEvent::post_type() const {
  // @@protoc_insertion_point(field_get:onebot.GroupIncreaseNoticeEvent.post_type)
  return _internal_post_type();
}
inline void GroupIncreaseNoticeEvent::set_post_type(const std::string& value) {
  _internal_set_post_type(value);
  // @@protoc_insertion_point(field_set:onebot.GroupIncreaseNoticeEvent.post_type)
}
inline std::string* GroupIncreaseNoticeEvent::mutable_post_type() {
  // @@protoc_insertion_point(field_mutable:onebot.GroupIncreaseNoticeEvent.post_type)
  return _internal_mutable_post_type();
}
inline const std::string& GroupIncreaseNoticeEvent::_internal_post_type() const {
  return post_type_.Get();
}
inline void GroupIncreaseNoticeEvent::_internal_set_post_type(const std::string& value) {
  
  post_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GroupIncreaseNoticeEvent::set_post_type(std::string&& value) {
  
  post_type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:onebot.GroupIncreaseNoticeEvent.post_type)
}
inline void GroupIncreaseNoticeEvent::set_post_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  post_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:onebot.GroupIncreaseNoticeEvent.post_type)
}
inline void GroupIncreaseNoticeEvent::set_post_type(const char* value,
    size_t size) {
  
  post_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:onebot.GroupIncreaseNoticeEvent.post_type)
}
inline std::string* GroupIncreaseNoticeEvent::_internal_mutable_post_type() {
  
  return post_type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GroupIncreaseNoticeEvent::release_post_type() {
  // @@protoc_insertion_point(field_release:onebot.GroupIncreaseNoticeEvent.post_type)
  return post_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GroupIncreaseNoticeEvent::set_allocated_post_type(std::string* post_type) {
  if (post_type != nullptr) {
    
  } else {
    
  }
  post_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), post_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:onebot.GroupIncreaseNoticeEvent.post_type)
}

// string notice_type = 4;
inline void GroupIncreaseNoticeEvent::clear_notice_type() {
  notice_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GroupIncreaseNoticeEvent::notice_type() const {
  // @@protoc_insertion_point(field_get:onebot.GroupIncreaseNoticeEvent.notice_type)
  return _internal_notice_type();
}
inline void GroupIncreaseNoticeEvent::set_notice_type(const std::string& value) {
  _internal_set_notice_type(value);
  // @@protoc_insertion_point(field_set:onebot.GroupIncreaseNoticeEvent.notice_type)
}
inline std::string* GroupIncreaseNoticeEvent::mutable_notice_type() {
  // @@protoc_insertion_point(field_mutable:onebot.GroupIncreaseNoticeEvent.notice_type)
  return _internal_mutable_notice_type();
}
inline const std::string& GroupIncreaseNoticeEvent::_internal_notice_type() const {
  return notice_type_.Get();
}
inline void GroupIncreaseNoticeEvent::_internal_set_notice_type(const std::string& value) {
  
  notice_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GroupIncreaseNoticeEvent::set_notice_type(std::string&& value) {
  
  notice_type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:onebot.GroupIncreaseNoticeEvent.notice_type)
}
inline void GroupIncreaseNoticeEvent::set_notice_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  notice_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:onebot.GroupIncreaseNoticeEvent.notice_type)
}
inline void GroupIncreaseNoticeEvent::set_notice_type(const char* value,
    size_t size) {
  
  notice_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:onebot.GroupIncreaseNoticeEvent.notice_type)
}
inline std::string* GroupIncreaseNoticeEvent::_internal_mutable_notice_type() {
  
  return notice_type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GroupIncreaseNoticeEvent::release_notice_type() {
  // @@protoc_insertion_point(field_release:onebot.GroupIncreaseNoticeEvent.notice_type)
  return notice_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GroupIncreaseNoticeEvent::set_allocated_notice_type(std::string* notice_type) {
  if (notice_type != nullptr) {
    
  } else {
    
  }
  notice_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), notice_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:onebot.GroupIncreaseNoticeEvent.notice_type)
}

// string sub_type = 5;
inline void GroupIncreaseNoticeEvent::clear_sub_type() {
  sub_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GroupIncreaseNoticeEvent::sub_type() const {
  // @@protoc_insertion_point(field_get:onebot.GroupIncreaseNoticeEvent.sub_type)
  return _internal_sub_type();
}
inline void GroupIncreaseNoticeEvent::set_sub_type(const std::string& value) {
  _internal_set_sub_type(value);
  // @@protoc_insertion_point(field_set:onebot.GroupIncreaseNoticeEvent.sub_type)
}
inline std::string* GroupIncreaseNoticeEvent::mutable_sub_type() {
  // @@protoc_insertion_point(field_mutable:onebot.GroupIncreaseNoticeEvent.sub_type)
  return _internal_mutable_sub_type();
}
inline const std::string& GroupIncreaseNoticeEvent::_internal_sub_type() const {
  return sub_type_.Get();
}
inline void GroupIncreaseNoticeEvent::_internal_set_sub_type(const std::string& value) {
  
  sub_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GroupIncreaseNoticeEvent::set_sub_type(std::string&& value) {
  
  sub_type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:onebot.GroupIncreaseNoticeEvent.sub_type)
}
inline void GroupIncreaseNoticeEvent::set_sub_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sub_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:onebot.GroupIncreaseNoticeEvent.sub_type)
}
inline void GroupIncreaseNoticeEvent::set_sub_type(const char* value,
    size_t size) {
  
  sub_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:onebot.GroupIncreaseNoticeEvent.sub_type)
}
inline std::string* GroupIncreaseNoticeEvent::_internal_mutable_sub_type() {
  
  return sub_type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GroupIncreaseNoticeEvent::release_sub_type() {
  // @@protoc_insertion_point(field_release:onebot.GroupIncreaseNoticeEvent.sub_type)
  return sub_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GroupIncreaseNoticeEvent::set_allocated_sub_type(std::string* sub_type) {
  if (sub_type != nullptr) {
    
  } else {
    
  }
  sub_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sub_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:onebot.GroupIncreaseNoticeEvent.sub_type)
}

// int64 group_id = 6;
inline void GroupIncreaseNoticeEvent::clear_group_id() {
  group_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GroupIncreaseNoticeEvent::_internal_group_id() const {
  return group_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GroupIncreaseNoticeEvent::group_id() const {
  // @@protoc_insertion_point(field_get:onebot.GroupIncreaseNoticeEvent.group_id)
  return _internal_group_id();
}
inline void GroupIncreaseNoticeEvent::_internal_set_group_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  group_id_ = value;
}
inline void GroupIncreaseNoticeEvent::set_group_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:onebot.GroupIncreaseNoticeEvent.group_id)
}

// int64 operator_id = 7;
inline void GroupIncreaseNoticeEvent::clear_operator_id() {
  operator_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GroupIncreaseNoticeEvent::_internal_operator_id() const {
  return operator_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GroupIncreaseNoticeEvent::operator_id() const {
  // @@protoc_insertion_point(field_get:onebot.GroupIncreaseNoticeEvent.operator_id)
  return _internal_operator_id();
}
inline void GroupIncreaseNoticeEvent::_internal_set_operator_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  operator_id_ = value;
}
inline void GroupIncreaseNoticeEvent::set_operator_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_operator_id(value);
  // @@protoc_insertion_point(field_set:onebot.GroupIncreaseNoticeEvent.operator_id)
}

// int64 user_id = 8;
inline void GroupIncreaseNoticeEvent::clear_user_id() {
  user_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GroupIncreaseNoticeEvent::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GroupIncreaseNoticeEvent::user_id() const {
  // @@protoc_insertion_point(field_get:onebot.GroupIncreaseNoticeEvent.user_id)
  return _internal_user_id();
}
inline void GroupIncreaseNoticeEvent::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  user_id_ = value;
}
inline void GroupIncreaseNoticeEvent::set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:onebot.GroupIncreaseNoticeEvent.user_id)
}

// -------------------------------------------------------------------

// GroupBanNoticeEvent

// int64 time = 1;
inline void GroupBanNoticeEvent::clear_time() {
  time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GroupBanNoticeEvent::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GroupBanNoticeEvent::time() const {
  // @@protoc_insertion_point(field_get:onebot.GroupBanNoticeEvent.time)
  return _internal_time();
}
inline void GroupBanNoticeEvent::_internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  time_ = value;
}
inline void GroupBanNoticeEvent::set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:onebot.GroupBanNoticeEvent.time)
}

// int64 self_id = 2;
inline void GroupBanNoticeEvent::clear_self_id() {
  self_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GroupBanNoticeEvent::_internal_self_id() const {
  return self_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GroupBanNoticeEvent::self_id() const {
  // @@protoc_insertion_point(field_get:onebot.GroupBanNoticeEvent.self_id)
  return _internal_self_id();
}
inline void GroupBanNoticeEvent::_internal_set_self_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  self_id_ = value;
}
inline void GroupBanNoticeEvent::set_self_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_self_id(value);
  // @@protoc_insertion_point(field_set:onebot.GroupBanNoticeEvent.self_id)
}

// string post_type = 3;
inline void GroupBanNoticeEvent::clear_post_type() {
  post_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GroupBanNoticeEvent::post_type() const {
  // @@protoc_insertion_point(field_get:onebot.GroupBanNoticeEvent.post_type)
  return _internal_post_type();
}
inline void GroupBanNoticeEvent::set_post_type(const std::string& value) {
  _internal_set_post_type(value);
  // @@protoc_insertion_point(field_set:onebot.GroupBanNoticeEvent.post_type)
}
inline std::string* GroupBanNoticeEvent::mutable_post_type() {
  // @@protoc_insertion_point(field_mutable:onebot.GroupBanNoticeEvent.post_type)
  return _internal_mutable_post_type();
}
inline const std::string& GroupBanNoticeEvent::_internal_post_type() const {
  return post_type_.Get();
}
inline void GroupBanNoticeEvent::_internal_set_post_type(const std::string& value) {
  
  post_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GroupBanNoticeEvent::set_post_type(std::string&& value) {
  
  post_type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:onebot.GroupBanNoticeEvent.post_type)
}
inline void GroupBanNoticeEvent::set_post_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  post_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:onebot.GroupBanNoticeEvent.post_type)
}
inline void GroupBanNoticeEvent::set_post_type(const char* value,
    size_t size) {
  
  post_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:onebot.GroupBanNoticeEvent.post_type)
}
inline std::string* GroupBanNoticeEvent::_internal_mutable_post_type() {
  
  return post_type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GroupBanNoticeEvent::release_post_type() {
  // @@protoc_insertion_point(field_release:onebot.GroupBanNoticeEvent.post_type)
  return post_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GroupBanNoticeEvent::set_allocated_post_type(std::string* post_type) {
  if (post_type != nullptr) {
    
  } else {
    
  }
  post_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), post_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:onebot.GroupBanNoticeEvent.post_type)
}

// string notice_type = 4;
inline void GroupBanNoticeEvent::clear_notice_type() {
  notice_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GroupBanNoticeEvent::notice_type() const {
  // @@protoc_insertion_point(field_get:onebot.GroupBanNoticeEvent.notice_type)
  return _internal_notice_type();
}
inline void GroupBanNoticeEvent::set_notice_type(const std::string& value) {
  _internal_set_notice_type(value);
  // @@protoc_insertion_point(field_set:onebot.GroupBanNoticeEvent.notice_type)
}
inline std::string* GroupBanNoticeEvent::mutable_notice_type() {
  // @@protoc_insertion_point(field_mutable:onebot.GroupBanNoticeEvent.notice_type)
  return _internal_mutable_notice_type();
}
inline const std::string& GroupBanNoticeEvent::_internal_notice_type() const {
  return notice_type_.Get();
}
inline void GroupBanNoticeEvent::_internal_set_notice_type(const std::string& value) {
  
  notice_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GroupBanNoticeEvent::set_notice_type(std::string&& value) {
  
  notice_type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:onebot.GroupBanNoticeEvent.notice_type)
}
inline void GroupBanNoticeEvent::set_notice_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  notice_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:onebot.GroupBanNoticeEvent.notice_type)
}
inline void GroupBanNoticeEvent::set_notice_type(const char* value,
    size_t size) {
  
  notice_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:onebot.GroupBanNoticeEvent.notice_type)
}
inline std::string* GroupBanNoticeEvent::_internal_mutable_notice_type() {
  
  return notice_type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GroupBanNoticeEvent::release_notice_type() {
  // @@protoc_insertion_point(field_release:onebot.GroupBanNoticeEvent.notice_type)
  return notice_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GroupBanNoticeEvent::set_allocated_notice_type(std::string* notice_type) {
  if (notice_type != nullptr) {
    
  } else {
    
  }
  notice_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), notice_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:onebot.GroupBanNoticeEvent.notice_type)
}

// string sub_type = 5;
inline void GroupBanNoticeEvent::clear_sub_type() {
  sub_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GroupBanNoticeEvent::sub_type() const {
  // @@protoc_insertion_point(field_get:onebot.GroupBanNoticeEvent.sub_type)
  return _internal_sub_type();
}
inline void GroupBanNoticeEvent::set_sub_type(const std::string& value) {
  _internal_set_sub_type(value);
  // @@protoc_insertion_point(field_set:onebot.GroupBanNoticeEvent.sub_type)
}
inline std::string* GroupBanNoticeEvent::mutable_sub_type() {
  // @@protoc_insertion_point(field_mutable:onebot.GroupBanNoticeEvent.sub_type)
  return _internal_mutable_sub_type();
}
inline const std::string& GroupBanNoticeEvent::_internal_sub_type() const {
  return sub_type_.Get();
}
inline void GroupBanNoticeEvent::_internal_set_sub_type(const std::string& value) {
  
  sub_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GroupBanNoticeEvent::set_sub_type(std::string&& value) {
  
  sub_type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:onebot.GroupBanNoticeEvent.sub_type)
}
inline void GroupBanNoticeEvent::set_sub_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sub_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:onebot.GroupBanNoticeEvent.sub_type)
}
inline void GroupBanNoticeEvent::set_sub_type(const char* value,
    size_t size) {
  
  sub_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:onebot.GroupBanNoticeEvent.sub_type)
}
inline std::string* GroupBanNoticeEvent::_internal_mutable_sub_type() {
  
  return sub_type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GroupBanNoticeEvent::release_sub_type() {
  // @@protoc_insertion_point(field_release:onebot.GroupBanNoticeEvent.sub_type)
  return sub_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GroupBanNoticeEvent::set_allocated_sub_type(std::string* sub_type) {
  if (sub_type != nullptr) {
    
  } else {
    
  }
  sub_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sub_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:onebot.GroupBanNoticeEvent.sub_type)
}

// int64 group_id = 6;
inline void GroupBanNoticeEvent::clear_group_id() {
  group_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GroupBanNoticeEvent::_internal_group_id() const {
  return group_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GroupBanNoticeEvent::group_id() const {
  // @@protoc_insertion_point(field_get:onebot.GroupBanNoticeEvent.group_id)
  return _internal_group_id();
}
inline void GroupBanNoticeEvent::_internal_set_group_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  group_id_ = value;
}
inline void GroupBanNoticeEvent::set_group_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:onebot.GroupBanNoticeEvent.group_id)
}

// int64 operator_id = 7;
inline void GroupBanNoticeEvent::clear_operator_id() {
  operator_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GroupBanNoticeEvent::_internal_operator_id() const {
  return operator_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GroupBanNoticeEvent::operator_id() const {
  // @@protoc_insertion_point(field_get:onebot.GroupBanNoticeEvent.operator_id)
  return _internal_operator_id();
}
inline void GroupBanNoticeEvent::_internal_set_operator_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  operator_id_ = value;
}
inline void GroupBanNoticeEvent::set_operator_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_operator_id(value);
  // @@protoc_insertion_point(field_set:onebot.GroupBanNoticeEvent.operator_id)
}

// int64 user_id = 8;
inline void GroupBanNoticeEvent::clear_user_id() {
  user_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GroupBanNoticeEvent::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GroupBanNoticeEvent::user_id() const {
  // @@protoc_insertion_point(field_get:onebot.GroupBanNoticeEvent.user_id)
  return _internal_user_id();
}
inline void GroupBanNoticeEvent::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  user_id_ = value;
}
inline void GroupBanNoticeEvent::set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:onebot.GroupBanNoticeEvent.user_id)
}

// int64 duration = 9;
inline void GroupBanNoticeEvent::clear_duration() {
  duration_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GroupBanNoticeEvent::_internal_duration() const {
  return duration_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GroupBanNoticeEvent::duration() const {
  // @@protoc_insertion_point(field_get:onebot.GroupBanNoticeEvent.duration)
  return _internal_duration();
}
inline void GroupBanNoticeEvent::_internal_set_duration(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  duration_ = value;
}
inline void GroupBanNoticeEvent::set_duration(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:onebot.GroupBanNoticeEvent.duration)
}

// -------------------------------------------------------------------

// FriendAddNoticeEvent

// int64 time = 1;
inline void FriendAddNoticeEvent::clear_time() {
  time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FriendAddNoticeEvent::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FriendAddNoticeEvent::time() const {
  // @@protoc_insertion_point(field_get:onebot.FriendAddNoticeEvent.time)
  return _internal_time();
}
inline void FriendAddNoticeEvent::_internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  time_ = value;
}
inline void FriendAddNoticeEvent::set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:onebot.FriendAddNoticeEvent.time)
}

// int64 self_id = 2;
inline void FriendAddNoticeEvent::clear_self_id() {
  self_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FriendAddNoticeEvent::_internal_self_id() const {
  return self_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FriendAddNoticeEvent::self_id() const {
  // @@protoc_insertion_point(field_get:onebot.FriendAddNoticeEvent.self_id)
  return _internal_self_id();
}
inline void FriendAddNoticeEvent::_internal_set_self_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  self_id_ = value;
}
inline void FriendAddNoticeEvent::set_self_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_self_id(value);
  // @@protoc_insertion_point(field_set:onebot.FriendAddNoticeEvent.self_id)
}

// string post_type = 3;
inline void FriendAddNoticeEvent::clear_post_type() {
  post_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FriendAddNoticeEvent::post_type() const {
  // @@protoc_insertion_point(field_get:onebot.FriendAddNoticeEvent.post_type)
  return _internal_post_type();
}
inline void FriendAddNoticeEvent::set_post_type(const std::string& value) {
  _internal_set_post_type(value);
  // @@protoc_insertion_point(field_set:onebot.FriendAddNoticeEvent.post_type)
}
inline std::string* FriendAddNoticeEvent::mutable_post_type() {
  // @@protoc_insertion_point(field_mutable:onebot.FriendAddNoticeEvent.post_type)
  return _internal_mutable_post_type();
}
inline const std::string& FriendAddNoticeEvent::_internal_post_type() const {
  return post_type_.Get();
}
inline void FriendAddNoticeEvent::_internal_set_post_type(const std::string& value) {
  
  post_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FriendAddNoticeEvent::set_post_type(std::string&& value) {
  
  post_type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:onebot.FriendAddNoticeEvent.post_type)
}
inline void FriendAddNoticeEvent::set_post_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  post_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:onebot.FriendAddNoticeEvent.post_type)
}
inline void FriendAddNoticeEvent::set_post_type(const char* value,
    size_t size) {
  
  post_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:onebot.FriendAddNoticeEvent.post_type)
}
inline std::string* FriendAddNoticeEvent::_internal_mutable_post_type() {
  
  return post_type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FriendAddNoticeEvent::release_post_type() {
  // @@protoc_insertion_point(field_release:onebot.FriendAddNoticeEvent.post_type)
  return post_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FriendAddNoticeEvent::set_allocated_post_type(std::string* post_type) {
  if (post_type != nullptr) {
    
  } else {
    
  }
  post_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), post_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:onebot.FriendAddNoticeEvent.post_type)
}

// string notice_type = 4;
inline void FriendAddNoticeEvent::clear_notice_type() {
  notice_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FriendAddNoticeEvent::notice_type() const {
  // @@protoc_insertion_point(field_get:onebot.FriendAddNoticeEvent.notice_type)
  return _internal_notice_type();
}
inline void FriendAddNoticeEvent::set_notice_type(const std::string& value) {
  _internal_set_notice_type(value);
  // @@protoc_insertion_point(field_set:onebot.FriendAddNoticeEvent.notice_type)
}
inline std::string* FriendAddNoticeEvent::mutable_notice_type() {
  // @@protoc_insertion_point(field_mutable:onebot.FriendAddNoticeEvent.notice_type)
  return _internal_mutable_notice_type();
}
inline const std::string& FriendAddNoticeEvent::_internal_notice_type() const {
  return notice_type_.Get();
}
inline void FriendAddNoticeEvent::_internal_set_notice_type(const std::string& value) {
  
  notice_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FriendAddNoticeEvent::set_notice_type(std::string&& value) {
  
  notice_type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:onebot.FriendAddNoticeEvent.notice_type)
}
inline void FriendAddNoticeEvent::set_notice_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  notice_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:onebot.FriendAddNoticeEvent.notice_type)
}
inline void FriendAddNoticeEvent::set_notice_type(const char* value,
    size_t size) {
  
  notice_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:onebot.FriendAddNoticeEvent.notice_type)
}
inline std::string* FriendAddNoticeEvent::_internal_mutable_notice_type() {
  
  return notice_type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FriendAddNoticeEvent::release_notice_type() {
  // @@protoc_insertion_point(field_release:onebot.FriendAddNoticeEvent.notice_type)
  return notice_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FriendAddNoticeEvent::set_allocated_notice_type(std::string* notice_type) {
  if (notice_type != nullptr) {
    
  } else {
    
  }
  notice_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), notice_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:onebot.FriendAddNoticeEvent.notice_type)
}

// int64 user_id = 5;
inline void FriendAddNoticeEvent::clear_user_id() {
  user_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FriendAddNoticeEvent::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FriendAddNoticeEvent::user_id() const {
  // @@protoc_insertion_point(field_get:onebot.FriendAddNoticeEvent.user_id)
  return _internal_user_id();
}
inline void FriendAddNoticeEvent::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  user_id_ = value;
}
inline void FriendAddNoticeEvent::set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:onebot.FriendAddNoticeEvent.user_id)
}

// -------------------------------------------------------------------

// GroupRecallNoticeEvent

// int64 time = 1;
inline void GroupRecallNoticeEvent::clear_time() {
  time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GroupRecallNoticeEvent::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GroupRecallNoticeEvent::time() const {
  // @@protoc_insertion_point(field_get:onebot.GroupRecallNoticeEvent.time)
  return _internal_time();
}
inline void GroupRecallNoticeEvent::_internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  time_ = value;
}
inline void GroupRecallNoticeEvent::set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:onebot.GroupRecallNoticeEvent.time)
}

// int64 self_id = 2;
inline void GroupRecallNoticeEvent::clear_self_id() {
  self_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GroupRecallNoticeEvent::_internal_self_id() const {
  return self_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GroupRecallNoticeEvent::self_id() const {
  // @@protoc_insertion_point(field_get:onebot.GroupRecallNoticeEvent.self_id)
  return _internal_self_id();
}
inline void GroupRecallNoticeEvent::_internal_set_self_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  self_id_ = value;
}
inline void GroupRecallNoticeEvent::set_self_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_self_id(value);
  // @@protoc_insertion_point(field_set:onebot.GroupRecallNoticeEvent.self_id)
}

// string post_type = 3;
inline void GroupRecallNoticeEvent::clear_post_type() {
  post_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GroupRecallNoticeEvent::post_type() const {
  // @@protoc_insertion_point(field_get:onebot.GroupRecallNoticeEvent.post_type)
  return _internal_post_type();
}
inline void GroupRecallNoticeEvent::set_post_type(const std::string& value) {
  _internal_set_post_type(value);
  // @@protoc_insertion_point(field_set:onebot.GroupRecallNoticeEvent.post_type)
}
inline std::string* GroupRecallNoticeEvent::mutable_post_type() {
  // @@protoc_insertion_point(field_mutable:onebot.GroupRecallNoticeEvent.post_type)
  return _internal_mutable_post_type();
}
inline const std::string& GroupRecallNoticeEvent::_internal_post_type() const {
  return post_type_.Get();
}
inline void GroupRecallNoticeEvent::_internal_set_post_type(const std::string& value) {
  
  post_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GroupRecallNoticeEvent::set_post_type(std::string&& value) {
  
  post_type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:onebot.GroupRecallNoticeEvent.post_type)
}
inline void GroupRecallNoticeEvent::set_post_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  post_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:onebot.GroupRecallNoticeEvent.post_type)
}
inline void GroupRecallNoticeEvent::set_post_type(const char* value,
    size_t size) {
  
  post_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:onebot.GroupRecallNoticeEvent.post_type)
}
inline std::string* GroupRecallNoticeEvent::_internal_mutable_post_type() {
  
  return post_type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GroupRecallNoticeEvent::release_post_type() {
  // @@protoc_insertion_point(field_release:onebot.GroupRecallNoticeEvent.post_type)
  return post_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GroupRecallNoticeEvent::set_allocated_post_type(std::string* post_type) {
  if (post_type != nullptr) {
    
  } else {
    
  }
  post_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), post_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:onebot.GroupRecallNoticeEvent.post_type)
}

// string notice_type = 4;
inline void GroupRecallNoticeEvent::clear_notice_type() {
  notice_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GroupRecallNoticeEvent::notice_type() const {
  // @@protoc_insertion_point(field_get:onebot.GroupRecallNoticeEvent.notice_type)
  return _internal_notice_type();
}
inline void GroupRecallNoticeEvent::set_notice_type(const std::string& value) {
  _internal_set_notice_type(value);
  // @@protoc_insertion_point(field_set:onebot.GroupRecallNoticeEvent.notice_type)
}
inline std::string* GroupRecallNoticeEvent::mutable_notice_type() {
  // @@protoc_insertion_point(field_mutable:onebot.GroupRecallNoticeEvent.notice_type)
  return _internal_mutable_notice_type();
}
inline const std::string& GroupRecallNoticeEvent::_internal_notice_type() const {
  return notice_type_.Get();
}
inline void GroupRecallNoticeEvent::_internal_set_notice_type(const std::string& value) {
  
  notice_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GroupRecallNoticeEvent::set_notice_type(std::string&& value) {
  
  notice_type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:onebot.GroupRecallNoticeEvent.notice_type)
}
inline void GroupRecallNoticeEvent::set_notice_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  notice_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:onebot.GroupRecallNoticeEvent.notice_type)
}
inline void GroupRecallNoticeEvent::set_notice_type(const char* value,
    size_t size) {
  
  notice_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:onebot.GroupRecallNoticeEvent.notice_type)
}
inline std::string* GroupRecallNoticeEvent::_internal_mutable_notice_type() {
  
  return notice_type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GroupRecallNoticeEvent::release_notice_type() {
  // @@protoc_insertion_point(field_release:onebot.GroupRecallNoticeEvent.notice_type)
  return notice_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GroupRecallNoticeEvent::set_allocated_notice_type(std::string* notice_type) {
  if (notice_type != nullptr) {
    
  } else {
    
  }
  notice_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), notice_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:onebot.GroupRecallNoticeEvent.notice_type)
}

// int64 group_id = 5;
inline void GroupRecallNoticeEvent::clear_group_id() {
  group_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GroupRecallNoticeEvent::_internal_group_id() const {
  return group_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GroupRecallNoticeEvent::group_id() const {
  // @@protoc_insertion_point(field_get:onebot.GroupRecallNoticeEvent.group_id)
  return _internal_group_id();
}
inline void GroupRecallNoticeEvent::_internal_set_group_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  group_id_ = value;
}
inline void GroupRecallNoticeEvent::set_group_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:onebot.GroupRecallNoticeEvent.group_id)
}

// int64 user_id = 6;
inline void GroupRecallNoticeEvent::clear_user_id() {
  user_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GroupRecallNoticeEvent::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GroupRecallNoticeEvent::user_id() const {
  // @@protoc_insertion_point(field_get:onebot.GroupRecallNoticeEvent.user_id)
  return _internal_user_id();
}
inline void GroupRecallNoticeEvent::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  user_id_ = value;
}
inline void GroupRecallNoticeEvent::set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:onebot.GroupRecallNoticeEvent.user_id)
}

// int64 operator_id = 7;
inline void GroupRecallNoticeEvent::clear_operator_id() {
  operator_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GroupRecallNoticeEvent::_internal_operator_id() const {
  return operator_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GroupRecallNoticeEvent::operator_id() const {
  // @@protoc_insertion_point(field_get:onebot.GroupRecallNoticeEvent.operator_id)
  return _internal_operator_id();
}
inline void GroupRecallNoticeEvent::_internal_set_operator_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  operator_id_ = value;
}
inline void GroupRecallNoticeEvent::set_operator_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_operator_id(value);
  // @@protoc_insertion_point(field_set:onebot.GroupRecallNoticeEvent.operator_id)
}

// int64 message_id = 8;
inline void GroupRecallNoticeEvent::clear_message_id() {
  message_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GroupRecallNoticeEvent::_internal_message_id() const {
  return message_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GroupRecallNoticeEvent::message_id() const {
  // @@protoc_insertion_point(field_get:onebot.GroupRecallNoticeEvent.message_id)
  return _internal_message_id();
}
inline void GroupRecallNoticeEvent::_internal_set_message_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  message_id_ = value;
}
inline void GroupRecallNoticeEvent::set_message_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_message_id(value);
  // @@protoc_insertion_point(field_set:onebot.GroupRecallNoticeEvent.message_id)
}

// -------------------------------------------------------------------

// FriendRecallNoticeEvent

// int64 time = 1;
inline void FriendRecallNoticeEvent::clear_time() {
  time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FriendRecallNoticeEvent::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FriendRecallNoticeEvent::time() const {
  // @@protoc_insertion_point(field_get:onebot.FriendRecallNoticeEvent.time)
  return _internal_time();
}
inline void FriendRecallNoticeEvent::_internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  time_ = value;
}
inline void FriendRecallNoticeEvent::set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:onebot.FriendRecallNoticeEvent.time)
}

// int64 self_id = 2;
inline void FriendRecallNoticeEvent::clear_self_id() {
  self_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FriendRecallNoticeEvent::_internal_self_id() const {
  return self_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FriendRecallNoticeEvent::self_id() const {
  // @@protoc_insertion_point(field_get:onebot.FriendRecallNoticeEvent.self_id)
  return _internal_self_id();
}
inline void FriendRecallNoticeEvent::_internal_set_self_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  self_id_ = value;
}
inline void FriendRecallNoticeEvent::set_self_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_self_id(value);
  // @@protoc_insertion_point(field_set:onebot.FriendRecallNoticeEvent.self_id)
}

// string post_type = 3;
inline void FriendRecallNoticeEvent::clear_post_type() {
  post_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FriendRecallNoticeEvent::post_type() const {
  // @@protoc_insertion_point(field_get:onebot.FriendRecallNoticeEvent.post_type)
  return _internal_post_type();
}
inline void FriendRecallNoticeEvent::set_post_type(const std::string& value) {
  _internal_set_post_type(value);
  // @@protoc_insertion_point(field_set:onebot.FriendRecallNoticeEvent.post_type)
}
inline std::string* FriendRecallNoticeEvent::mutable_post_type() {
  // @@protoc_insertion_point(field_mutable:onebot.FriendRecallNoticeEvent.post_type)
  return _internal_mutable_post_type();
}
inline const std::string& FriendRecallNoticeEvent::_internal_post_type() const {
  return post_type_.Get();
}
inline void FriendRecallNoticeEvent::_internal_set_post_type(const std::string& value) {
  
  post_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FriendRecallNoticeEvent::set_post_type(std::string&& value) {
  
  post_type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:onebot.FriendRecallNoticeEvent.post_type)
}
inline void FriendRecallNoticeEvent::set_post_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  post_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:onebot.FriendRecallNoticeEvent.post_type)
}
inline void FriendRecallNoticeEvent::set_post_type(const char* value,
    size_t size) {
  
  post_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:onebot.FriendRecallNoticeEvent.post_type)
}
inline std::string* FriendRecallNoticeEvent::_internal_mutable_post_type() {
  
  return post_type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FriendRecallNoticeEvent::release_post_type() {
  // @@protoc_insertion_point(field_release:onebot.FriendRecallNoticeEvent.post_type)
  return post_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FriendRecallNoticeEvent::set_allocated_post_type(std::string* post_type) {
  if (post_type != nullptr) {
    
  } else {
    
  }
  post_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), post_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:onebot.FriendRecallNoticeEvent.post_type)
}

// string notice_type = 4;
inline void FriendRecallNoticeEvent::clear_notice_type() {
  notice_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FriendRecallNoticeEvent::notice_type() const {
  // @@protoc_insertion_point(field_get:onebot.FriendRecallNoticeEvent.notice_type)
  return _internal_notice_type();
}
inline void FriendRecallNoticeEvent::set_notice_type(const std::string& value) {
  _internal_set_notice_type(value);
  // @@protoc_insertion_point(field_set:onebot.FriendRecallNoticeEvent.notice_type)
}
inline std::string* FriendRecallNoticeEvent::mutable_notice_type() {
  // @@protoc_insertion_point(field_mutable:onebot.FriendRecallNoticeEvent.notice_type)
  return _internal_mutable_notice_type();
}
inline const std::string& FriendRecallNoticeEvent::_internal_notice_type() const {
  return notice_type_.Get();
}
inline void FriendRecallNoticeEvent::_internal_set_notice_type(const std::string& value) {
  
  notice_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FriendRecallNoticeEvent::set_notice_type(std::string&& value) {
  
  notice_type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:onebot.FriendRecallNoticeEvent.notice_type)
}
inline void FriendRecallNoticeEvent::set_notice_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  notice_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:onebot.FriendRecallNoticeEvent.notice_type)
}
inline void FriendRecallNoticeEvent::set_notice_type(const char* value,
    size_t size) {
  
  notice_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:onebot.FriendRecallNoticeEvent.notice_type)
}
inline std::string* FriendRecallNoticeEvent::_internal_mutable_notice_type() {
  
  return notice_type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FriendRecallNoticeEvent::release_notice_type() {
  // @@protoc_insertion_point(field_release:onebot.FriendRecallNoticeEvent.notice_type)
  return notice_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FriendRecallNoticeEvent::set_allocated_notice_type(std::string* notice_type) {
  if (notice_type != nullptr) {
    
  } else {
    
  }
  notice_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), notice_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:onebot.FriendRecallNoticeEvent.notice_type)
}

// int64 user_id = 5;
inline void FriendRecallNoticeEvent::clear_user_id() {
  user_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FriendRecallNoticeEvent::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FriendRecallNoticeEvent::user_id() const {
  // @@protoc_insertion_point(field_get:onebot.FriendRecallNoticeEvent.user_id)
  return _internal_user_id();
}
inline void FriendRecallNoticeEvent::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  user_id_ = value;
}
inline void FriendRecallNoticeEvent::set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:onebot.FriendRecallNoticeEvent.user_id)
}

// int64 message_id = 6;
inline void FriendRecallNoticeEvent::clear_message_id() {
  message_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FriendRecallNoticeEvent::_internal_message_id() const {
  return message_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FriendRecallNoticeEvent::message_id() const {
  // @@protoc_insertion_point(field_get:onebot.FriendRecallNoticeEvent.message_id)
  return _internal_message_id();
}
inline void FriendRecallNoticeEvent::_internal_set_message_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  message_id_ = value;
}
inline void FriendRecallNoticeEvent::set_message_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_message_id(value);
  // @@protoc_insertion_point(field_set:onebot.FriendRecallNoticeEvent.message_id)
}

// -------------------------------------------------------------------

// FriendRequestEvent

// int64 time = 1;
inline void FriendRequestEvent::clear_time() {
  time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FriendRequestEvent::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FriendRequestEvent::time() const {
  // @@protoc_insertion_point(field_get:onebot.FriendRequestEvent.time)
  return _internal_time();
}
inline void FriendRequestEvent::_internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  time_ = value;
}
inline void FriendRequestEvent::set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:onebot.FriendRequestEvent.time)
}

// int64 self_id = 2;
inline void FriendRequestEvent::clear_self_id() {
  self_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FriendRequestEvent::_internal_self_id() const {
  return self_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FriendRequestEvent::self_id() const {
  // @@protoc_insertion_point(field_get:onebot.FriendRequestEvent.self_id)
  return _internal_self_id();
}
inline void FriendRequestEvent::_internal_set_self_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  self_id_ = value;
}
inline void FriendRequestEvent::set_self_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_self_id(value);
  // @@protoc_insertion_point(field_set:onebot.FriendRequestEvent.self_id)
}

// string post_type = 3;
inline void FriendRequestEvent::clear_post_type() {
  post_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FriendRequestEvent::post_type() const {
  // @@protoc_insertion_point(field_get:onebot.FriendRequestEvent.post_type)
  return _internal_post_type();
}
inline void FriendRequestEvent::set_post_type(const std::string& value) {
  _internal_set_post_type(value);
  // @@protoc_insertion_point(field_set:onebot.FriendRequestEvent.post_type)
}
inline std::string* FriendRequestEvent::mutable_post_type() {
  // @@protoc_insertion_point(field_mutable:onebot.FriendRequestEvent.post_type)
  return _internal_mutable_post_type();
}
inline const std::string& FriendRequestEvent::_internal_post_type() const {
  return post_type_.Get();
}
inline void FriendRequestEvent::_internal_set_post_type(const std::string& value) {
  
  post_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FriendRequestEvent::set_post_type(std::string&& value) {
  
  post_type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:onebot.FriendRequestEvent.post_type)
}
inline void FriendRequestEvent::set_post_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  post_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:onebot.FriendRequestEvent.post_type)
}
inline void FriendRequestEvent::set_post_type(const char* value,
    size_t size) {
  
  post_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:onebot.FriendRequestEvent.post_type)
}
inline std::string* FriendRequestEvent::_internal_mutable_post_type() {
  
  return post_type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FriendRequestEvent::release_post_type() {
  // @@protoc_insertion_point(field_release:onebot.FriendRequestEvent.post_type)
  return post_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FriendRequestEvent::set_allocated_post_type(std::string* post_type) {
  if (post_type != nullptr) {
    
  } else {
    
  }
  post_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), post_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:onebot.FriendRequestEvent.post_type)
}

// string request_type = 4;
inline void FriendRequestEvent::clear_request_type() {
  request_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FriendRequestEvent::request_type() const {
  // @@protoc_insertion_point(field_get:onebot.FriendRequestEvent.request_type)
  return _internal_request_type();
}
inline void FriendRequestEvent::set_request_type(const std::string& value) {
  _internal_set_request_type(value);
  // @@protoc_insertion_point(field_set:onebot.FriendRequestEvent.request_type)
}
inline std::string* FriendRequestEvent::mutable_request_type() {
  // @@protoc_insertion_point(field_mutable:onebot.FriendRequestEvent.request_type)
  return _internal_mutable_request_type();
}
inline const std::string& FriendRequestEvent::_internal_request_type() const {
  return request_type_.Get();
}
inline void FriendRequestEvent::_internal_set_request_type(const std::string& value) {
  
  request_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FriendRequestEvent::set_request_type(std::string&& value) {
  
  request_type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:onebot.FriendRequestEvent.request_type)
}
inline void FriendRequestEvent::set_request_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  request_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:onebot.FriendRequestEvent.request_type)
}
inline void FriendRequestEvent::set_request_type(const char* value,
    size_t size) {
  
  request_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:onebot.FriendRequestEvent.request_type)
}
inline std::string* FriendRequestEvent::_internal_mutable_request_type() {
  
  return request_type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FriendRequestEvent::release_request_type() {
  // @@protoc_insertion_point(field_release:onebot.FriendRequestEvent.request_type)
  return request_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FriendRequestEvent::set_allocated_request_type(std::string* request_type) {
  if (request_type != nullptr) {
    
  } else {
    
  }
  request_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), request_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:onebot.FriendRequestEvent.request_type)
}

// int64 user_id = 5;
inline void FriendRequestEvent::clear_user_id() {
  user_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FriendRequestEvent::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FriendRequestEvent::user_id() const {
  // @@protoc_insertion_point(field_get:onebot.FriendRequestEvent.user_id)
  return _internal_user_id();
}
inline void FriendRequestEvent::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  user_id_ = value;
}
inline void FriendRequestEvent::set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:onebot.FriendRequestEvent.user_id)
}

// string comment = 6;
inline void FriendRequestEvent::clear_comment() {
  comment_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FriendRequestEvent::comment() const {
  // @@protoc_insertion_point(field_get:onebot.FriendRequestEvent.comment)
  return _internal_comment();
}
inline void FriendRequestEvent::set_comment(const std::string& value) {
  _internal_set_comment(value);
  // @@protoc_insertion_point(field_set:onebot.FriendRequestEvent.comment)
}
inline std::string* FriendRequestEvent::mutable_comment() {
  // @@protoc_insertion_point(field_mutable:onebot.FriendRequestEvent.comment)
  return _internal_mutable_comment();
}
inline const std::string& FriendRequestEvent::_internal_comment() const {
  return comment_.Get();
}
inline void FriendRequestEvent::_internal_set_comment(const std::string& value) {
  
  comment_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FriendRequestEvent::set_comment(std::string&& value) {
  
  comment_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:onebot.FriendRequestEvent.comment)
}
inline void FriendRequestEvent::set_comment(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  comment_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:onebot.FriendRequestEvent.comment)
}
inline void FriendRequestEvent::set_comment(const char* value,
    size_t size) {
  
  comment_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:onebot.FriendRequestEvent.comment)
}
inline std::string* FriendRequestEvent::_internal_mutable_comment() {
  
  return comment_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FriendRequestEvent::release_comment() {
  // @@protoc_insertion_point(field_release:onebot.FriendRequestEvent.comment)
  return comment_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FriendRequestEvent::set_allocated_comment(std::string* comment) {
  if (comment != nullptr) {
    
  } else {
    
  }
  comment_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), comment,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:onebot.FriendRequestEvent.comment)
}

// string flag = 7;
inline void FriendRequestEvent::clear_flag() {
  flag_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FriendRequestEvent::flag() const {
  // @@protoc_insertion_point(field_get:onebot.FriendRequestEvent.flag)
  return _internal_flag();
}
inline void FriendRequestEvent::set_flag(const std::string& value) {
  _internal_set_flag(value);
  // @@protoc_insertion_point(field_set:onebot.FriendRequestEvent.flag)
}
inline std::string* FriendRequestEvent::mutable_flag() {
  // @@protoc_insertion_point(field_mutable:onebot.FriendRequestEvent.flag)
  return _internal_mutable_flag();
}
inline const std::string& FriendRequestEvent::_internal_flag() const {
  return flag_.Get();
}
inline void FriendRequestEvent::_internal_set_flag(const std::string& value) {
  
  flag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FriendRequestEvent::set_flag(std::string&& value) {
  
  flag_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:onebot.FriendRequestEvent.flag)
}
inline void FriendRequestEvent::set_flag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  flag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:onebot.FriendRequestEvent.flag)
}
inline void FriendRequestEvent::set_flag(const char* value,
    size_t size) {
  
  flag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:onebot.FriendRequestEvent.flag)
}
inline std::string* FriendRequestEvent::_internal_mutable_flag() {
  
  return flag_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FriendRequestEvent::release_flag() {
  // @@protoc_insertion_point(field_release:onebot.FriendRequestEvent.flag)
  return flag_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FriendRequestEvent::set_allocated_flag(std::string* flag) {
  if (flag != nullptr) {
    
  } else {
    
  }
  flag_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), flag,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:onebot.FriendRequestEvent.flag)
}

// -------------------------------------------------------------------

// GroupRequestEvent

// int64 time = 1;
inline void GroupRequestEvent::clear_time() {
  time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GroupRequestEvent::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GroupRequestEvent::time() const {
  // @@protoc_insertion_point(field_get:onebot.GroupRequestEvent.time)
  return _internal_time();
}
inline void GroupRequestEvent::_internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  time_ = value;
}
inline void GroupRequestEvent::set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:onebot.GroupRequestEvent.time)
}

// int64 self_id = 2;
inline void GroupRequestEvent::clear_self_id() {
  self_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GroupRequestEvent::_internal_self_id() const {
  return self_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GroupRequestEvent::self_id() const {
  // @@protoc_insertion_point(field_get:onebot.GroupRequestEvent.self_id)
  return _internal_self_id();
}
inline void GroupRequestEvent::_internal_set_self_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  self_id_ = value;
}
inline void GroupRequestEvent::set_self_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_self_id(value);
  // @@protoc_insertion_point(field_set:onebot.GroupRequestEvent.self_id)
}

// string post_type = 3;
inline void GroupRequestEvent::clear_post_type() {
  post_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GroupRequestEvent::post_type() const {
  // @@protoc_insertion_point(field_get:onebot.GroupRequestEvent.post_type)
  return _internal_post_type();
}
inline void GroupRequestEvent::set_post_type(const std::string& value) {
  _internal_set_post_type(value);
  // @@protoc_insertion_point(field_set:onebot.GroupRequestEvent.post_type)
}
inline std::string* GroupRequestEvent::mutable_post_type() {
  // @@protoc_insertion_point(field_mutable:onebot.GroupRequestEvent.post_type)
  return _internal_mutable_post_type();
}
inline const std::string& GroupRequestEvent::_internal_post_type() const {
  return post_type_.Get();
}
inline void GroupRequestEvent::_internal_set_post_type(const std::string& value) {
  
  post_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GroupRequestEvent::set_post_type(std::string&& value) {
  
  post_type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:onebot.GroupRequestEvent.post_type)
}
inline void GroupRequestEvent::set_post_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  post_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:onebot.GroupRequestEvent.post_type)
}
inline void GroupRequestEvent::set_post_type(const char* value,
    size_t size) {
  
  post_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:onebot.GroupRequestEvent.post_type)
}
inline std::string* GroupRequestEvent::_internal_mutable_post_type() {
  
  return post_type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GroupRequestEvent::release_post_type() {
  // @@protoc_insertion_point(field_release:onebot.GroupRequestEvent.post_type)
  return post_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GroupRequestEvent::set_allocated_post_type(std::string* post_type) {
  if (post_type != nullptr) {
    
  } else {
    
  }
  post_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), post_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:onebot.GroupRequestEvent.post_type)
}

// string request_type = 4;
inline void GroupRequestEvent::clear_request_type() {
  request_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GroupRequestEvent::request_type() const {
  // @@protoc_insertion_point(field_get:onebot.GroupRequestEvent.request_type)
  return _internal_request_type();
}
inline void GroupRequestEvent::set_request_type(const std::string& value) {
  _internal_set_request_type(value);
  // @@protoc_insertion_point(field_set:onebot.GroupRequestEvent.request_type)
}
inline std::string* GroupRequestEvent::mutable_request_type() {
  // @@protoc_insertion_point(field_mutable:onebot.GroupRequestEvent.request_type)
  return _internal_mutable_request_type();
}
inline const std::string& GroupRequestEvent::_internal_request_type() const {
  return request_type_.Get();
}
inline void GroupRequestEvent::_internal_set_request_type(const std::string& value) {
  
  request_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GroupRequestEvent::set_request_type(std::string&& value) {
  
  request_type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:onebot.GroupRequestEvent.request_type)
}
inline void GroupRequestEvent::set_request_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  request_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:onebot.GroupRequestEvent.request_type)
}
inline void GroupRequestEvent::set_request_type(const char* value,
    size_t size) {
  
  request_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:onebot.GroupRequestEvent.request_type)
}
inline std::string* GroupRequestEvent::_internal_mutable_request_type() {
  
  return request_type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GroupRequestEvent::release_request_type() {
  // @@protoc_insertion_point(field_release:onebot.GroupRequestEvent.request_type)
  return request_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GroupRequestEvent::set_allocated_request_type(std::string* request_type) {
  if (request_type != nullptr) {
    
  } else {
    
  }
  request_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), request_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:onebot.GroupRequestEvent.request_type)
}

// string sub_type = 5;
inline void GroupRequestEvent::clear_sub_type() {
  sub_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GroupRequestEvent::sub_type() const {
  // @@protoc_insertion_point(field_get:onebot.GroupRequestEvent.sub_type)
  return _internal_sub_type();
}
inline void GroupRequestEvent::set_sub_type(const std::string& value) {
  _internal_set_sub_type(value);
  // @@protoc_insertion_point(field_set:onebot.GroupRequestEvent.sub_type)
}
inline std::string* GroupRequestEvent::mutable_sub_type() {
  // @@protoc_insertion_point(field_mutable:onebot.GroupRequestEvent.sub_type)
  return _internal_mutable_sub_type();
}
inline const std::string& GroupRequestEvent::_internal_sub_type() const {
  return sub_type_.Get();
}
inline void GroupRequestEvent::_internal_set_sub_type(const std::string& value) {
  
  sub_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GroupRequestEvent::set_sub_type(std::string&& value) {
  
  sub_type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:onebot.GroupRequestEvent.sub_type)
}
inline void GroupRequestEvent::set_sub_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sub_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:onebot.GroupRequestEvent.sub_type)
}
inline void GroupRequestEvent::set_sub_type(const char* value,
    size_t size) {
  
  sub_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:onebot.GroupRequestEvent.sub_type)
}
inline std::string* GroupRequestEvent::_internal_mutable_sub_type() {
  
  return sub_type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GroupRequestEvent::release_sub_type() {
  // @@protoc_insertion_point(field_release:onebot.GroupRequestEvent.sub_type)
  return sub_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GroupRequestEvent::set_allocated_sub_type(std::string* sub_type) {
  if (sub_type != nullptr) {
    
  } else {
    
  }
  sub_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sub_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:onebot.GroupRequestEvent.sub_type)
}

// int64 group_id = 6;
inline void GroupRequestEvent::clear_group_id() {
  group_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GroupRequestEvent::_internal_group_id() const {
  return group_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GroupRequestEvent::group_id() const {
  // @@protoc_insertion_point(field_get:onebot.GroupRequestEvent.group_id)
  return _internal_group_id();
}
inline void GroupRequestEvent::_internal_set_group_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  group_id_ = value;
}
inline void GroupRequestEvent::set_group_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:onebot.GroupRequestEvent.group_id)
}

// int64 user_id = 7;
inline void GroupRequestEvent::clear_user_id() {
  user_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GroupRequestEvent::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GroupRequestEvent::user_id() const {
  // @@protoc_insertion_point(field_get:onebot.GroupRequestEvent.user_id)
  return _internal_user_id();
}
inline void GroupRequestEvent::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  user_id_ = value;
}
inline void GroupRequestEvent::set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:onebot.GroupRequestEvent.user_id)
}

// string comment = 8;
inline void GroupRequestEvent::clear_comment() {
  comment_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GroupRequestEvent::comment() const {
  // @@protoc_insertion_point(field_get:onebot.GroupRequestEvent.comment)
  return _internal_comment();
}
inline void GroupRequestEvent::set_comment(const std::string& value) {
  _internal_set_comment(value);
  // @@protoc_insertion_point(field_set:onebot.GroupRequestEvent.comment)
}
inline std::string* GroupRequestEvent::mutable_comment() {
  // @@protoc_insertion_point(field_mutable:onebot.GroupRequestEvent.comment)
  return _internal_mutable_comment();
}
inline const std::string& GroupRequestEvent::_internal_comment() const {
  return comment_.Get();
}
inline void GroupRequestEvent::_internal_set_comment(const std::string& value) {
  
  comment_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GroupRequestEvent::set_comment(std::string&& value) {
  
  comment_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:onebot.GroupRequestEvent.comment)
}
inline void GroupRequestEvent::set_comment(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  comment_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:onebot.GroupRequestEvent.comment)
}
inline void GroupRequestEvent::set_comment(const char* value,
    size_t size) {
  
  comment_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:onebot.GroupRequestEvent.comment)
}
inline std::string* GroupRequestEvent::_internal_mutable_comment() {
  
  return comment_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GroupRequestEvent::release_comment() {
  // @@protoc_insertion_point(field_release:onebot.GroupRequestEvent.comment)
  return comment_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GroupRequestEvent::set_allocated_comment(std::string* comment) {
  if (comment != nullptr) {
    
  } else {
    
  }
  comment_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), comment,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:onebot.GroupRequestEvent.comment)
}

// string flag = 9;
inline void GroupRequestEvent::clear_flag() {
  flag_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GroupRequestEvent::flag() const {
  // @@protoc_insertion_point(field_get:onebot.GroupRequestEvent.flag)
  return _internal_flag();
}
inline void GroupRequestEvent::set_flag(const std::string& value) {
  _internal_set_flag(value);
  // @@protoc_insertion_point(field_set:onebot.GroupRequestEvent.flag)
}
inline std::string* GroupRequestEvent::mutable_flag() {
  // @@protoc_insertion_point(field_mutable:onebot.GroupRequestEvent.flag)
  return _internal_mutable_flag();
}
inline const std::string& GroupRequestEvent::_internal_flag() const {
  return flag_.Get();
}
inline void GroupRequestEvent::_internal_set_flag(const std::string& value) {
  
  flag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GroupRequestEvent::set_flag(std::string&& value) {
  
  flag_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:onebot.GroupRequestEvent.flag)
}
inline void GroupRequestEvent::set_flag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  flag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:onebot.GroupRequestEvent.flag)
}
inline void GroupRequestEvent::set_flag(const char* value,
    size_t size) {
  
  flag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:onebot.GroupRequestEvent.flag)
}
inline std::string* GroupRequestEvent::_internal_mutable_flag() {
  
  return flag_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GroupRequestEvent::release_flag() {
  // @@protoc_insertion_point(field_release:onebot.GroupRequestEvent.flag)
  return flag_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GroupRequestEvent::set_allocated_flag(std::string* flag) {
  if (flag != nullptr) {
    
  } else {
    
  }
  flag_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), flag,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:onebot.GroupRequestEvent.flag)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace onebot

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_onebot_5fevent_2eproto
